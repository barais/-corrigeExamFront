(()=>{var he,ob={1005:(he,De,P)=>{"use strict";var Fe={};P.r(Fe),P.d(Fe,{arraysEqual:()=>Ye,arraysEqualWithNull:()=>lb,assert:()=>C,assertNonNegativeIntegerDimensions:()=>qn,assertNonNull:()=>go,assertShapesMatch:()=>fn,bytesFromStringArray:()=>hb,bytesPerElement:()=>qi,checkConversionForErrors:()=>ub,clamp:()=>Fr,computeStrides:()=>Ae,convertBackendValuesAndArrayBuffer:()=>fb,createScalarValue:()=>dr,createShuffledIndices:()=>iT,decodeString:()=>pr,distSquared:()=>rT,encodeString:()=>js,fetch:()=>Tb,fingerPrint64:()=>kb,flatten:()=>Ks,getArrayFromDType:()=>Ot,getTypedArrayFromDType:()=>on,hasEncodingLoss:()=>Jp,hexToLong:()=>su,indexToLoc:()=>wo,inferDtype:()=>bo,inferFromImplicitShape:()=>Qp,isBoolean:()=>db,isFunction:()=>Or,isInt:()=>yo,isNumber:()=>wc,isPromise:()=>hr,isScalarShape:()=>oT,isString:()=>Hs,isTypedArray:()=>Jt,isValidDtype:()=>cb,locToIndex:()=>Ts,makeOnesTypedArray:()=>Sc,makeZerosNestedTypedArray:()=>ef,makeZerosTypedArray:()=>mn,nearestDivisor:()=>vc,nearestLargerEven:()=>xc,now:()=>gn,parseAxisParam:()=>je,randUniform:()=>sT,repeatedTry:()=>Yp,rightPad:()=>xo,shuffle:()=>Zp,shuffleCombo:()=>nT,sizeFromShape:()=>q,sizeToSquarishShape:()=>bc,squeezeShape:()=>cr,sum:()=>ib,swap:()=>ur,tanh:()=>aT,toNestedArray:()=>os,toTypedArray:()=>Pr});var tt={};P.r(tt),P.d(tt,{assertTypesMatch:()=>Mb,getTensorsInContainer:()=>fr,isTensorInList:()=>Lh,makeTypesMatch:()=>$t});var Se={};P.r(Se),P.d(Se,{isBrowser:()=>pf,isMobile:()=>df,mockIsMobile:()=>GT});var it={};P.r(it),P.d(it,{Serializable:()=>To,SerializationMap:()=>is,getRegisteredName:()=>G2,registerClass:()=>se});var Me={};P.r(Me),P.d(Me,{assertAndGetBroadcastShape:()=>Ve,getBroadcastDims:()=>Eo,getReductionAxes:()=>Kt});var Ie={};P.r(Ie),P.d(Ie,{CompositeArrayBuffer:()=>Es,browserFiles:()=>s$,browserHTTPRequest:()=>m0,concatenateArrayBuffers:()=>Hb,copyModel:()=>f2,decodeWeights:()=>xf,encodeWeights:()=>gf,fromMemory:()=>l$,fromMemorySync:()=>Gh,getLoadHandlers:()=>Xb,getModelArtifactsForJSON:()=>vf,getModelArtifactsForJSONSync:()=>wf,getModelArtifactsInfoForJSON:()=>uu,getSaveHandlers:()=>qb,getWeightSpecs:()=>Cf,http:()=>jf,isHTTPScheme:()=>Hf,listModels:()=>d2,loadWeights:()=>h0,moveModel:()=>m2,registerLoadRouter:()=>t2,registerSaveRouter:()=>e2,removeModel:()=>p2,weightsLoaderFactory:()=>d0,withSaveHandler:()=>u$,withSaveHandlerSync:()=>c$});var We={};P.r(We),P.d(We,{confusionMatrix:()=>x$});var we={};P.r(we),P.d(we,{draw:()=>k$,fromPixels:()=>Yf,fromPixelsAsync:()=>C$,toPixels:()=>I$});var G={};P.r(G),P.d(G,{prepareAndValidate:()=>Hh});var ce={};P.r(ce),P.d(ce,{calculateShapes:()=>Br,validateInput:()=>jh,validateUpdateShape:()=>Qf});var ge={};P.r(ge),P.d(ge,{assertParamsValid:()=>em,computeFlatOffset:()=>sm,computeOutShape:()=>tm,getNormalizedAxes:()=>E$,isSliceContinous:()=>nm,maskToAxes:()=>$$,parseSliceParams:()=>Kh,sliceInfo:()=>rm,startForAxis:()=>k0,startIndicesWithElidedDims:()=>C0,stopForAxis:()=>T0,stopIndicesWithElidedDims:()=>N0,stridesForAxis:()=>I0,stridesWithElidedDims:()=>w0});var te={};P.r(te),P.d(te,{TEST_EPSILON_FLOAT16:()=>E0,createVideoElement:()=>M$,encodeStrings:()=>_0,expectArrayBuffersEqual:()=>P$,expectArraysClose:()=>R$,expectArraysEqual:()=>F$,expectNumbersClose:()=>O$,expectPromiseToFail:()=>D$,expectValuesInRange:()=>L$,play:()=>z$,testEpsilon:()=>om});var ie={};P.r(ie),P.d(ie,{conv2d:()=>Sw,depthwiseConv2d:()=>hR,matMul:()=>fg});var Ce={};P.r(Ce),P.d(Ce,{collectGatherOpShapeInfo:()=>Vg,computeOutShape:()=>av,segOpComputeOptimalWindowSize:()=>ov});var Te={};P.r(Te),P.d(Te,{ERF_A1:()=>Tg,ERF_A2:()=>$g,ERF_A3:()=>Eg,ERF_A4:()=>_g,ERF_A5:()=>Ag,ERF_P:()=>kg,PARALLELIZE_THRESHOLD:()=>Sg,RowPartitionType:()=>er,SELU_SCALE:()=>$d,SELU_SCALEALPHA:()=>Td,applyActivation:()=>vd,assertAndGetBroadcastShape:()=>Ve,assertAxesAreInnerMostDims:()=>bn,assertParamsConsistent:()=>vg,assignToTypedArray:()=>Uw,axesAreInnerMostDims:()=>Pm,calculateShapes:()=>Br,checkEinsumDimSizes:()=>Lg,checkPadOnDimRoundingMode:()=>An,combineLocations:()=>B0,combineRaggedTensorToTensorShapes:()=>Lw,complexWithEvenIndex:()=>Vw,complexWithOddIndex:()=>Ww,computeConv2DInfo:()=>ln,computeConv3DInfo:()=>Vr,computeDefaultPad:()=>ym,computeDilation2DInfo:()=>du,computeOptimalWindowSize:()=>kd,computeOutAndReduceShapes:()=>cn,computeOutShape:()=>Js,computePool2DInfo:()=>bs,computePool3DInfo:()=>xr,convertConv2DDataFormat:()=>br,decodeEinsumEquation:()=>Fg,eitherStridesOrDilationsAreOne:()=>xn,expandShapeToKeepDim:()=>zt,exponent:()=>Hw,exponents:()=>Gw,fromStringArrayToUint8:()=>iv,fromUint8ToStringArray:()=>Ir,getAxesPermutation:()=>_t,getBroadcastDims:()=>Eo,getComplexWithIndex:()=>Rg,getEinsumComputePath:()=>Pg,getEinsumPermutation:()=>Og,getFusedBiasGradient:()=>wd,getFusedDyActivation:()=>bd,getImageCenter:()=>Cg,getInnerMostAxes:()=>Bt,getPermuted:()=>Fu,getRaggedRank:()=>Mw,getReductionAxes:()=>Kt,getReshaped:()=>Du,getReshapedPermuted:()=>Ou,getRowPartitionTypesHelper:()=>Pw,getSliceBeginCoords:()=>Ng,getSliceSize:()=>Ig,getSparseFillEmptyRowsIndicesDenseShapeMismatch:()=>qw,getSparseFillEmptyRowsNegativeIndexErrorMessage:()=>Xw,getSparseFillEmptyRowsOutOfRangeIndexErrorMessage:()=>Zw,getSparseReshapeEmptyTensorZeroOutputDimErrorMessage:()=>Jw,getSparseReshapeInputOutputMismatchErrorMessage:()=>tv,getSparseReshapeInputOutputMultipleErrorMessage:()=>ev,getSparseReshapeMultipleNegativeOneOutputDimErrorMessage:()=>Yw,getSparseReshapeNegativeOutputDimErrorMessage:()=>Qw,getSparseSegmentReductionIndicesOutOfRangeErrorMessage:()=>rv,getSparseSegmentReductionNegativeSegmentIdsErrorMessage:()=>Bg,getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage:()=>nv,getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage:()=>sv,getUndoAxesPermutation:()=>Ur,isIdentityPermutation:()=>Mg,log:()=>xT,mergeRealAndImagArrays:()=>Nr,prepareAndValidate:()=>Hh,prepareSplitSize:()=>zg,segment_util:()=>Ce,shouldFuse:()=>Sd,slice_util:()=>ge,splitRealAndImagArrays:()=>Bw,stridesOrDilationsArePositive:()=>Ro,tupleValuesAreOne:()=>Wr,upcastType:()=>Pn,validateDefaultValueShape:()=>zw,validateInput:()=>jh,validateUpdateShape:()=>Qf,warn:()=>as});var ft={};P.r(ft),P.d(ft,{nonMaxSuppressionV3Impl:()=>Cd,nonMaxSuppressionV4Impl:()=>Nd,nonMaxSuppressionV5Impl:()=>Id,whereImpl:()=>yd});var Zt={};P.r(Zt),P.d(Zt,{maxNorm:()=>RL,minMaxNorm:()=>OL,nonNeg:()=>FL,unitNorm:()=>DL});var Gt={};P.r(Gt),P.d(Gt,{constant:()=>ML,glorotNormal:()=>HL,glorotUniform:()=>GL,heNormal:()=>jL,heUniform:()=>KL,identity:()=>WL,leCunNormal:()=>qL,leCunUniform:()=>XL,ones:()=>PL,orthogonal:()=>ZL,randomNormal:()=>BL,randomUniform:()=>zL,truncatedNormal:()=>VL,varianceScaling:()=>UL,zeros:()=>LL});var xs={};P.r(xs),P.d(xs,{Layer:()=>qe,RNN:()=>so,RNNCell:()=>Ku,activation:()=>k3,add:()=>O3,alphaDropout:()=>xM,average:()=>L3,averagePooling1d:()=>Py,averagePooling2d:()=>My,averagePooling3d:()=>zy,avgPool1d:()=>H3,avgPool2d:()=>K3,avgPool3d:()=>X3,avgPooling1d:()=>j3,avgPooling2d:()=>q3,avgPooling3d:()=>Z3,batchNormalization:()=>W3,bidirectional:()=>cM,categoryEncoding:()=>CM,centerCrop:()=>vM,concatenate:()=>P3,conv1d:()=>y3,conv2d:()=>x3,conv2dTranspose:()=>b3,conv3d:()=>w3,conv3dTranspose:()=>v3,convLstm2d:()=>aM,convLstm2dCell:()=>iM,cropping2D:()=>C3,dense:()=>T3,depthwiseConv2d:()=>I3,dot:()=>V3,dropout:()=>$3,elu:()=>h3,embedding:()=>F3,flatten:()=>_3,gaussianDropout:()=>yM,gaussianNoise:()=>gM,globalAveragePooling1d:()=>Y3,globalAveragePooling2d:()=>Q3,globalMaxPool1d:()=>dM,globalMaxPool2d:()=>pM,globalMaxPooling1d:()=>PS,globalMaxPooling2d:()=>MS,gru:()=>eM,gruCell:()=>tM,input:()=>S1,inputLayer:()=>c3,layerNormalization:()=>U3,leakyReLU:()=>p3,lstm:()=>nM,lstmCell:()=>sM,masking:()=>bM,maxPool1d:()=>fM,maxPool2d:()=>mM,maxPooling1d:()=>zS,maxPooling2d:()=>BS,maxPooling3d:()=>J3,maximum:()=>M3,minimum:()=>z3,multiply:()=>B3,permute:()=>D3,prelu:()=>f3,randomWidth:()=>NM,reLU:()=>d3,repeatVector:()=>A3,rescaling:()=>wM,reshape:()=>R3,resizing:()=>SM,rnn:()=>lM,separableConv2d:()=>S3,simpleRNN:()=>rM,simpleRNNCell:()=>oM,softmax:()=>m3,spatialDropout1d:()=>E3,stackedRNNCells:()=>uM,thresholdedReLU:()=>g3,timeDistributed:()=>hM,upSampling2d:()=>N3,zeroPadding2d:()=>G3});var rs={};P.r(rs),P.d(rs,{MAPE:()=>OM,MSE:()=>MM,binaryAccuracy:()=>IM,binaryCrossentropy:()=>kM,categoricalAccuracy:()=>$M,categoricalCrossentropy:()=>EM,cosineProximity:()=>RM,mape:()=>LM,meanAbsoluteError:()=>DM,meanAbsolutePercentageError:()=>FM,meanSquaredError:()=>PM,mse:()=>zM,precision:()=>_M,recall:()=>AM,sparseCategoricalAccuracy:()=>TM});var nt={};P.r(nt),P.d(nt,{modelFromJSON:()=>MP});var lt={};P.r(lt),P.d(lt,{l1:()=>VM,l1l2:()=>BM,l2:()=>WM});var ut={};P.r(ut),P.d(ut,{json:()=>KM});var oe={};P.r(oe),P.d(oe,{json:()=>qM});var ee={};P.r(ee),P.d(ee,{json:()=>XM});var _={};P.r(_),P.d(_,{json:()=>ZM});var ye={};P.r(ye),P.d(ye,{json:()=>YM});var Oe={};P.r(Oe),P.d(Oe,{json:()=>QM});var st={};P.r(st),P.d(st,{json:()=>JM});var Xe={};P.r(Xe),P.d(Xe,{json:()=>ez});var ht={};P.r(ht),P.d(ht,{json:()=>tz});var Ft={};P.r(Ft),P.d(Ft,{json:()=>nz});var Lt={};P.r(Lt),P.d(Lt,{json:()=>sz});var Yt={};P.r(Yt),P.d(Yt,{json:()=>rz});var Tt={};P.r(Tt),P.d(Tt,{json:()=>oz});var $n={};P.r($n),P.d($n,{json:()=>az});var Pt={};P.r(Pt),P.d(Pt,{json:()=>iz});var In={};P.r(In),P.d(In,{json:()=>lz});var Dr={};P.r(Dr),P.d(Dr,{json:()=>uz});var Up={};P.r(Up),P.d(Up,{json:()=>cz});var Gp={};P.r(Gp),P.d(Gp,{json:()=>hz});var Qt={};P.r(Qt),P.d(Qt,{OP_SCOPE_SUFFIX:()=>ff,abs:()=>jt,acos:()=>um,acosh:()=>cm,add:()=>ne,addN:()=>D0,all:()=>qh,any:()=>hu,argMax:()=>Ao,argMin:()=>hm,asin:()=>dm,asinh:()=>pm,atan:()=>fm,atan2:()=>mm,atanh:()=>gm,avgPool:()=>mu,avgPool3d:()=>bm,basicLSTMCell:()=>F0,batchNorm:()=>mi,batchNorm2d:()=>wm,batchNorm3d:()=>vm,batchNorm4d:()=>Sm,batchToSpaceND:()=>gu,bincount:()=>Cm,bitwiseAnd:()=>O0,booleanMaskAsync:()=>gw,broadcastArgs:()=>L0,broadcastTo:()=>Fo,buffer:()=>Ge,cast:()=>de,ceil:()=>Nm,clipByValue:()=>zn,clone:()=>Zs,complex:()=>mr,concat:()=>Mt,concat1d:()=>Im,concat2d:()=>km,concat3d:()=>Tm,concat4d:()=>$m,conv1d:()=>Xh,conv2d:()=>wr,conv2dTranspose:()=>Zh,conv3d:()=>_m,conv3dTranspose:()=>Am,cos:()=>yu,cosh:()=>Yh,cosineWindow:()=>xd,cumprod:()=>xu,cumsum:()=>Qh,denseBincount:()=>Jh,depthToSpace:()=>Rm,depthwiseConv2d:()=>gi,diag:()=>M0,dilation2d:()=>Dm,div:()=>$e,divNoNan:()=>Fm,dot:()=>Om,dropout:()=>cg,einsum:()=>Oo,elu:()=>yi,enclosingPowerOfTwo:()=>hg,ensureShape:()=>z0,equal:()=>Zn,erf:()=>Lm,euclideanNorm:()=>Mm,exp:()=>Bn,expandDims:()=>wn,expm1:()=>zm,eye:()=>ed,fft:()=>Au,fill:()=>$o,floor:()=>wi,floorDiv:()=>Vh,fused:()=>ie,gather:()=>vi,gatherND:()=>ww,greater:()=>Rn,greaterEqual:()=>vr,ifft:()=>Ii,imag:()=>cu,image:()=>ds,inTopKAsync:()=>vw,irfft:()=>pd,isFinite:()=>Bm,isInf:()=>Vm,isNaN:()=>Wm,leakyRelu:()=>bu,less:()=>Si,lessEqual:()=>Gr,linalg:()=>bg,linspace:()=>W0,localResponseNormalization:()=>Um,log:()=>Yn,log1p:()=>wu,logSigmoid:()=>Gm,logSoftmax:()=>td,logSumExp:()=>vu,logicalAnd:()=>ws,logicalNot:()=>Su,logicalOr:()=>nd,logicalXor:()=>Hm,losses:()=>Dw,lowerBound:()=>U0,matMul:()=>Ke,max:()=>ls,maxPool:()=>Cu,maxPool3d:()=>jm,maxPoolWithArgmax:()=>G0,maximum:()=>Qs,mean:()=>At,meshgrid:()=>H0,min:()=>xi,minimum:()=>Hr,mirrorPad:()=>Km,mod:()=>qm,moments:()=>Nu,movingAverage:()=>yw,mul:()=>D,multiRNNCell:()=>j0,multinomial:()=>K0,neg:()=>St,norm:()=>bi,notEqual:()=>Po,oneHot:()=>di,ones:()=>Vn,onesLike:()=>Qn,op:()=>A,outerProduct:()=>q0,pad:()=>Sr,pad1d:()=>X0,pad2d:()=>Z0,pad3d:()=>Y0,pad4d:()=>Q0,pool:()=>Xm,pow:()=>yr,prelu:()=>ku,print:()=>Df,prod:()=>Zm,raggedGather:()=>J0,raggedRange:()=>ew,raggedTensorToTensor:()=>tw,rand:()=>nw,randomGamma:()=>sw,randomNormal:()=>Tu,randomStandardNormal:()=>rw,randomUniform:()=>jr,randomUniformInt:()=>ow,range:()=>Mo,real:()=>pi,reciprocal:()=>Jm,relu:()=>Rs,relu6:()=>od,reshape:()=>F,reverse:()=>cs,reverse1d:()=>aw,reverse2d:()=>iw,reverse3d:()=>lw,reverse4d:()=>uw,rfft:()=>Ru,round:()=>ad,rsqrt:()=>id,scalar:()=>_e,scatterND:()=>xw,searchSorted:()=>rd,selu:()=>ld,separableConv2d:()=>ud,setdiff1dAsync:()=>cw,sigmoid:()=>As,sign:()=>tg,signal:()=>Rw,sin:()=>cd,sinh:()=>hd,slice:()=>et,slice1d:()=>$u,slice2d:()=>dd,slice3d:()=>Eu,slice4d:()=>Ni,softmax:()=>_u,softplus:()=>Lo,spaceToBatchND:()=>Iu,sparse:()=>Fw,sparseToDense:()=>bw,spectral:()=>Aw,split:()=>Wn,sqrt:()=>yn,square:()=>gt,squaredDifference:()=>fd,squeeze:()=>Kr,stack:()=>Dn,step:()=>zo,stridedSlice:()=>ng,string:()=>Ow,sub:()=>be,sum:()=>ve,tan:()=>sg,tanh:()=>Do,tensor:()=>Xn,tensor1d:()=>vn,tensor2d:()=>qr,tensor3d:()=>qf,tensor4d:()=>hw,tensor5d:()=>dw,tensor6d:()=>pw,tensorScatterUpdate:()=>fw,tile:()=>us,topk:()=>rg,transpose:()=>Qe,truncatedNormal:()=>md,unique:()=>og,unsortedSegmentSum:()=>gd,unstack:()=>hs,upperBound:()=>mw,variable:()=>ag,where:()=>un,whereAsync:()=>lg,zeros:()=>qt,zerosLike:()=>Je});var Hp={};P.r(Hp),P.d(Hp,{CSVDataset:()=>mC,Dataset:()=>Qu,FileDataSource:()=>wC,TextLineDataset:()=>dC,URLDataSource:()=>vC,array:()=>vB,csv:()=>RB,func:()=>DB,generator:()=>FB,microphone:()=>LB,version_data:()=>SC,webcam:()=>OB,zip:()=>SB});var gc={};P.r(gc),P.d(gc,{addImpl:()=>kC,bincountImpl:()=>hx,bincountReduceImpl:()=>TC,bitwiseAndImpl:()=>$C,castImpl:()=>IC,ceilImpl:()=>EC,concatImpl:()=>_C,equalImpl:()=>AC,expImpl:()=>DC,expm1Impl:()=>OC,floorDivImpl:()=>PC,floorImpl:()=>LC,gatherNdImpl:()=>MC,gatherV2Impl:()=>zC,greaterEqualImpl:()=>VC,greaterImpl:()=>BC,lessEqualImpl:()=>UC,lessImpl:()=>WC,linSpaceImpl:()=>GC,logImpl:()=>HC,maxImpl:()=>jC,maximumImpl:()=>KC,minimumImpl:()=>qC,multiplyImpl:()=>dx,negImpl:()=>XC,notEqualImpl:()=>ZC,prodImpl:()=>YC,raggedGatherImpl:()=>JC,raggedRangeImpl:()=>tN,raggedTensorToTensorImpl:()=>rN,rangeImpl:()=>oN,rsqrtImpl:()=>aN,scatterImpl:()=>Qo,sigmoidImpl:()=>FV,simpleAbsImpl:()=>NC,sliceImpl:()=>lN,sparseFillEmptyRowsImpl:()=>uN,sparseReshapeImpl:()=>cN,sparseSegmentReductionImpl:()=>fx,sqrtImpl:()=>PV,squaredDifferenceImpl:()=>hN,staticRegexReplaceImpl:()=>dN,stridedSliceImpl:()=>pN,stringNGramsImpl:()=>fN,stringSplitImpl:()=>mN,stringToHashBucketFastImpl:()=>gN,subImpl:()=>yN,tileImpl:()=>xN,topKImpl:()=>wN,transposeImpl:()=>px,uniqueImpl:()=>vN});var jp={};P.r(jp),P.d(jp,{assertNotComplex:()=>Mi,bindCanvasToFramebuffer:()=>xj,bindColorTextureToFramebuffer:()=>Np,bindTextureToProgramUniformSampler:()=>nI,bindTextureUnit:()=>JN,bindVertexBufferToProgramAttribute:()=>Cx,callAndCheck:()=>me,canBeRepresented:()=>WN,createFragmentShader:()=>HN,createFramebuffer:()=>QN,createProgram:()=>jN,createStaticIndexBuffer:()=>XN,createStaticVertexBuffer:()=>qN,createTexture:()=>ZN,createVertexShader:()=>GN,getBatchDim:()=>ea,getExtensionOrThrow:()=>rc,getFramebufferErrorMessage:()=>sI,getMaxTexturesInShader:()=>iI,getNumChannels:()=>gj,getProgramUniformLocation:()=>tI,getProgramUniformLocationOrThrow:()=>eI,getRowsCols:()=>ta,getShapeAs3D:()=>ac,getTextureShapeFromLogicalShape:()=>oI,getWebGLDisjointQueryTimerVersion:()=>lI,getWebGLErrorMessage:()=>UN,getWebGLMaxTextureSize:()=>aI,hasExtension:()=>ms,isCapableOfRenderingToFloatTexture:()=>uI,isDownloadFloatTextureEnabled:()=>cI,isReshapeFree:()=>ic,isWebGLFenceEnabled:()=>hI,isWebGLVersionEnabled:()=>Ix,linkProgram:()=>KN,logShaderSourceAndInfoLog:()=>Sx,resetMaxTextureSize:()=>bj,resetMaxTexturesInShader:()=>wj,unbindColorTextureFromFramebuffer:()=>Nx,unbindTextureUnit:()=>yj,validateFramebuffer:()=>oc,validateProgram:()=>Cp,validateTextureSize:()=>YN});var Kp={};P.r(Kp),P.d(Kp,{bindVertexProgramAttributeStreams:()=>TI,createBufferFromOutputTexture:()=>_I,createFloat16MatrixTexture:()=>CI,createFloat16PackedMatrixTexture:()=>kI,createFloat32MatrixTexture:()=>SI,createIndexBuffer:()=>vI,createPackedMatrixTexture:()=>II,createUnsignedBytesMatrixTexture:()=>NI,createVertexBuffer:()=>wI,createVertexShader:()=>bI,downloadByteEncodedFloatMatrixFromOutputTexture:()=>RI,downloadFloat32MatrixFromBuffer:()=>AI,downloadMatrixFromPackedOutputTexture:()=>FI,downloadPackedMatrixFromBuffer:()=>DI,getInternalFormatForFloat16MatrixTexture:()=>Ax,getInternalFormatForFloat16PackedMatrixTexture:()=>Fx,getInternalFormatForFloat32MatrixTexture:()=>_x,getInternalFormatForPackedMatrixTexture:()=>Dx,getInternalFormatForUnsignedBytesMatrixTexture:()=>Rx,uploadDenseMatrixToTexture:()=>$I,uploadPixelDataToTexture:()=>EI});var qp={};P.r(qp),P.d(qp,{Abs:()=>Xi,Acos:()=>ha,Acosh:()=>da,AdadeltaOptimizer:()=>Lf,AdagradOptimizer:()=>Pf,AdamOptimizer:()=>Mf,AdamaxOptimizer:()=>zf,Add:()=>vo,AddN:()=>Zi,All:()=>Cc,Any:()=>Nc,ArgMax:()=>Yi,ArgMin:()=>Qi,Asin:()=>pa,Asinh:()=>fa,Atan:()=>ma,Atan2:()=>ya,Atanh:()=>ga,AvgPool:()=>Ji,AvgPool3D:()=>el,AvgPool3DGrad:()=>kc,AvgPoolGrad:()=>Ic,BatchMatMul:()=>tl,BatchToSpaceND:()=>nl,Bincount:()=>Tc,BitwiseAnd:()=>sl,BroadcastArgs:()=>$c,BroadcastTo:()=>xb,Callback:()=>VS,CallbackList:()=>Qv,Cast:()=>xa,Ceil:()=>ba,ClipByValue:()=>wa,Complex:()=>Ec,ComplexAbs:()=>rl,Concat:()=>ol,Conv2D:()=>al,Conv2DBackpropFilter:()=>_c,Conv2DBackpropInput:()=>il,Conv3D:()=>ll,Conv3DBackpropFilterV2:()=>Ac,Conv3DBackpropInputV2:()=>Rc,Cos:()=>va,Cosh:()=>Sa,CropAndResize:()=>Fc,Cumprod:()=>Dc,Cumsum:()=>ul,CustomCallback:()=>e1,DataStorage:()=>Xp,DenseBincount:()=>Oc,DepthToSpace:()=>Lc,DepthwiseConv2dNative:()=>cl,DepthwiseConv2dNativeBackpropFilter:()=>Pc,DepthwiseConv2dNativeBackpropInput:()=>Mc,Diag:()=>zc,Dilation2D:()=>hl,Dilation2DBackpropFilter:()=>Vc,Dilation2DBackpropInput:()=>Bc,Draw:()=>Wc,ENV:()=>nf,EarlyStopping:()=>US,Einsum:()=>Uc,Elu:()=>Na,EluGrad:()=>Gc,Environment:()=>gb,Equal:()=>dl,Erf:()=>Ia,Exp:()=>ka,ExpandDims:()=>pl,Expm1:()=>Ta,FFT:()=>Hc,Fill:()=>jc,FlipLeftRight:()=>Kc,Floor:()=>$a,FloorDiv:()=>Ea,FromPixels:()=>Eh,FusedBatchNorm:()=>fl,FusedConv2D:()=>Jl,FusedDepthwiseConv2D:()=>eu,GPGPUContext:()=>_p,GatherNd:()=>qc,GatherV2:()=>ml,GraphModel:()=>ex,Greater:()=>gl,GreaterEqual:()=>_a,History:()=>Jv,IFFT:()=>Xc,Identity:()=>Aa,Imag:()=>Zc,InputSpec:()=>Xt,IsFinite:()=>Ra,IsInf:()=>Da,IsNan:()=>Fa,KernelBackend:()=>yc,LRN:()=>Cl,LRNGrad:()=>Qc,LayerVariable:()=>Ls,LayersModel:()=>eo,LeakyRelu:()=>yl,Less:()=>xl,LessEqual:()=>bl,LinSpace:()=>Yc,Log:()=>Oa,Log1p:()=>La,LogSoftmax:()=>bb,LogicalAnd:()=>wl,LogicalNot:()=>vl,LogicalOr:()=>Sl,LogicalXor:()=>pT,LowerBound:()=>fT,MathBackendCPU:()=>CC,MathBackendWebGL:()=>GI,MatrixBandPart:()=>mT,Max:()=>Nl,MaxPool:()=>Il,MaxPool3D:()=>kl,MaxPool3DGrad:()=>eh,MaxPoolGrad:()=>Jc,MaxPoolWithArgmax:()=>th,Maximum:()=>Pa,Mean:()=>Tl,Min:()=>$l,Minimum:()=>Ma,MirrorPad:()=>El,Mod:()=>za,MomentumOptimizer:()=>Bf,Multinomial:()=>nh,Multiply:()=>Ba,Neg:()=>_l,NonMaxSuppressionV3:()=>sh,NonMaxSuppressionV4:()=>rh,NonMaxSuppressionV5:()=>oh,NotEqual:()=>Al,OP_SCOPE_SUFFIX:()=>ff,OneHot:()=>Dl,OnesLike:()=>Rl,Optimizer:()=>gr,OptimizerConstructors:()=>R0,Pack:()=>Fl,PadV2:()=>Ol,Pool:()=>gT,Pow:()=>Va,Prelu:()=>Ll,Prod:()=>Pl,RMSPropOptimizer:()=>Vf,RNN:()=>so,RaggedGather:()=>ah,RaggedRange:()=>ih,RaggedTensorToTensor:()=>lh,Range:()=>uh,Rank:()=>Ab,Real:()=>ch,RealDiv:()=>Ca,Reciprocal:()=>Wa,Reduction:()=>Un,Relu:()=>Ua,Relu6:()=>Ga,Reshape:()=>Ml,ResizeBilinear:()=>Bl,ResizeBilinearGrad:()=>dh,ResizeNearestNeighbor:()=>zl,ResizeNearestNeighborGrad:()=>hh,Reverse:()=>Vl,RotateWithOffset:()=>_h,Round:()=>Ha,Rsqrt:()=>ja,SGDOptimizer:()=>Uh,ScatterNd:()=>ph,SearchSorted:()=>mh,Select:()=>Wl,Selu:()=>Ka,Sequential:()=>Iy,Sigmoid:()=>Ya,Sign:()=>Za,Sin:()=>qa,Sinh:()=>Xa,Slice:()=>Ul,Softmax:()=>Kl,Softplus:()=>Qa,SpaceToBatchND:()=>Hl,SparseFillEmptyRows:()=>gh,SparseReshape:()=>yh,SparseSegmentMean:()=>xh,SparseSegmentSum:()=>bh,SparseToDense:()=>wh,SplitV:()=>jl,Sqrt:()=>Ja,Square:()=>vh,SquaredDifference:()=>ei,StaticRegexReplace:()=>ql,Step:()=>oi,StridedSlice:()=>Sh,StringNGrams:()=>Ch,StringSplit:()=>Nh,StringToHashBucketFast:()=>Ih,Sub:()=>ti,Sum:()=>Gl,SymbolicTensor:()=>Ps,Tan:()=>ni,Tanh:()=>si,Tensor:()=>rt,TensorBuffer:()=>Ht,TensorScatterUpdate:()=>fh,Tile:()=>ri,TopK:()=>kh,Transform:()=>Th,Transpose:()=>So,Unique:()=>$h,Unpack:()=>Xl,UnsortedSegmentSum:()=>Zl,UpperBound:()=>yT,Variable:()=>iu,ZerosLike:()=>Yl,_FusedMatMul:()=>Ql,abs:()=>jt,acos:()=>um,acosh:()=>cm,add:()=>ne,addN:()=>D0,all:()=>qh,any:()=>hu,argMax:()=>Ao,argMin:()=>hm,asin:()=>dm,asinh:()=>pm,atan:()=>fm,atan2:()=>mm,atanh:()=>gm,avgPool:()=>mu,avgPool3d:()=>bm,backend:()=>a0,backend_util:()=>Te,basicLSTMCell:()=>F0,batchNorm:()=>mi,batchNorm2d:()=>wm,batchNorm3d:()=>vm,batchNorm4d:()=>Sm,batchToSpaceND:()=>gu,bincount:()=>Cm,bitwiseAnd:()=>O0,booleanMaskAsync:()=>gw,broadcastArgs:()=>L0,broadcastTo:()=>Fo,broadcast_util:()=>Me,browser:()=>we,buffer:()=>Ge,callbacks:()=>GM,cast:()=>de,ceil:()=>Nm,clipByValue:()=>zn,clone:()=>Zs,complex:()=>mr,concat:()=>Mt,concat1d:()=>Im,concat2d:()=>km,concat3d:()=>Tm,concat4d:()=>$m,constraints:()=>Zt,conv1d:()=>Xh,conv2d:()=>wr,conv2dTranspose:()=>Zh,conv3d:()=>_m,conv3dTranspose:()=>Am,copyRegisteredKernels:()=>vT,cos:()=>yu,cosh:()=>Yh,cosineWindow:()=>xd,cumprod:()=>xu,cumsum:()=>Qh,customGrad:()=>Ys,data:()=>Hp,denseBincount:()=>Jh,deprecationWarn:()=>s0,depthToSpace:()=>Rm,depthwiseConv2d:()=>gi,deregisterOp:()=>jM,device_util:()=>Se,diag:()=>M0,dilation2d:()=>Dm,disableDeprecationWarnings:()=>C2,dispose:()=>Be,disposeVariables:()=>N2,div:()=>$e,divNoNan:()=>Fm,dot:()=>Om,dropout:()=>cg,einsum:()=>Oo,elu:()=>yi,enableDebugMode:()=>S2,enableProdMode:()=>v2,enclosingPowerOfTwo:()=>hg,engine:()=>_s,ensureShape:()=>z0,env:()=>B,equal:()=>Zn,erf:()=>Lm,euclideanNorm:()=>Mm,exp:()=>Bn,expandDims:()=>wn,expm1:()=>zm,eye:()=>ed,fft:()=>Au,fill:()=>$o,findBackend:()=>E2,findBackendFactory:()=>_2,floor:()=>wi,floorDiv:()=>Vh,forceHalfFloat:()=>jI,fused:()=>ie,gather:()=>vi,gatherND:()=>ww,gather_util:()=>G,getBackend:()=>o0,getGradient:()=>of,getKernel:()=>nu,getKernelsForBackend:()=>Ah,gpgpu_util:()=>Kp,grad:()=>z2,grads:()=>B2,greater:()=>Rn,greaterEqual:()=>vr,ifft:()=>Ii,imag:()=>cu,image:()=>ds,inTopKAsync:()=>vw,initializers:()=>Gt,input:()=>S1,io:()=>Ie,irfft:()=>pd,isFinite:()=>Bm,isInf:()=>Vm,isNaN:()=>Wm,keep:()=>en,kernel_impls:()=>ft,layers:()=>xs,leakyRelu:()=>bu,less:()=>Si,lessEqual:()=>Gr,linalg:()=>bg,linspace:()=>W0,loadGraphModel:()=>Qz,loadGraphModelSync:()=>Jz,loadLayersModel:()=>Xd,localResponseNormalization:()=>Um,log:()=>Yn,log1p:()=>wu,logSigmoid:()=>Gm,logSoftmax:()=>td,logSumExp:()=>vu,logicalAnd:()=>ws,logicalNot:()=>Su,logicalOr:()=>nd,logicalXor:()=>Hm,losses:()=>Dw,lowerBound:()=>U0,matMul:()=>Ke,math:()=>We,max:()=>ls,maxPool:()=>Cu,maxPool3d:()=>jm,maxPoolWithArgmax:()=>G0,maximum:()=>Qs,mean:()=>At,memory:()=>Bh,meshgrid:()=>H0,metrics:()=>rs,min:()=>xi,minimum:()=>Hr,mirrorPad:()=>Km,mod:()=>qm,model:()=>VP,models:()=>nt,moments:()=>Nu,movingAverage:()=>yw,mul:()=>D,multiRNNCell:()=>j0,multinomial:()=>K0,neg:()=>St,nextFrame:()=>wg,norm:()=>bi,notEqual:()=>Po,oneHot:()=>di,ones:()=>Vn,onesLike:()=>Qn,op:()=>A,outerProduct:()=>q0,pad:()=>Sr,pad1d:()=>X0,pad2d:()=>Z0,pad3d:()=>Y0,pad4d:()=>Q0,pool:()=>Xm,pow:()=>yr,prelu:()=>ku,print:()=>Df,prod:()=>Zm,profile:()=>I2,raggedGather:()=>J0,raggedRange:()=>ew,raggedTensorToTensor:()=>tw,rand:()=>nw,randomGamma:()=>sw,randomNormal:()=>Tu,randomStandardNormal:()=>rw,randomUniform:()=>jr,randomUniformInt:()=>ow,range:()=>Mo,ready:()=>T2,real:()=>pi,reciprocal:()=>Jm,registerBackend:()=>Ff,registerCallbackConstructor:()=>UP,registerGradient:()=>wb,registerKernel:()=>Rh,registerOp:()=>HM,regularizers:()=>lt,relu:()=>Rs,relu6:()=>od,removeBackend:()=>$2,reshape:()=>F,reverse:()=>cs,reverse1d:()=>aw,reverse2d:()=>iw,reverse3d:()=>lw,reverse4d:()=>uw,rfft:()=>Ru,round:()=>ad,rsqrt:()=>id,scalar:()=>_e,scatterND:()=>xw,scatter_util:()=>ce,searchSorted:()=>rd,selu:()=>ld,separableConv2d:()=>ud,sequential:()=>WP,serialization:()=>it,setBackend:()=>r0,setPlatform:()=>A2,setWebGLContext:()=>VN,setdiff1dAsync:()=>cw,shared:()=>gc,sigmoid:()=>As,sign:()=>tg,signal:()=>Rw,sin:()=>cd,sinh:()=>hd,slice:()=>et,slice1d:()=>$u,slice2d:()=>dd,slice3d:()=>Eu,slice4d:()=>Ni,slice_util:()=>ge,softmax:()=>_u,softplus:()=>Lo,spaceToBatchND:()=>Iu,sparse:()=>Fw,sparseToDense:()=>bw,spectral:()=>Aw,split:()=>Wn,sqrt:()=>yn,square:()=>gt,squaredDifference:()=>fd,squeeze:()=>Kr,stack:()=>Dn,step:()=>zo,stridedSlice:()=>ng,string:()=>Ow,sub:()=>be,sum:()=>ve,sumOutType:()=>Oh,tan:()=>sg,tanh:()=>Do,tensor:()=>Xn,tensor1d:()=>vn,tensor2d:()=>qr,tensor3d:()=>qf,tensor4d:()=>hw,tensor5d:()=>dw,tensor6d:()=>pw,tensorScatterUpdate:()=>fw,tensor_util:()=>tt,test_util:()=>te,tidy:()=>z,tile:()=>us,time:()=>k2,topk:()=>rg,train:()=>Bo,transpose:()=>Qe,truncatedNormal:()=>md,unique:()=>og,unregisterGradient:()=>wT,unregisterKernel:()=>bT,unsortedSegmentSum:()=>gd,unstack:()=>hs,upcastType:()=>Pn,upperBound:()=>mw,util:()=>Fe,valueAndGrad:()=>V2,valueAndGrads:()=>W2,variable:()=>ag,variableGrads:()=>i0,version:()=>S9,version_converter:()=>nC,version_core:()=>A0,version_cpu:()=>SN,version_layers:()=>qd,version_webgl:()=>HI,webgl:()=>Dq,webgl_util:()=>jp,where:()=>un,whereAsync:()=>lg,zeros:()=>qt,zerosLike:()=>Je});var O=P(5861),lr=P(6656);class Xp{constructor(t,e){this.backend=t,this.dataMover=e,this.data=new WeakMap,this.dataIdsCount=0}get(t){return this.data.has(t)||this.dataMover.moveData(this.backend,t),this.data.get(t)}set(t,e){this.dataIdsCount++,this.data.set(t,e)}has(t){return this.data.has(t)}delete(t){return this.dataIdsCount--,this.data.delete(t)}numDataIds(){return this.dataIdsCount}}class yc{refCount(t){return Kn("refCount")}incRef(t){return Kn("incRef")}timerAvailable(){return!0}time(t){return Kn("time")}read(t){return Kn("read")}readSync(t){return Kn("readSync")}readToGPU(t,e){return Kn("readToGPU")}numDataIds(){return Kn("numDataIds")}disposeData(t,e){return Kn("disposeData")}write(t,e,s){return Kn("write")}move(t,e,s,r,o){return Kn("move")}createTensorFromGPUData(t,e,s){return Kn("createTensorFromGPUData")}memory(){return Kn("memory")}floatPrecision(){return Kn("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return Kn("dispose")}}function Kn(n){throw new Error(`'${n}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function Zp(n){let t=n.length,e=0;for(;t>0;)e=Math.random()*t|0,t--,ur(n,t,e)}function nT(n,t){if(n.length!==t.length)throw new Error(`Array sizes must match to be shuffled together First array length was ${n.length}Second array length was ${t.length}`);let e=n.length,s=0;for(;e>0;)s=Math.random()*e|0,e--,ur(n,e,s),ur(t,e,s)}function Fr(n,t,e){return Math.max(n,Math.min(t,e))}function xc(n){return n%2==0?n:n+1}function ur(n,t,e){const s=n[t];n[t]=n[e],n[e]=s}function ib(n){let t=0;for(let e=0;e<n.length;e++)t+=n[e];return t}function sT(n,t){const e=Math.random();return t*e+(1-e)*n}function rT(n,t){let e=0;for(let s=0;s<n.length;s++){const r=Number(n[s])-Number(t[s]);e+=r*r}return e}function C(n,t){if(!n)throw new Error("string"==typeof t?t:t())}function fn(n,t,e=""){C(Ye(n,t),()=>e+` Shapes ${n} and ${t} must match`)}function go(n){C(null!=n,()=>"The input to the tensor constructor must be a non-null value.")}function q(n){if(0===n.length)return 1;let t=n[0];for(let e=1;e<n.length;e++)t*=n[e];return t}function oT(n){return 0===n.length}function lb(n,t){if(n===t)return!0;if(null==n||null==t||n.length!==t.length)return!1;for(let e=0;e<n.length;e++)if(null!==n[e]&&null!==t[e]&&n[e]!==t[e])return!1;return!0}function Ye(n,t){if(n===t)return!0;if(null==n||null==t||n.length!==t.length)return!1;for(let e=0;e<n.length;e++)if(n[e]!==t[e])return!1;return!0}function yo(n){return n%1==0}function aT(n){if(null!=Math.tanh)return Math.tanh(n);if(n===1/0)return 1;if(n===-1/0)return-1;{const t=Math.exp(2*n);return(t-1)/(t+1)}}function bc(n){const t=Math.ceil(Math.sqrt(n));return[t,Math.ceil(n/t)]}function iT(n){const t=new Uint32Array(n);for(let e=0;e<n;++e)t[e]=e;return Zp(t),t}function xo(n,t){return t<=n.length?n:n+" ".repeat(t-n.length)}function Yp(n,t=(r=>0),e,s){return new Promise((r,o)=>{let a=0;const i=()=>{if(n())return void r();a++;const l=t(a);null!=e&&a>=e?o():null!=s?s(i,l):setTimeout(i,l)};i()})}function Qp(n,t){let e=1,s=-1;for(let o=0;o<n.length;++o)if(n[o]>=0)e*=n[o];else if(-1===n[o]){if(-1!==s)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${s} and dim ${o}`);s=o}else if(n[o]<0)throw Error(`Shapes can not be < 0. Found ${n[o]} at dim ${o}`);if(-1===s){if(t>0&&t!==e)throw Error(`Size(${t}) must match the product of shape ${n}`);return n}if(0===e)throw Error(`Cannot infer the missing size in [${n}] when there are 0 elements`);if(t%e!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${e}`);const r=n.slice();return r[s]=t/e,r}function je(n,t){const e=t.length;return C((n=null==n?t.map((s,r)=>r):[].concat(n)).every(s=>s>=-e&&s<e),()=>`All values in axis param must be in range [-${e}, ${e}) but got axis ${n}`),C(n.every(s=>yo(s)),()=>`All values in axis param must be integers but got axis ${n}`),n.map(s=>s<0?e+s:s)}function cr(n,t){const e=[],s=[],r=null!=t&&Array.isArray(t)&&0===t.length,o=null==t||r?null:je(t,n).sort();let a=0;for(let i=0;i<n.length;++i){if(null!=o){if(o[a]===i&&1!==n[i])throw new Error(`Can't squeeze axis ${i} since its dim '${n[i]}' is not 1`);(null==o[a]||o[a]>i)&&1===n[i]&&(e.push(n[i]),s.push(i)),o[a]<=i&&a++}1!==n[i]&&(e.push(n[i]),s.push(i))}return{newShape:e,keptDims:s}}function on(n,t){return Ot(n,t)}function Ot(n,t){let e=null;if(null==n||"float32"===n)e=new Float32Array(t);else if("int32"===n)e=new Int32Array(t);else if("bool"===n)e=new Uint8Array(t);else{if("string"!==n)throw new Error(`Unknown data type ${n}`);e=new Array(t)}return e}function ub(n,t){for(let e=0;e<n.length;e++){const s=n[e];if(isNaN(s)||!isFinite(s))throw Error(`A tensor of type ${t} being uploaded contains ${s}.`)}}function cb(n){return"bool"===n||"complex64"===n||"float32"===n||"int32"===n||"string"===n}function Jp(n,t){return!("complex64"===t||"float32"===t&&"complex64"!==n||"int32"===t&&"float32"!==n&&"complex64"!==n||"bool"===t&&"bool"===n)}function qi(n){if("float32"===n||"int32"===n)return 4;if("complex64"===n)return 8;if("bool"===n)return 1;throw new Error(`Unknown dtype ${n}`)}function hb(n){if(null==n)return 0;let t=0;return n.forEach(e=>t+=e.length),t}function Hs(n){return"string"==typeof n||n instanceof String}function db(n){return"boolean"==typeof n}function wc(n){return"number"==typeof n}function bo(n){return Array.isArray(n)?bo(n[0]):n instanceof Float32Array?"float32":n instanceof Int32Array||n instanceof Uint8Array||n instanceof Uint8ClampedArray?"int32":wc(n)?"float32":Hs(n)?"string":db(n)?"bool":"float32"}function Or(n){return!!(n&&n.constructor&&n.call&&n.apply)}function vc(n,t){for(let e=t;e<n;++e)if(n%e==0)return e;return n}function Ae(n){const t=n.length;if(t<2)return[];const e=new Array(t-1);e[t-2]=n[t-1];for(let s=t-3;s>=0;--s)e[s]=e[s+1]*n[s+1];return e}function pb(n,t,e,s=!1){const r=new Array;if(1===t.length){const o=t[0]*(s?2:1);for(let a=0;a<o;a++)r[a]=e[n+a]}else{const o=t[0],a=t.slice(1),i=a.reduce((l,u)=>l*u)*(s?2:1);for(let l=0;l<o;l++)r[l]=pb(n+l*i,a,e,s)}return r}function os(n,t,e=!1){if(0===n.length)return t[0];const s=n.reduce((r,o)=>r*o)*(e?2:1);if(0===s)return[];if(s!==t.length)throw new Error(`[${n}] does not match the input size ${t.length}${e?" for a complex tensor":""}.`);return pb(0,n,t,e)}function fb(n,t){if(Array.isArray(n))return n;if("float32"===t)return n instanceof Float32Array?n:new Float32Array(n);if("int32"===t)return n instanceof Int32Array?n:new Int32Array(n);if("bool"===t||"string"===t)return Uint8Array.from(new Int32Array(n));throw new Error(`Unknown dtype ${t}`)}function Sc(n,t){const e=mn(n,t);for(let s=0;s<e.length;s++)e[s]=1;return e}function mn(n,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(n);if("int32"===t)return new Int32Array(n);if("bool"===t)return new Uint8Array(n);throw new Error(`Unknown data type ${t}`)}function ef(n,t){const e=n.reduce((s,r)=>s*r,1);if(null==t||"float32"===t)return os(n,new Float32Array(e));if("int32"===t)return os(n,new Int32Array(e));if("bool"===t)return os(n,new Uint8Array(e));throw new Error(`Unknown data type ${t}`)}function qn(n){n.forEach(t=>{C(Number.isInteger(t)&&t>=0,()=>`Tensor must have a shape comprised of positive integers but got shape [${n}].`)})}function Ts(n,t,e){if(0===t)return 0;if(1===t)return n[0];let s=n[n.length-1];for(let r=0;r<n.length-1;++r)s+=e[r]*n[r];return s}function wo(n,t,e){if(0===t)return[];if(1===t)return[n];const s=new Array(t);for(let r=0;r<s.length-1;++r)s[r]=Math.floor(n/e[r]),n-=s[r]*e[r];return s[s.length-1]=n,s}function hr(n){return n&&n.then&&"function"==typeof n.then}const mb="tfjsflags";class gb{constructor(t){this.global=t,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=lT,this.populateURLFlags()}setPlatform(t,e){null!=this.platform&&(B().getBool("IS_TEST")||B().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${t}.`)),this.platformName=t,this.platform=e}registerFlag(t,e,s){if(this.flagRegistry[t]={evaluationFn:e,setHook:s},null!=this.urlFlags[t]){const r=this.urlFlags[t];B().getBool("IS_TEST")||B().getBool("PROD")||console.warn(`Setting feature override from URL ${t}: ${r}.`),this.set(t,r)}}getAsync(t){var e=this;return(0,O.Z)(function*(){return t in e.flags||(e.flags[t]=yield e.evaluateFlag(t)),e.flags[t]})()}get(t){if(t in this.flags)return this.flags[t];const e=this.evaluateFlag(t);if(hr(e))throw new Error(`Flag ${t} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[t]=e,this.flags[t]}getNumber(t){return this.get(t)}getBool(t){return this.get(t)}getString(t){return this.get(t)}getFlags(){return this.flags}get features(){return this.flags}set(t,e){if(null==this.flagRegistry[t])throw new Error(`Cannot set flag ${t} as it has not been registered.`);this.flags[t]=e,null!=this.flagRegistry[t].setHook&&this.flagRegistry[t].setHook(e)}evaluateFlag(t){if(null==this.flagRegistry[t])throw new Error(`Cannot evaluate flag '${t}': no evaluation function found.`);return this.flagRegistry[t].evaluationFn()}setFlags(t){this.flags=Object.assign({},t)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(typeof this.global>"u"||typeof this.global.location>"u"||typeof this.global.location.search>"u")return;const t=this.getQueryParams(this.global.location.search);mb in t&&t[mb].split(",").forEach(s=>{const[r,o]=s.split(":");this.urlFlags[r]=function cT(n,t){const e=t.toLowerCase();return"true"===e||"false"===e?"true"===e:""+ +e===e?+e:t}(0,o)})}}function lT(n){const t={};return n.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(e,...s)=>(function uT(n,t,e){n[decodeURIComponent(t)]=decodeURIComponent(e||"")}(t,s[0],s[1]),s.join("="))),t}function B(){return nf}let sf,nf=null;function yb(){if(null==sf){let n;if(typeof window<"u")n=window;else if(typeof global<"u")n=global;else if(typeof process<"u")n=process;else{if(!(typeof self<"u"))throw new Error("Could not find a global object");n=self}sf=n}return sf}function rf(n,t){const e=function dT(){const n=yb();return null==n._tfGlobals&&(n._tfGlobals=new Map),n._tfGlobals}();if(e.has(n))return e.get(n);{const s=t();return e.set(n,s),e.get(n)}}const Xi="Abs",ha="Acos",da="Acosh",vo="Add",Zi="AddN",Cc="All",Nc="Any",Yi="ArgMax",Qi="ArgMin",pa="Asin",fa="Asinh",ma="Atan",ga="Atanh",ya="Atan2",Ji="AvgPool",Ic="AvgPoolGrad",el="AvgPool3D",kc="AvgPool3DGrad",tl="BatchMatMul",nl="BatchToSpaceND",Tc="Bincount",sl="BitwiseAnd",xb="BroadcastTo",$c="BroadcastArgs",xa="Cast",ba="Ceil",wa="ClipByValue",Ec="Complex",rl="ComplexAbs",ol="Concat",al="Conv2D",_c="Conv2DBackpropFilter",il="Conv2DBackpropInput",ll="Conv3D",Ac="Conv3DBackpropFilterV2",Rc="Conv3DBackpropInputV2",va="Cos",Sa="Cosh",Dc="Cumprod",ul="Cumsum",Fc="CropAndResize",Oc="DenseBincount",Lc="DepthToSpace",cl="DepthwiseConv2dNative",Pc="DepthwiseConv2dNativeBackpropFilter",Mc="DepthwiseConv2dNativeBackpropInput",zc="Diag",hl="Dilation2D",Bc="Dilation2DBackpropInput",Vc="Dilation2DBackpropFilter",Wc="Draw",Ca="RealDiv",Uc="Einsum",Na="Elu",Gc="EluGrad",Ia="Erf",dl="Equal",ka="Exp",pl="ExpandDims",Ta="Expm1",Hc="FFT",jc="Fill",Kc="FlipLeftRight",$a="Floor",Ea="FloorDiv",fl="FusedBatchNorm",ml="GatherV2",qc="GatherNd",gl="Greater",_a="GreaterEqual",Aa="Identity",Xc="IFFT",Zc="Imag",Ra="IsFinite",Da="IsInf",Fa="IsNan",yl="LeakyRelu",xl="Less",bl="LessEqual",Yc="LinSpace",Oa="Log",La="Log1p",wl="LogicalAnd",vl="LogicalNot",Sl="LogicalOr",pT="LogicalXor",bb="LogSoftmax",fT="LowerBound",Cl="LRN",Qc="LRNGrad",mT="MatrixBandPart",Nl="Max",Pa="Maximum",Il="MaxPool",Jc="MaxPoolGrad",kl="MaxPool3D",eh="MaxPool3DGrad",th="MaxPoolWithArgmax",Tl="Mean",$l="Min",Ma="Minimum",El="MirrorPad",za="Mod",nh="Multinomial",Ba="Multiply",_l="Neg",Al="NotEqual",sh="NonMaxSuppressionV3",rh="NonMaxSuppressionV4",oh="NonMaxSuppressionV5",Rl="OnesLike",Dl="OneHot",Fl="Pack",Ol="PadV2",gT="Pool",Va="Pow",Ll="Prelu",Pl="Prod",ah="RaggedGather",ih="RaggedRange",lh="RaggedTensorToTensor",uh="Range",ch="Real",Wa="Reciprocal",Ua="Relu",Ml="Reshape",zl="ResizeNearestNeighbor",hh="ResizeNearestNeighborGrad",Bl="ResizeBilinear",dh="ResizeBilinearGrad",Ga="Relu6",Vl="Reverse",Ha="Round",ja="Rsqrt",ph="ScatterNd",fh="TensorScatterUpdate",mh="SearchSorted",Wl="Select",Ka="Selu",Ul="Slice",qa="Sin",Xa="Sinh",Za="Sign",Ya="Sigmoid",Qa="Softplus",Ja="Sqrt",Gl="Sum",Hl="SpaceToBatchND",jl="SplitV",Kl="Softmax",gh="SparseFillEmptyRows",yh="SparseReshape",xh="SparseSegmentMean",bh="SparseSegmentSum",wh="SparseToDense",ei="SquaredDifference",vh="Square",ql="StaticRegexReplace",Sh="StridedSlice",Ch="StringNGrams",Nh="StringSplit",Ih="StringToHashBucketFast",ti="Sub",ni="Tan",si="Tanh",ri="Tile",kh="TopK",Th="Transform",So="Transpose",$h="Unique",Xl="Unpack",Zl="UnsortedSegmentSum",yT="UpperBound",Yl="ZerosLike",oi="Step",Eh="FromPixels",_h="RotateWithOffset",Ql="_FusedMatMul",Jl="FusedConv2D",eu="FusedDepthwiseConv2D";function as(...n){B().getBool("IS_TEST")||B().getBool("PROD")||console.warn(...n)}function xT(...n){B().getBool("IS_TEST")||B().getBool("PROD")||console.log(...n)}const ai=rf("kernelRegistry",()=>new Map),tu=rf("gradRegistry",()=>new Map);function nu(n,t){const e=af(n,t);return ai.get(e)}function of(n){return tu.get(n)}function Ah(n){const t=ai.entries(),e=[];for(;;){const{done:s,value:r}=t.next();if(s)break;const[o,a]=r,[i]=o.split("_");i===n&&e.push(a)}return e}function Rh(n){const{kernelName:t,backendName:e}=n,s=af(t,e);ai.has(s)&&as(`The kernel '${t}' for backend '${e}' is already registered`),ai.set(s,n)}function wb(n){const{kernelName:t}=n;tu.has(t)&&B().getBool("DEBUG")&&as(`Overriding the gradient for '${t}'`),tu.set(t,n)}function bT(n,t){const e=af(n,t);if(!ai.has(e))throw new Error(`The kernel '${n}' for backend '${t}' is not registered`);ai.delete(e)}function wT(n){if(!tu.has(n))throw new Error(`The gradient '${n}' for backend is not registered`);tu.delete(n)}function vT(n,t){Ah(n).forEach(s=>{Rh(Object.assign({},s,{backendName:t}))})}function af(n,t){return`${t}_${n}`}function vb(n){return n instanceof Float32Array||n instanceof Int32Array||n instanceof Uint8Array||n instanceof Uint8ClampedArray}var Sb=P(186);const Co=P.n(Sb)()||Sb;function su(n){return Co.fromString(n,!0,16)}const Cb=su("c3a5c85c97cb3127"),No=su("b492b66fbe98f273"),En=su("9ae16a3b2f90404f");function lf(n){return n.xor(n.shru(47))}function Nb(n,t,e){const s=n.slice(t,t+e);return Co.fromBytes(Array.from(s),!0,!0)}function vt(n,t){return Nb(n,t,8)}function Ib(n,t){return Nb(n,t,4)}function an(n,t){return 0===t?n:n.shru(t).or(n.shl(64-t))}function Lr(n,t,e=su("9ddfea08eb382d69")){let s=n.xor(t).mul(e);s=s.xor(s.shru(47));let r=t.xor(s).mul(e);return r=r.xor(r.shru(47)),r=r.mul(e),r}function Dh(n,t,e,s){return function CT(n,t,e,s,r,o){r=r.add(n),o=an(o.add(r).add(s),21);const a=r;return r=(r=r.add(t)).add(e),o=o.add(an(r,44)),[r.add(s),o.add(a)]}(vt(n,t),vt(n,t+8),vt(n,t+16),vt(n,t+24),e,s)}function kb(n,t=n.length){const e=Co.fromNumber(81,!0);if(t<=32)return t<=16?function NT(n,t=n.length){if(t>=8){const e=En.add(2*t),s=vt(n,0).add(En),r=vt(n,t-8);return Lr(an(r,37).mul(e).add(s),an(s,25).add(r).mul(e),e)}if(t>=4){const e=En.add(2*t);return Lr(Ib(n,0).shl(3).add(t),Ib(n,t-4),e)}if(t>0){const a=t+(n[t-1]<<2);return lf(En.mul(n[0]+(n[t>>1]<<8)).xor(Cb.mul(a))).mul(En)}return En}(n,t):function IT(n,t=n.length){const e=En.add(2*t),s=vt(n,0).mul(No),r=vt(n,8),o=vt(n,t-8).mul(e),a=vt(n,t-16).mul(En);return Lr(an(s.add(r),43).add(an(o,30)).add(a),s.add(an(r.add(En),18)).add(o),e)}(n,t);if(t<=64)return function kT(n,t=n.length){const e=En.add(2*t),s=vt(n,0).mul(En),r=vt(n,8),o=vt(n,t-8).mul(e),a=vt(n,t-16).mul(En),i=an(s.add(r),43).add(an(o,30)).add(a),l=Lr(i,s.add(an(r.add(En),18)).add(o),e),u=vt(n,16).mul(e),c=vt(n,24),h=i.add(vt(n,t-32)).mul(e),d=l.add(vt(n,t-24)).mul(e);return Lr(an(u.add(c),43).add(an(h,30)).add(d),u.add(an(c.add(s),18)).add(h),e)}(n,t);let s=e,r=e.mul(No).add(113),o=lf(r.mul(En).add(113)).mul(En),a=[Co.UZERO,Co.UZERO],i=[Co.UZERO,Co.UZERO];s=s.mul(En).add(vt(n,0));let l=0;const u=64*(t-1>>6),c=u+(t-1&63)-63;do{s=an(s.add(r).add(a[0]).add(vt(n,l+8)),37).mul(No),r=an(r.add(a[1]).add(vt(n,l+48)),42).mul(No),s=s.xor(i[1]),r=r.add(a[0]).add(vt(n,l+40)),o=an(o.add(i[0]),33).mul(No),a=Dh(n,l,a[1].mul(No),s.add(i[0])),i=Dh(n,l+32,o.add(i[1]),r.add(vt(n,l+16))),[o,s]=[s,o],l+=64}while(l!==u);const h=No.add(o.and(255).shl(1));return l=c,i[0]=i[0].add(t-1&63),a[0]=a[0].add(i[0]),i[0]=i[0].add(a[0]),s=an(s.add(r).add(a[0]).add(vt(n,l+8)),37).mul(h),r=an(r.add(a[1]).add(vt(n,l+48)),42).mul(h),s=s.xor(i[1].mul(9)),r=r.add(a[0].mul(9).add(vt(n,l+40))),o=an(o.add(i[0]),33).mul(h),a=Dh(n,l,a[1].mul(h),s.add(i[0])),i=Dh(n,l+32,o.add(i[1]),r.add(vt(n,l+16))),[o,s]=[s,o],Lr(Lr(a[0],i[0],h).add(lf(r).mul(Cb)).add(o),Lr(a[1],i[1],h).add(s),h)}function dr(n,t){return"string"===t?js(n):Pr([n],t)}function Pr(n,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(n)&&(n=Ks(n)),B().getBool("DEBUG")&&ub(n,t),function TT(n,t){return n instanceof Float32Array&&"float32"===t||n instanceof Int32Array&&"int32"===t||n instanceof Uint8Array&&"bool"===t}(n,t))return n;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(n);if("int32"===t)return new Int32Array(n);if("bool"===t){const e=new Uint8Array(n.length);for(let s=0;s<e.length;++s)0!==Math.round(n[s])&&(e[s]=1);return e}throw new Error(`Unknown data type ${t}`)}function gn(){return B().platform.now()}function Tb(n,t){return B().platform.fetch(n,t)}function js(n,t="utf-8"){return t=t||"utf-8",B().platform.encode(n,t)}function pr(n,t="utf-8"){return t=t||"utf-8",B().platform.decode(n,t)}function Jt(n){return null!=B().platform.isTypedArray?B().platform.isTypedArray(n):vb(n)}function Ks(n,t=[],e=!1){if(null==t&&(t=[]),"boolean"==typeof n||"number"==typeof n||"string"==typeof n||hr(n)||null==n||Jt(n)&&e)t.push(n);else if(Array.isArray(n)||Jt(n))for(let s=0;s<n.length;++s)Ks(n[s],t,e);else{let s=-1;for(const r of Object.keys(n))/^([1-9]+[0-9]*|0)$/.test(r)&&(s=Math.max(s,Number(r)));for(let r=0;r<=s;r++)Ks(n[r],t,e)}return t}class $T{constructor(t,e){this.backendTimer=t,this.logger=e,null==e&&(this.logger=new _T)}profileKernel(t,e,s){let r;const o=()=>{r=s()};let a;const i=gn();if(this.backendTimer.timerAvailable())a=this.backendTimer.time(o);else{o();for(const u of r)u.dataSync();a=Promise.resolve({kernelMs:gn()-i})}if(B().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let u=0;u<r.length;u++){const c=r[u];c.data().then(h=>{ET(h,c.dtype,t)})}return{kernelName:t,outputs:r,inputs:e,timeMs:a.then(u=>u.kernelMs),extraInfo:a.then(u=>null!=u.getExtraProfileInfo?u.getExtraProfileInfo():"")}}logKernelProfile(t){const{kernelName:e,outputs:s,timeMs:r,inputs:o,extraInfo:a}=t;s.forEach(i=>{Promise.all([i.data(),r,a]).then(l=>{this.logger.logKernelProfile(e,i,l[0],l[1],o,l[2])})})}}function ET(n,t,e){if("float32"!==t)return!1;for(let s=0;s<n.length;s++){const r=n[s];if(isNaN(r)||!isFinite(r))return console.warn(`Found ${r} in the result of '${e}'`),!0}return!1}class _T{logKernelProfile(t,e,s,r,o,a){const i="number"==typeof r?xo(`${r}ms`,9):r.error,l=xo(t,25),u=e.rank,c=e.size,h=xo(e.shape.toString(),14);let d="";for(const p in o){const f=o[p];if(null!=f){const g=f.shape||e.shape,m=g.length;d+=`${p}: ${m}D ${m>0?g:""} `}}console.log(`%c${l}\t%c${i}\t%c${u}D ${h}\t%c${c}\t%c${d}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}const $b=20,ru=3,uf=7;function DT(n,t,e,s){const r=Ae(t),o=function FT(n,t,e,s){const r=q(t),o=s[s.length-1],a=new Array(o).fill(0),i=t.length,l="complex64"===e?au(n):n;if(i>1)for(let u=0;u<r/o;u++){const c=u*o;for(let h=0;h<o;h++)a[h]=Math.max(a[h],ou(l[c+h],0,e).length)}return a}(n,t,e,r),a=t.length,i=Fh(n,t,e,r,o),l=["Tensor"];return s&&(l.push(`  dtype: ${e}`),l.push(`  rank: ${a}`),l.push(`  shape: [${t}]`),l.push("  values:")),l.push(i.map(u=>"    "+u).join("\n")),l.join("\n")}function ou(n,t,e){let s;return s=Array.isArray(n)?`${parseFloat(n[0].toFixed(uf))} + ${parseFloat(n[1].toFixed(uf))}j`:Hs(n)?`'${n}'`:"bool"===e?Eb(n):parseFloat(n.toFixed(uf)).toString(),xo(s,t)}function Eb(n){return 0===n?"false":"true"}function Fh(n,t,e,s,r,o=!0){const a="complex64"===e?2:1,i=t[0],l=t.length;if(0===l)return"complex64"===e?[ou(au(n)[0],0,e)]:"bool"===e?[Eb(n[0])]:[n[0].toString()];if(1===l){if(i>$b){let y=Array.from(n.slice(0,ru*a)),x=Array.from(n.slice((i-ru)*a,i*a));return"complex64"===e&&(y=au(y),x=au(x)),["["+y.map((b,w)=>ou(b,r[w],e)).join(", ")+", ..., "+x.map((b,w)=>ou(b,r[i-ru+w],e)).join(", ")+"]"]}return["["+("complex64"===e?au(n):Array.from(n)).map((m,y)=>ou(m,r[y],e)).join(", ")+"]"]}const u=t.slice(1),c=s.slice(1),h=s[0]*a,d=[];if(i>$b){for(let g=0;g<ru;g++){const m=g*h;d.push(...Fh(n.slice(m,m+h),u,e,c,r,!1))}d.push("...");for(let g=i-ru;g<i;g++){const m=g*h;d.push(...Fh(n.slice(m,m+h),u,e,c,r,g===i-1))}}else for(let g=0;g<i;g++){const m=g*h;d.push(...Fh(n.slice(m,m+h),u,e,c,r,g===i-1))}const p=2===l?",":"";d[0]="["+(i>0?d[0]+p:"");for(let g=1;g<d.length-1;g++)d[g]=" "+d[g]+p;let f=",\n";for(let g=2;g<l;g++)f+="\n";return d[d.length-1]=" "+d[d.length-1]+"]"+(o?"":f),d}function au(n){const t=[];for(let e=0;e<n.length;e+=2)t.push([n[e],n[e+1]]);return t}class Ht{constructor(t,e,s){if(this.dtype=e,this.shape=t.slice(),this.size=q(t),null!=s){const r=s.length;C(r===this.size,()=>`Length of values '${r}' does not match the size inferred by the shape '${this.size}'.`)}if("complex64"===e)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=s||Ot(e,this.size),this.strides=Ae(t)}set(t,...e){0===e.length&&(e=[0]),C(e.length===this.rank,()=>`The number of provided coordinates (${e.length}) must match the rank (${this.rank})`);const s=this.locToIndex(e);this.values[s]=t}get(...t){0===t.length&&(t=[0]);let e=0;for(const r of t){if(r<0||r>=this.shape[e])throw new Error(`Requested out of range element at ${t}.   Buffer shape=${this.shape}`);e++}let s=t[t.length-1];for(let r=0;r<t.length-1;++r)s+=this.strides[r]*t[r];return this.values[s]}locToIndex(t){if(0===this.rank)return 0;if(1===this.rank)return t[0];let e=t[t.length-1];for(let s=0;s<t.length-1;++s)e+=this.strides[s]*t[s];return e}indexToLoc(t){if(0===this.rank)return[];if(1===this.rank)return[t];const e=new Array(this.shape.length);for(let s=0;s<e.length-1;++s)e[s]=Math.floor(t/this.strides[s]),t-=e[s]*this.strides[s];return e[e.length-1]=t,e}get rank(){return this.shape.length}toTensor(){return $s().makeTensor(this.values,this.shape,this.dtype)}}let $s=null,ii=null,_b=null;class rt{constructor(t,e,s,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=t.slice(),this.dtype=e||"float32",this.size=q(t),this.strides=Ae(t),this.dataId=s,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}buffer(){var t=this;return(0,O.Z)(function*(){const e=yield t.data();return ii.buffer(t.shape,t.dtype,e)})()}bufferSync(){return ii.buffer(this.shape,this.dtype,this.dataSync())}array(){var t=this;return(0,O.Z)(function*(){const e=yield t.data();return os(t.shape,e,"complex64"===t.dtype)})()}arraySync(){return os(this.shape,this.dataSync(),"complex64"===this.dtype)}data(){var t=this;return(0,O.Z)(function*(){t.throwIfDisposed();const e=$s().read(t.dataId);if("string"===t.dtype){const s=yield e;try{return s.map(r=>pr(r))}catch{throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e})()}dataToGPU(t){return this.throwIfDisposed(),$s().readToGPU(this.dataId,t)}dataSync(){this.throwIfDisposed();const t=$s().readSync(this.dataId);if("string"===this.dtype)try{return t.map(e=>pr(e))}catch{throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return t}bytes(){var t=this;return(0,O.Z)(function*(){t.throwIfDisposed();const e=yield $s().read(t.dataId);return"string"===t.dtype?e:new Uint8Array(e.buffer)})()}dispose(){this.isDisposed||(this.kerasMask&&this.kerasMask.dispose(),$s().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(t=!1){return ii.print(this,t)}clone(){return this.throwIfDisposed(),ii.clone(this)}toString(t=!1){return DT(this.dataSync(),this.shape,this.dtype,t)}cast(t){return this.throwIfDisposed(),ii.cast(this,t)}variable(t=!0,e,s){return this.throwIfDisposed(),$s().makeVariable(this,t,e,s)}}function Z(){return rf("Tensor",()=>rt)}Object.defineProperty(rt,Symbol.hasInstance,{value:n=>!!n&&null!=n.data&&null!=n.dataSync&&null!=n.throwIfDisposed}),Z();class iu extends rt{constructor(t,e,s,r){super(t.shape,t.dtype,t.dataId,r),this.trainable=e,this.name=s}assign(t){if(t.dtype!==this.dtype)throw new Error(`dtype of the new value (${t.dtype}) and previous value (${this.dtype}) must match`);if(!Ye(t.shape,this.shape))throw new Error(`shape of the new value (${t.shape}) and previous value (${this.shape}) must match`);$s().disposeTensor(this),this.dataId=t.dataId,$s().incRef(this,null)}dispose(){$s().disposeVariable(this),this.isDisposedInternal=!0}}Object.defineProperty(iu,Symbol.hasInstance,{value:n=>n instanceof rt&&null!=n.assign&&n.assign instanceof Function});var Ab=function(n){return n.R0="R0",n.R1="R1",n.R2="R2",n.R3="R3",n.R4="R4",n.R5="R5",n.R6="R6",n}(Ab||{}),Rb=function(n){return n.float32="float32",n.int32="int32",n.bool="int32",n.complex64="complex64",n}(Rb||{}),Db=function(n){return n.float32="float32",n.int32="int32",n.bool="bool",n.complex64="complex64",n}(Db||{}),Fb=function(n){return n.float32="float32",n.int32="float32",n.bool="float32",n.complex64="complex64",n}(Fb||{}),Ob=function(n){return n.float32="complex64",n.int32="complex64",n.bool="complex64",n.complex64="complex64",n}(Ob||{});const MT={float32:Fb,int32:Rb,bool:Db,complex64:Ob};function Pn(n,t){if("string"===n||"string"===t){if("string"===n&&"string"===t)return"string";throw new Error(`Can not upcast ${n} with ${t}`)}return MT[n][t]}function Oh(n){return Pn(n,"int32")}function Lb(n){return null!=n&&"object"==typeof n&&"texture"in n&&n.texture instanceof WebGLTexture}function Pb(n){return typeof GPUBuffer<"u"&&null!=n&&"object"==typeof n&&"buffer"in n&&n.buffer instanceof GPUBuffer}function $t(n,t){if(n.dtype===t.dtype)return[n,t];const e=Pn(n.dtype,t.dtype);return[n.cast(e),t.cast(e)]}function Mb(n,t){C(n.dtype===t.dtype,()=>`The dtypes of the first(${n.dtype}) and second(${t.dtype}) input must match`)}function Lh(n,t){return t.some(e=>e.id===n.id)}function fr(n){const t=[];return zb(n,t,new Set),t}function zb(n,t,e){if(null==n)return;if(n instanceof rt)return void t.push(n);if(!function zT(n){return Array.isArray(n)||"object"==typeof n}(n))return;const s=n;for(const r in s){const o=s[r];e.has(o)||(e.add(o),zb(o,t,e))}}function cf(n){return null!=n.kernelName}class Bb{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map(t=>t.name)))}}}dispose(){for(const t in this.registeredVariables)this.registeredVariables[t].dispose()}}let BT=(()=>{class n{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new Bb}ready(){var e=this;return(0,O.Z)(function*(){if(null!=e.pendingBackendInit)return e.pendingBackendInit.then(()=>{});if(null!=e.backendInstance)return;const s=e.getSortedBackends();for(let r=0;r<s.length;r++){const o=s[r];if(yield e.initializeBackend(o).success)return void(yield e.setBackend(o))}throw new Error("Could not initialize any backends, all backend initializations failed.")})()}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:s}=this.initializeBackendsAndReturnBest();if(s)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:s}=this.initializeBackend(e);if(s)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,s,r=1){return e in this.registryFactory?(as(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:s,priority:r},!0)}setBackend(e){var s=this;return(0,O.Z)(function*(){if(null==s.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(s.backendName=e,null==s.registry[e]){s.backendInstance=null;const{success:r,asyncInit:o}=s.initializeBackend(e);if(!(o?yield r:r))return!1}return s.backendInstance=s.registry[e],s.setupRegisteredKernels(),s.profiler=new $T(s.backendInstance),!0})()}setupRegisteredKernels(){Ah(this.backendName).forEach(s=>{null!=s.setupFunc&&s.setupFunc(this.backendInstance)})}disposeRegisteredKernels(e){Ah(e).forEach(r=>{null!=r.disposeFunc&&r.disposeFunc(this.registry[e])})}initializeBackend(e){const s=this.registryFactory[e];if(null==s)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const r=s.factory();if(!r||r instanceof yc||"function"!=typeof r.then)return this.registry[e]=r,{success:!0,asyncInit:!1};{const o=++this.pendingBackendInitId,a=r.then(i=>!(o<this.pendingBackendInitId||(this.registry[e]=i,this.pendingBackendInit=null,0))).catch(i=>(o<this.pendingBackendInitId||(this.pendingBackendInit=null,as(`Initialization of backend ${e} failed`),as(i.stack||i.message)),!1));return this.pendingBackendInit=a,{success:a,asyncInit:!0}}}catch(r){return as(`Initialization of backend ${e} failed`),as(r.stack||r.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((e,s)=>this.registryFactory[s].priority-this.registryFactory[e].priority)}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let s=0;s<e.length;s++){const r=e[s],{success:o,asyncInit:a}=this.initializeBackend(r);if(a||o)return{name:r,asyncInit:a}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,s){const r=this.state.tensorInfo.get(s),o=r.backend,a=this.readSync(s),i=o.refCount(s);o.disposeData(s,!0),r.backend=e,e.move(s,a,r.shape,r.dtype,i),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,s){let o,r=null;if(null==s){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");s=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof s)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=e}return this.scopedRun(()=>this.startScope(r),()=>this.endScope(o),()=>(o=s(),o instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),o))}scopedRun(e,s,r){e();try{const o=r();return s(),o}catch(o){throw s(),o}}nextTensorId(){return n.nextTensorId++}nextVariableId(){return n.nextVariableId++}clone(e){const s=E.runKernel(Aa,{x:e});return this.addTapeNode(this.state.activeScope.name,{x:e},[s],i=>({x:()=>E.runKernel(xa,{x:i},{dtype:"float32"})}),[],{}),s}runKernel(e,s,r){if(null==nu(e,this.backendName))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:s,attrs:r})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,s,r){const o=this.backend.numDataIds();let a=0;r.forEach(u=>{a+="complex64"===u.dtype?3:1});const l=o-s-a-this.state.numDataMovesStack[this.state.numDataMovesStack.length-1];if(l>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${l} data ids) after running '${e}'`)}runKernelFunc(e){let s,r=[];const o=this.isTapeOn(),a=this.state.numBytes,i=this.state.numTensors;let l,u;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);const c=cf(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(cf(e)){const{kernelName:g,inputs:m,attrs:y}=e,x=nu(g,this.backendName);C(null!=x,()=>`Cannot find registered kernel '${g}' for backend '${this.backendName}'`),l=()=>{const b=this.backend.numDataIds();u=x.kernelFunc({inputs:m,attrs:y,backend:this.backend});const w=Array.isArray(u)?u:[u];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(g,b,w);const S=w.map(N=>null!=N.rank?N:this.makeTensorFromTensorInfo(N));if(o){const N=this.getTensorsForGradient(g,m,S);r=this.saveTensorsForBackwardMode(N)}return S}}else{const{forwardFunc:g}=e,m=y=>{o&&(r=y.map(x=>this.keep(this.clone(x))))};l=()=>{const y=this.backend.numDataIds();u=this.tidy(()=>g(this.backend,m));const x=Array.isArray(u)?u:[u];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(c,y,x),x}}const{inputs:h,attrs:d}=e,p=cf(e)?null:e.backwardsFunc;let f;return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(f=this.profiler.profileKernel(c,h,()=>l()),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(f),s=f.outputs):s=l()}),o&&this.addTapeNode(c,h,s,p,r,d),this.state.profiling&&this.state.activeProfile.kernels.push({name:c,bytesAdded:this.state.numBytes-a,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-i,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(h).map(g=>null!=h[g]?h[g].shape:null),outputShapes:s.map(g=>g.shape),kernelTimeMs:f.timeMs,extraInfo:f.extraInfo}),Array.isArray(u)?s:s[0]}saveTensorsForBackwardMode(e){return e.map(r=>this.keep(this.clone(r)))}getTensorsForGradient(e,s,r){const o=of(e);if(null!=o){const a=o.inputsToSave||[],i=o.outputsToSave||[];let l;o.saveAllInputs?(C(Array.isArray(s),()=>"saveAllInputs is true, expected inputs to be an array."),l=Object.keys(s).map(c=>s[c])):l=a.map(c=>s[c]);const u=r.filter((c,h)=>i[h]);return l.concat(u)}return[]}makeTensor(e,s,r,o){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");o=o||this.backend;let a=e;"string"===(r=r||"float32")&&Hs(e[0])&&(a=e.map(u=>js(u)));const i=o.write(a,s,r),l=new rt(s,r,i,this.nextTensorId());if(this.trackTensor(l,o),"string"===r){const u=this.state.tensorInfo.get(i),c=hb(a);this.state.numBytes+=c-u.bytes,u.bytes=c}return l}makeTensorFromDataId(e,s,r,o){return this.makeTensorFromTensorInfo({dataId:e,shape:s,dtype:r=r||"float32"},o)}makeTensorFromTensorInfo(e,s){const{dataId:r,shape:o,dtype:a}=e,i=new rt(o,a,r,this.nextTensorId());return this.trackTensor(i,s),i}makeVariable(e,s=!0,r,o){r=r||this.nextVariableId().toString(),null!=o&&o!==e.dtype&&(e=e.cast(o));const a=new iu(e,s,r,this.nextTensorId());if(null!=this.state.registeredVariables[a.name])throw new Error(`Variable with name ${a.name} was already registered`);return this.state.registeredVariables[a.name]=a,this.incRef(a,this.backend),a}trackTensor(e,s){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let r=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(r=e.size*qi(e.dtype)),this.state.numBytes+=r,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:s||this.backend,dtype:e.dtype,shape:e.shape,bytes:r})),e instanceof iu||this.track(e)}incRef(e,s){this.trackTensor(e,s),this.backend.incRef(e.dataId)}removeDataId(e,s){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===s&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const s=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=s.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const r=e.size*qi(e.dtype);this.state.numBytes-=r}s.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,s.backend)}disposeVariables(){for(const e in this.state.registeredVariables)this.disposeVariable(this.state.registeredVariables[e])}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}profile(e){var s=this;return(0,O.Z)(function*(){s.state.profiling=!0;const r=s.state.numBytes,o=s.state.numTensors;s.state.activeProfile.kernels=[],s.state.activeProfile.result=yield e(),s.state.profiling=!1,s.state.activeProfile.peakBytes=Math.max(...s.state.activeProfile.kernels.map(a=>a.totalBytesSnapshot)),s.state.activeProfile.newBytes=s.state.numBytes-r,s.state.activeProfile.newTensors=s.state.numTensors-o;for(const a of s.state.activeProfile.kernels)a.kernelTimeMs=yield a.kernelTimeMs,a.extraInfo=yield a.extraInfo;return s.state.activeProfile})()}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,s,r,o,a,i){const l={id:this.state.nextTapeNodeId++,kernelName:e,inputs:s,outputs:r,saved:a},u=of(e);null!=u&&(o=u.gradFunc),null!=o&&(l.gradient=c=>(c=c.map((h,d)=>{if(null==h){const p=r[d],f=mn(p.size,p.dtype);return this.makeTensor(f,p.shape,p.dtype)}return h}),o(c.length>1?c:c[0],a,i))),this.state.activeTape.push(l)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const s={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(s.name=e),this.state.scopeStack.push(s),this.state.activeScope=s}endScope(e){const s=fr(e),r=new Set(s.map(a=>a.id));for(let a=0;a<this.state.activeScope.track.length;a++){const i=this.state.activeScope.track[a];!i.kept&&!r.has(i.id)&&i.dispose()}const o=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],s.forEach(a=>{!a.kept&&a.scopeId===o.id&&this.track(a)})}gradients(e,s,r,o=!1){if(C(s.length>0,()=>"gradients() received an empty list of xs."),null!=r&&"float32"!==r.dtype)throw new Error(`dy must have 'float32' dtype, but has '${r.dtype}'`);const a=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",e));C(a instanceof rt,()=>"The result y returned by f() must be a tensor.");const i=function AT(n,t,e){const s={},r={};for(let l=0;l<t.length;l++)s[t[l].id]=!0;for(let l=0;l<n.length;l++){const u=n[l],c=u.inputs;for(const h in c){const d=c[h];let p=!1;for(let f=0;f<t.length;f++)if(s[d.id]){u.outputs.forEach(g=>s[g.id]=!0),p=!0,r[u.id]=!0;break}if(p)break}}const o={};o[e.id]=!0;const a={};for(let l=n.length-1;l>=0;l--){const u=n[l],c=u.inputs;for(let h=0;h<u.outputs.length;h++)if(o[u.outputs[h].id]){for(const d in c)o[c[d].id]=!0,a[u.id]=!0;break}}const i=[];for(let l=0;l<n.length;l++){const u=n[l];if(r[u.id]&&a[u.id]){const c={};for(const d in u.inputs){const p=u.inputs[d];s[p.id]&&(c[d]=p)}const h=Object.assign({},u);h.inputs=c,h.outputs=u.outputs,i.push(h)}}return i}(this.state.activeTape,s,a);if(!o&&0===i.length&&s.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{const l={};l[a.id]=r??function VT(n){const t=Sc(q(n),"float32");return E.makeTensor(t,n,"float32")}(a.shape),function RT(n,t,e,s){for(let r=t.length-1;r>=0;r--){const o=t[r],a=[];if(o.outputs.forEach(l=>{const u=n[l.id];a.push(null!=u?u:null)}),null==o.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${o.kernelName}.`);const i=o.gradient(a);for(const l in o.inputs){if(!(l in i))throw new Error(`Cannot backprop through input ${l}. Available gradients found: ${Object.keys(i)}.`);const u=e(()=>i[l]());if("float32"!==u.dtype)throw new Error(`Error in gradient for op ${o.kernelName}. The gradient of input ${l} must have 'float32' dtype, but has '${u.dtype}'`);const c=o.inputs[l];if(!Ye(u.shape,c.shape))throw new Error(`Error in gradient for op ${o.kernelName}. The gradient of input '${l}' has shape '${u.shape}', which does not match the shape of the input '${c.shape}'`);if(null==n[c.id])n[c.id]=u;else{const h=n[c.id];n[c.id]=s(h,u),h.dispose()}}}}(l,i,c=>this.tidy(c),WT);const u=s.map(c=>l[c.id]);return 0===this.state.gradientDepth&&(this.state.activeTape.forEach(c=>{for(const h of c.saved)h.dispose()}),this.state.activeTape=null),{value:a,grads:u}})}customGrad(e){return C(Or(e),()=>"The f passed in customGrad(f) must be a function."),(...s)=>{let r;C(s.every(l=>l instanceof rt),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");const o={};return s.forEach((l,u)=>{o[u]=l}),this.runKernelFunc({forwardFunc:(l,u)=>(r=e(...s,u),C(r.value instanceof rt,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),C(Or(r.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),r.value),backwardsFunc:(l,u)=>{const c=r.gradFunc(l,u),h=Array.isArray(c)?c:[c];C(h.length===s.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),C(h.every(p=>p instanceof rt),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");const d={};return h.forEach((p,f)=>{d[f]=()=>p}),d},inputs:o})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,s){return this.state.tensorInfo.get(e).backend.readToGPU(e,s)}time(e){var s=this;return(0,O.Z)(function*(){const r=gn(),o=yield s.backend.time(e);return o.wallMs=gn()-r,o})()}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new Bb;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}return n.nextTensorId=0,n.nextVariableId=0,n})();function Vb(){const n=yb();if(null==n._tfengine){const t=new gb(n);n._tfengine=new BT(t)}return function hT(n){nf=n}(n._tfengine.ENV),function OT(n){$s=n}(()=>n._tfengine),n._tfengine}const E=Vb();function WT(n,t){return E.runKernel(vo,{a:n,b:t})}let hf;function GT(n){hf=n}function df(n){if(void 0!==hf)return hf;if(n||function UT(){return typeof navigator<"u"&&null!=navigator}()){if(n||(n=navigator),"ReactNative"===n.product)return!0;const t=n.userAgent||n.vendor||(typeof window<"u"?window.opera:"");return t?/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4)):n.userAgentData&&n.userAgentData.mobile}return!1}function pf(){return typeof window<"u"&&null!=window.document||typeof WorkerGlobalScope<"u"}const Mn=B();function qs(n,t){let e=n;if(Jt(n))return"string"===t?[]:[n.length];if(Lb(n))return[n.height,n.width*(n.channels||"RGBA").length];if(Pb(n))return[n.buffer.size/(null==t?4:qi(t))];if(!Array.isArray(n))return[];const s=[];for(;Array.isArray(e)||Jt(e)&&"string"!==t;)s.push(e.length),e=e[0];return Array.isArray(n)&&B().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&Wb(n,s,[]),s}function Wb(n,t,e){if(e=e||[],!Array.isArray(n)&&!Jt(n))return void C(0===t.length,()=>`Element arr[${e.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`);C(t.length>0,()=>`Element arr[${e.join("][")}] should be a primitive, but is an array of ${n.length} elements`),C(n.length===t[0],()=>`Element arr[${e.join("][")}] should have ${t[0]} elements, but has ${n.length} elements`);const s=t.slice(1);for(let r=0;r<n.length;++r)Wb(n[r],s,e.concat(r))}function Ub(n,t,e,s){if("string_or_numeric"!==n){if(null==n)throw new Error("Expected dtype cannot be null.");if("numeric"!==n&&n!==t||"numeric"===n&&"string"===t)throw new Error(`Argument '${e}' passed to '${s}' must be ${n} tensor, but got ${t} tensor`)}}function I(n,t,e,s="numeric"){if(n instanceof Z())return Ub(s,n.dtype,t,e),n;let r=bo(n);if("string"!==r&&["bool","int32","float32"].indexOf(s)>=0&&(r=s),Ub(s,r,t,e),null==n||!Jt(n)&&!Array.isArray(n)&&"number"!=typeof n&&"boolean"!=typeof n&&"string"!=typeof n)throw new Error(`Argument '${t}' passed to '${e}' must be a Tensor or TensorLike, but got '${null==n?"null":n.constructor.name}'`);const o=qs(n,r);!Jt(n)&&!Array.isArray(n)&&(n=[n]);const i="string"!==r?Pr(n,r):Ks(n,[],!0);return E.makeTensor(i,o,r)}function lu(n,t,e,s="numeric"){if(!Array.isArray(n))throw new Error(`Argument ${t} passed to ${e} must be a \`Tensor[]\` or \`TensorLike[]\``);return n.map((o,a)=>I(o,`${t}[${a}]`,e,s))}Mn.registerFlag("DEBUG",()=>!1,n=>{n&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")}),Mn.registerFlag("IS_BROWSER",()=>pf()),Mn.registerFlag("IS_NODE",()=>typeof process<"u"&&typeof process.versions<"u"&&typeof process.versions.node<"u"),Mn.registerFlag("IS_CHROME",()=>typeof navigator<"u"&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)),Mn.registerFlag("IS_SAFARI",()=>typeof navigator<"u"&&null!=navigator&&null!=navigator.userAgent&&/Safari/.test(navigator.userAgent)&&/Apple/.test(navigator.vendor)),Mn.registerFlag("PROD",()=>!1),Mn.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>Mn.getBool("DEBUG")),Mn.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0),Mn.registerFlag("IS_TEST",()=>!1),Mn.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",()=>Mn.getBool("DEBUG")),Mn.registerFlag("WRAP_TO_IMAGEBITMAP",()=>!1),Mn.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",()=>!1),Mn.registerFlag("USE_SETTIMEOUTCUSTOM",()=>!1);const ff="__op";function A(n){const t=Object.keys(n);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let e=t[0];const s=n[e];e.endsWith("_")&&(e=e.substring(0,e.length-1)),e+=ff;const r=(...o)=>{E.startScope(e);try{const a=s(...o);return hr(a)&&console.error("Cannot return a Promise inside of tidy."),E.endScope(a),a}catch(a){throw E.endScope(null),a}};return Object.defineProperty(r,"name",{value:e,configurable:!0}),r}const mr=A({complex_:function HT(n,t){const e=I(n,"real","complex"),s=I(t,"imag","complex");return fn(e.shape,s.shape,`real and imag shapes, ${e.shape} and ${s.shape}, must match in call to tf.complex().`),E.runKernel(Ec,{real:e,imag:s})}});function Mr(n,t,e,s){if(null==s)s=bo(n);else if("complex64"===s)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(Pb(n)||Lb(n)){if("float32"!==s&&"int32"!==s)throw new Error(`Creating tensor from GPU data only supports 'float32'|'int32' dtype, while the dtype is ${s}.`);return E.backend.createTensorFromGPUData(n,t||e,s)}if(!Jt(n)&&!Array.isArray(n)&&"number"!=typeof n&&"boolean"!=typeof n&&"string"!=typeof n)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){qn(t);const r=q(t),o=q(e);C(r===o,()=>`Based on the provided shape, [${t}], the tensor should have ${r} values but has ${o}`);for(let a=0;a<e.length;++a){const l=a!==e.length-1||e[a]!==q(t.slice(a));C(e[a]===t[a]||!l,()=>`Error creating a new Tensor. Inferred shape (${e}) does not match the provided shape (${t}). `)}}return!Jt(n)&&!Array.isArray(n)&&(n=[n]),t=t||e,n="string"!==s?Pr(n,s):Ks(n,[],!0),E.makeTensor(n,t,s)}function Xn(n,t,e){return Mr(n,t,qs(n,e),e)}const mf={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};class Es{static join(t){return new Es(t).slice()}constructor(t){if(this.shards=[],this.previousShardIndex=0,null==t||(t instanceof Array||(t=[t]),0===(t=t.map(s=>Jt(s)?s.buffer:s)).length))return;this.bufferUniformSize=t[0].byteLength;let e=0;for(let s=0;s<t.length;s++){const r=t[s];s!==t.length-1&&r.byteLength!==this.bufferUniformSize&&(this.bufferUniformSize=void 0);const o=e+r.byteLength;this.shards.push({buffer:r,start:e,end:o}),e=o}0===this.shards.length&&(this.byteLength=0),this.byteLength=this.shards[this.shards.length-1].end}slice(t=0,e=this.byteLength){if(0===this.shards.length)return new ArrayBuffer(0);if(t=isNaN(Number(t))?0:t,e=isNaN(Number(e))?0:e,t=Math.max(0,t),(e=Math.min(this.byteLength,e))<=t)return new ArrayBuffer(0);const s=this.findShardForByte(t);if(-1===s)throw new Error(`Could not find start shard for byte ${t}`);const o=new ArrayBuffer(e-t),a=new Uint8Array(o);let i=0;for(let l=s;l<this.shards.length;l++){const u=this.shards[l],h=t+i-u.start,d=i,f=Math.min(e,u.end)-u.start,g=new Uint8Array(u.buffer,h,f-h);if(a.set(g,d),i+=g.length,e<u.end)break}return o}findShardForByte(t){if(0===this.shards.length||t<0||t>=this.byteLength)return-1;if(null!=this.bufferUniformSize)return this.previousShardIndex=Math.floor(t/this.bufferUniformSize),this.previousShardIndex;function e(r){return t<r.start?-1:t>=r.end?1:0}if(0===e(this.shards[this.previousShardIndex]))return this.previousShardIndex;const s=function jT(n,t){let e=0,s=n.length;for(;e<=s;){const r=Math.floor((s-e)/2)+e,o=t(n[r]);if(0===o)return r;o<0?s=r:e=r+1}return-1}(this.shards,e);return-1===s?-1:(this.previousShardIndex=s,this.previousShardIndex)}}const Ph=4;function gf(n,t){return yf.apply(this,arguments)}function yf(){return yf=(0,O.Z)(function*(n,t){const e=[],s=[],r=Array.isArray(n)?n.map(a=>a.name):Object.keys(n);for(let a=0;a<r.length;++a){const i=r[a],l=Array.isArray(n)?n[a].tensor:n[i];if("float32"!==l.dtype&&"int32"!==l.dtype&&"bool"!==l.dtype&&"string"!==l.dtype&&"complex64"!==l.dtype)throw new Error(`Unsupported dtype in weight '${i}': ${l.dtype}`);const u={name:i,shape:l.shape,dtype:l.dtype};if("string"===l.dtype){const c=new Promise(function(){var h=(0,O.Z)(function*(d){const p=yield l.bytes(),f=p.reduce((y,x)=>y+x.length,0)+Ph*p.length,g=new Uint8Array(f);let m=0;for(let y=0;y<p.length;y++){const x=p[y],b=new Uint8Array(new Uint32Array([x.length]).buffer);g.set(b,m),m+=Ph,g.set(x,m),m+=x.length}d(g)});return function(d){return h.apply(this,arguments)}}());s.push(c)}else s.push(l.data());null!=t&&(u.group=t),e.push(u)}return{data:KT(yield Promise.all(s)),specs:e}}),yf.apply(this,arguments)}function xf(n,t){const e=new Es(n),s={};let r,o=0;for(const a of t){const i=a.name,l=a.dtype,u=a.shape,c=q(u);let h;if("quantization"in a){const d=a.quantization;if("uint8"===d.dtype||"uint16"===d.dtype){if(!("min"in d)||!("scale"in d))throw new Error(`Weight ${a.name} with quantization ${d.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==d.dtype)throw new Error(`Weight ${a.name} has unknown quantization dtype ${d.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==l)throw new Error(`Weight ${a.name} is quantized with ${d.dtype} which only supports weights of type float32 not ${l}.`)}const p=mf[d.dtype],f=e.slice(o,o+c*p),g="uint8"===d.dtype?new Uint8Array(f):new Uint16Array(f);if("float32"===l)if("uint8"===d.dtype||"uint16"===d.dtype){h=new Float32Array(g.length);for(let m=0;m<g.length;m++)h[m]=g[m]*d.scale+d.min}else{if("float16"!==d.dtype)throw new Error(`Unsupported quantization type ${d.dtype} for weight type float32.`);void 0===r&&(r=JT()),h=r(g)}else{if("int32"!==l)throw new Error(`Unsupported dtype in weight '${i}': ${l}`);if("uint8"!==d.dtype&&"uint16"!==d.dtype)throw new Error(`Unsupported quantization type ${d.dtype} for weight type int32.`);h=new Int32Array(g.length);for(let m=0;m<g.length;m++)h[m]=Math.round(g[m]*d.scale+d.min)}o+=c*p}else if("string"===l){const d=q(a.shape);h=[];for(let p=0;p<d;p++){const f=new Uint32Array(e.slice(o,o+Ph))[0];o+=Ph;const g=new Uint8Array(e.slice(o,o+f));h.push(g),o+=f}}else{const d=mf[l],p=e.slice(o,o+c*d);if("float32"===l)h=new Float32Array(p);else if("int32"===l)h=new Int32Array(p);else if("bool"===l)h=new Uint8Array(p);else{if("complex64"!==l)throw new Error(`Unsupported dtype in weight '${i}': ${l}`);{h=new Float32Array(p);const f=new Float32Array(h.length/2),g=new Float32Array(h.length/2);for(let x=0;x<f.length;x++)f[x]=h[2*x],g[x]=h[2*x+1];const m=Xn(f,u,"float32"),y=Xn(g,u,"float32");s[i]=mr(m,y),m.dispose(),y.dispose()}}o+=c*d}"complex64"!==l&&(s[i]=Xn(h,u,l))}return s}function KT(n){if(null===n)throw new Error(`Invalid input value: ${JSON.stringify(n)}`);let t=0;const e=[];n.forEach(o=>{if(t+=o.byteLength,e.push(o.byteLength===o.buffer.byteLength?o:new o.constructor(o)),!(o instanceof Float32Array||o instanceof Int32Array||o instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${o.constructor.name}`)});const s=new Uint8Array(t);let r=0;return e.forEach(o=>{s.set(new Uint8Array(o.buffer),r),r+=o.byteLength}),s.buffer}const bf=typeof Buffer<"u"&&(typeof Blob>"u"||typeof atob>"u"||typeof btoa>"u");function Gb(n){return bf?Buffer.byteLength(n,"utf8"):new Blob([n]).size}function Hb(n){return Es.join(n)}function jb(n){for(n=n.trim();n.endsWith("/");)n=n.slice(0,n.length-1);const e=n.split("/");return e[e.length-1]}function Kb(n,t){const e={modelTopology:n.modelTopology,format:n.format,generatedBy:n.generatedBy,convertedBy:n.convertedBy,weightsManifest:t};return null!=n.signature&&(e.signature=n.signature),null!=n.userDefinedMetadata&&(e.userDefinedMetadata=n.userDefinedMetadata),null!=n.modelInitializer&&(e.modelInitializer=n.modelInitializer),null!=n.initializerSignature&&(e.initializerSignature=n.initializerSignature),null!=n.trainingConfig&&(e.trainingConfig=n.trainingConfig),e}function wf(n,t,e){const s={modelTopology:n.modelTopology,format:n.format,generatedBy:n.generatedBy,convertedBy:n.convertedBy};if(null!=n.trainingConfig&&(s.trainingConfig=n.trainingConfig),null!=n.weightsManifest){if(!t)throw new Error("modelJSON has weightsManifest but weightSpecs is null");if(!e)throw new Error("modelJSON has weightsManifest but weightData is null");s.weightSpecs=t,s.weightData=e}return null!=n.signature&&(s.signature=n.signature),null!=n.userDefinedMetadata&&(s.userDefinedMetadata=n.userDefinedMetadata),null!=n.modelInitializer&&(s.modelInitializer=n.modelInitializer),null!=n.initializerSignature&&(s.initializerSignature=n.initializerSignature),s}function vf(n,t){return Sf.apply(this,arguments)}function Sf(){return(Sf=(0,O.Z)(function*(n,t){let e,s;return null!=n.weightsManifest&&([e,s]=yield t(n.weightsManifest)),wf(n,e,s)})).apply(this,arguments)}function uu(n){if(n.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==n.modelTopology?0:Gb(JSON.stringify(n.modelTopology)),weightSpecsBytes:null==n.weightSpecs?0:Gb(JSON.stringify(n.weightSpecs)),weightDataBytes:null==n.weightData?0:new Es(n.weightData).byteLength}}function Cf(n){const t=[];for(const e of n)t.push(...e.weights);return t}function JT(){const n=function ZT(){const n=e=>{let s=e<<13,r=0;for(;!(8388608&s);)r-=8388608,s<<=1;return s&=-8388609,r+=947912704,s|r},t=new Uint32Array(2048);t[0]=0;for(let e=1;e<1024;e++)t[e]=n(e);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function YT(){const n=new Uint32Array(64);n[0]=0,n[31]=1199570944,n[32]=2147483648,n[63]=3347054592;for(let t=1;t<31;t++)n[t]=t<<23;for(let t=33;t<63;t++)n[t]=2147483648+(t-32<<23);return n}(),e=function QT(){const n=new Uint32Array(64);for(let t=0;t<64;t++)n[t]=1024;return n[0]=n[32]=0,n}();return s=>{const r=new ArrayBuffer(4*s.length),o=new Uint32Array(r);for(let a=0;a<s.length;a++){const i=s[a];o[a]=n[e[i>>10]+(1023&i)]+t[i>>10]}return new Float32Array(r)}}class Et{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==Et.instance&&(Et.instance=new Et),Et.instance}static registerSaveRouter(t){Et.getInstance().saveRouters.push(t)}static registerLoadRouter(t){Et.getInstance().loadRouters.push(t)}static getSaveHandlers(t){return Et.getHandlers(t,"save")}static getLoadHandlers(t,e){return Et.getHandlers(t,"load",e)}static getHandlers(t,e,s){const r=[];return("load"===e?Et.getInstance().loadRouters:Et.getInstance().saveRouters).forEach(a=>{const i=a(t,s);null!==i&&r.push(i)}),r}}const e2=n=>Et.registerSaveRouter(n),t2=n=>Et.registerLoadRouter(n),qb=n=>Et.getSaveHandlers(n),Xb=(n,t)=>Et.getLoadHandlers(n,t),Mh="tensorflowjs",Io="models_store",zr="model_info_store";function kf(){if(!B().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const n=typeof window>"u"?self:window,t=n.indexedDB||n.mozIndexedDB||n.webkitIndexedDB||n.msIndexedDB||n.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function Tf(n){const t=n.result;t.createObjectStore(Io,{keyPath:"modelPath"}),t.createObjectStore(zr,{keyPath:"modelPath"})}let li=(()=>{class n{constructor(e){if(this.indexedDB=kf(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}save(e){var s=this;return(0,O.Z)(function*(){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return s.databaseAction(s.modelPath,e)})()}load(){var e=this;return(0,O.Z)(function*(){return e.databaseAction(e.modelPath)})()}databaseAction(e,s){return new Promise((r,o)=>{const a=this.indexedDB.open(Mh,1);a.onupgradeneeded=()=>Tf(a),a.onsuccess=()=>{const i=a.result;if(null==s){const l=i.transaction(Io,"readonly"),c=l.objectStore(Io).get(this.modelPath);c.onsuccess=()=>{if(null==c.result)return i.close(),o(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));r(c.result.modelArtifacts)},c.onerror=h=>(i.close(),o(c.error)),l.oncomplete=()=>i.close()}else{s.weightData=Es.join(s.weightData);const l=uu(s),u=i.transaction(zr,"readwrite");let h,d,c=u.objectStore(zr);try{h=c.put({modelPath:this.modelPath,modelArtifactsInfo:l})}catch(p){return o(p)}h.onsuccess=()=>{d=i.transaction(Io,"readwrite");const p=d.objectStore(Io);let f;try{f=p.put({modelPath:this.modelPath,modelArtifacts:s,modelArtifactsInfo:l})}catch(g){return o(g)}f.onsuccess=()=>r({modelArtifactsInfo:l}),f.onerror=g=>{c=u.objectStore(zr);const m=c.delete(this.modelPath);m.onsuccess=()=>(i.close(),o(f.error)),m.onerror=y=>(i.close(),o(f.error))}},h.onerror=p=>(i.close(),o(h.error)),u.oncomplete=()=>{null==d?i.close():d.oncomplete=()=>i.close()}}},a.onerror=i=>o(a.error)})}}return n.URL_SCHEME="indexeddb://",n})();const Zb=n=>B().getBool("IS_BROWSER")&&!Array.isArray(n)&&n.startsWith(li.URL_SCHEME)?function n2(n){return new li(n)}(n.slice(li.URL_SCHEME.length)):null;Et.registerSaveRouter(Zb),Et.registerLoadRouter(Zb);class r2{constructor(){this.indexedDB=kf()}listModels(){var t=this;return(0,O.Z)(function*(){return new Promise((e,s)=>{const r=t.indexedDB.open(Mh,1);r.onupgradeneeded=()=>Tf(r),r.onsuccess=()=>{const o=r.result,a=o.transaction(zr,"readonly"),l=a.objectStore(zr).getAll();l.onsuccess=()=>{const u={};for(const c of l.result)u[c.modelPath]=c.modelArtifactsInfo;e(u)},l.onerror=u=>(o.close(),s(l.error)),a.oncomplete=()=>o.close()},r.onerror=o=>s(r.error)})})()}removeModel(t){var e=this;return(0,O.Z)(function*(){return t=function s2(n){return n.startsWith(li.URL_SCHEME)?n.slice(li.URL_SCHEME.length):n}(t),new Promise((s,r)=>{const o=e.indexedDB.open(Mh,1);o.onupgradeneeded=()=>Tf(o),o.onsuccess=()=>{const a=o.result,i=a.transaction(zr,"readwrite"),l=i.objectStore(zr),u=l.get(t);let c;u.onsuccess=()=>{if(null==u.result)return a.close(),r(new Error(`Cannot find model with path '${t}' in IndexedDB.`));{const h=l.delete(t),d=()=>{c=a.transaction(Io,"readwrite");const f=c.objectStore(Io).delete(t);f.onsuccess=()=>s(u.result.modelArtifactsInfo),f.onerror=g=>r(u.error)};h.onsuccess=d,h.onerror=p=>(d(),a.close(),r(u.error))}},u.onerror=h=>(a.close(),r(u.error)),i.oncomplete=()=>{null==c?a.close():c.oncomplete=()=>a.close()}},o.onerror=a=>r(o.error)})})()}}const Xs="/",ko="tensorflowjs_models",Yb="info",o2="model_topology",a2="weight_specs",i2="weight_data",l2="model_metadata";function Qb(n){return{info:[ko,n,Yb].join(Xs),topology:[ko,n,o2].join(Xs),weightSpecs:[ko,n,a2].join(Xs),weightData:[ko,n,i2].join(Xs),modelMetadata:[ko,n,l2].join(Xs)}}function Jb(n){for(const t of Object.values(n))window.localStorage.removeItem(t)}function e0(n){const t=n.split(Xs);if(t.length<3)throw new Error(`Invalid key format: ${n}`);return t.slice(1,t.length-1).join(Xs)}let ui=(()=>{class n{constructor(e){if(!B().getBool("IS_BROWSER")||typeof window>"u"||typeof window.localStorage>"u")throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=Qb(this.modelPath)}save(e){var s=this;return(0,O.Z)(function*(){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const r=JSON.stringify(e.modelTopology),o=JSON.stringify(e.weightSpecs),a=uu(e),i=Es.join(e.weightData);try{return s.LS.setItem(s.keys.info,JSON.stringify(a)),s.LS.setItem(s.keys.topology,r),s.LS.setItem(s.keys.weightSpecs,o),s.LS.setItem(s.keys.weightData,function qT(n){if(bf)return Buffer.from(n).toString("base64");const t=new Uint8Array(n);let e="";for(let s=0,r=t.length;s<r;s++)e+=String.fromCharCode(t[s]);return btoa(e)}(i)),s.LS.setItem(s.keys.modelMetadata,JSON.stringify({format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,initializerSignature:null!=e.initializerSignature?e.initializerSignature:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0})),{modelArtifactsInfo:a}}catch{throw Jb(s.keys),new Error(`Failed to save model '${s.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${a.modelTopologyBytes}, weightSpecsBytes=${a.weightSpecsBytes}, weightDataBytes=${a.weightDataBytes}.`)}}})()}load(){var e=this;return(0,O.Z)(function*(){const s=JSON.parse(e.LS.getItem(e.keys.info));if(null==s)throw new Error(`In local storage, there is no model with name '${e.modelPath}'`);if("JSON"!==s.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const r={},o=JSON.parse(e.LS.getItem(e.keys.topology));if(null==o)throw new Error(`In local storage, the topology of model '${e.modelPath}' is missing.`);r.modelTopology=o;const a=JSON.parse(e.LS.getItem(e.keys.weightSpecs));if(null==a)throw new Error(`In local storage, the weight specs of model '${e.modelPath}' are missing.`);r.weightSpecs=a;const i=e.LS.getItem(e.keys.modelMetadata);if(null!=i){const u=JSON.parse(i);r.format=u.format,r.generatedBy=u.generatedBy,r.convertedBy=u.convertedBy,null!=u.signature&&(r.signature=u.signature),null!=u.userDefinedMetadata&&(r.userDefinedMetadata=u.userDefinedMetadata),null!=u.modelInitializer&&(r.modelInitializer=u.modelInitializer),null!=u.initializerSignature&&(r.initializerSignature=u.initializerSignature),null!=u.trainingConfig&&(r.trainingConfig=u.trainingConfig)}const l=e.LS.getItem(e.keys.weightData);if(null==l)throw new Error(`In local storage, the binary weight values of model '${e.modelPath}' are missing.`);return r.weightData=function XT(n){if(bf){const s=Buffer.from(n,"base64");return s.buffer.slice(s.byteOffset,s.byteOffset+s.byteLength)}const t=atob(n),e=new Uint8Array(t.length);for(let s=0;s<t.length;++s)e.set([t.charCodeAt(s)],s);return e.buffer}(l),r})()}}return n.URL_SCHEME="localstorage://",n})();const t0=n=>B().getBool("IS_BROWSER")&&!Array.isArray(n)&&n.startsWith(ui.URL_SCHEME)?function c2(n){return new ui(n)}(n.slice(ui.URL_SCHEME.length)):null;Et.registerSaveRouter(t0),Et.registerLoadRouter(t0);class h2{constructor(){C(B().getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),C(typeof window>"u"||typeof window.localStorage<"u",()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}listModels(){var t=this;return(0,O.Z)(function*(){const e={},s=ko+Xs,r=Xs+Yb;for(let o=0;o<t.LS.length;++o){const a=t.LS.key(o);a.startsWith(s)&&a.endsWith(r)&&(e[e0(a)]=JSON.parse(t.LS.getItem(a)))}return e})()}removeModel(t){var e=this;return(0,O.Z)(function*(){const s=Qb(t=function u2(n){return n.startsWith(ui.URL_SCHEME)?n.slice(ui.URL_SCHEME.length):n}(t));if(null==e.LS.getItem(s.info))throw new Error(`Cannot find model at path '${t}'`);const r=JSON.parse(e.LS.getItem(s.info));return Jb(s),r})()}}const ci="://";class _n{constructor(){this.managers={}}static getInstance(){return null==_n.instance&&(_n.instance=new _n),_n.instance}static registerManager(t,e){C(null!=t,()=>"scheme must not be undefined or null."),t.endsWith(ci)&&(t=t.slice(0,t.indexOf(ci))),C(t.length>0,()=>"scheme must not be an empty string.");const s=_n.getInstance();C(null==s.managers[t],()=>`A model store manager is already registered for scheme '${t}'.`),s.managers[t]=e}static getManager(t){const e=_n.getInstance().managers[t];if(null==e)throw new Error(`Cannot find model manager for scheme '${t}'`);return e}static getSchemes(){return Object.keys(_n.getInstance().managers)}}function zh(n){if(-1===n.indexOf(ci))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${_n.getSchemes().join(",")}`);return{scheme:n.split(ci)[0],path:n.split(ci)[1]}}function n0(n,t){return $f.apply(this,arguments)}function $f(){return($f=(0,O.Z)(function*(n,t,e=!1){C(n!==t,()=>`Old path and new path are the same: '${n}'`);const s=Et.getLoadHandlers(n);C(s.length>0,()=>`Copying failed because no load handler is found for source URL ${n}.`),C(s.length<2,()=>`Copying failed because more than one (${s.length}) load handlers for source URL ${n}.`);const r=s[0],o=Et.getSaveHandlers(t);C(o.length>0,()=>`Copying failed because no save handler is found for destination URL ${t}.`),C(o.length<2,()=>`Copying failed because more than one (${s.length}) save handlers for destination URL ${t}.`);const a=o[0],i=zh(n).scheme,l=zh(n).path,u=i===zh(n).scheme,c=yield r.load();e&&u&&(yield _n.getManager(i).removeModel(l));const h=yield a.save(c);return e&&!u&&(yield _n.getManager(i).removeModel(l)),h.modelArtifactsInfo})).apply(this,arguments)}function d2(){return Ef.apply(this,arguments)}function Ef(){return(Ef=(0,O.Z)(function*(){const n=_n.getSchemes(),t={};for(const e of n){const s=yield _n.getManager(e).listModels();for(const r in s)t[e+ci+r]=s[r]}return t})).apply(this,arguments)}function p2(n){return _f.apply(this,arguments)}function _f(){return(_f=(0,O.Z)(function*(n){const t=zh(n);return _n.getManager(t.scheme).removeModel(t.path)})).apply(this,arguments)}function f2(n,t){return Af.apply(this,arguments)}function Af(){return(Af=(0,O.Z)(function*(n,t){return n0(n,t,!1)})).apply(this,arguments)}function m2(n,t){return Rf.apply(this,arguments)}function Rf(){return(Rf=(0,O.Z)(function*(n,t){return n0(n,t,!0)})).apply(this,arguments)}class g2{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(t,e){return fetch(t,e)}now(){return performance.now()}encode(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error(`Browser's encoder only supports utf-8, but got ${e}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(t)}decode(t,e){return new TextDecoder(e).decode(t)}setTimeoutCustom(t,e){typeof window>"u"||!B().getBool("USE_SETTIMEOUTCUSTOM")?setTimeout(t,e):(this.functionRefs.push(t),setTimeout(()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")},e),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",s=>{s.source===window&&s.data.name===this.messageName&&(s.stopPropagation(),(0,this.functionRefs[s.data.index])(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0))},!0)))}isTypedArray(t){return vb(t)}}if(B().get("IS_BROWSER")){B().setPlatform("browser",new g2);try{_n.registerManager(ui.URL_SCHEME,new h2)}catch{}try{_n.registerManager(li.URL_SCHEME,new r2)}catch{}}let hi;function Ge(n,t="float32",e){return t=t||"float32",qn(n),new Ht(n,t,e)}B().get("IS_NODE")&&!B().get("IS_BROWSER")&&B().setPlatform("node",new class x2{constructor(){this.util=P(8628),this.textEncoder=new this.util.TextEncoder}fetch(t,e){return null!=B().global.fetch?B().global.fetch(t,e):(null==hi&&(hi=P(5410)),hi(t,e))}now(){const t=process.hrtime();return 1e3*t[0]+t[1]/1e6}encode(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error(`Node built-in encoder only supports utf-8, but got ${e}`);return this.textEncoder.encode(t)}decode(t,e){return 0===t.length?"":new this.util.TextDecoder(e).decode(t)}isTypedArray(t){return this.util.types.isFloat32Array(t)||this.util.types.isInt32Array(t)||this.util.types.isUint8Array(t)||this.util.types.isUint8ClampedArray(t)}});const de=A({cast_:function b2(n,t){const e=I(n,"x","cast");if(!cb(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==e.dtype||"string"!==t&&"string"===e.dtype)throw new Error("Only strings can be casted to strings");return E.runKernel(xa,{x:e},{dtype:t})}}),Zs=A({clone_:function w2(n){const e={x:I(n,"x","clone","string_or_numeric")};return E.runKernel(Aa,e)}});function Df(n,t=!1){console.log(n.toString(t))}function v2(){B().set("PROD",!0)}function S2(){B().set("DEBUG",!0)}function C2(){B().set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")}function s0(n){B().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(n+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function N2(){E.disposeVariables()}function _s(){return E}function Bh(){return E.memory()}function I2(n){return E.profile(n)}function z(n,t){return E.tidy(n,t)}function Be(n){fr(n).forEach(e=>e.dispose())}function en(n){return E.keep(n)}function k2(n){return E.time(n)}function r0(n){return E.setBackend(n)}function T2(){return E.ready()}function o0(){return E.backendName}function $2(n){E.removeBackend(n)}function E2(n){return E.findBackend(n)}function _2(n){return E.findBackendFactory(n)}function Ff(n,t,e=1){return E.registerBackend(n,t,e)}function a0(){return E.backend}function A2(n,t){B().setPlatform(n,t)}Vb(),function LT(n){ii=n}({buffer:Ge,cast:de,clone:Zs,print:Df}),function PT(n){_b=n}(s0);const ne=A({add_:function R2(n,t){let e=I(n,"a","add"),s=I(t,"b","add");return[e,s]=$t(e,s),E.runKernel(vo,{a:e,b:s})}}),Vh=A({floorDiv_:function D2(n,t){let e=I(n,"a","floorDiv"),s=I(t,"b","floorDiv");return[e,s]=$t(e,s),E.runKernel(Ea,{a:e,b:s})}}),$e=A({div_:function F2(n,t){let e=I(n,"a","div"),s=I(t,"b","div");return[e,s]=$t(e,s),"int32"===e.dtype&&"int32"===s.dtype?Vh(e,s):E.runKernel(Ca,{a:e,b:s},{})}}),D=A({mul_:function O2(n,t){let e=I(n,"a","mul"),s=I(t,"b","mul");return[e,s]=$t(e,s),E.runKernel(Ba,{a:e,b:s})}}),yn=A({sqrt_:function L2(n){const e={x:I(n,"x","sqrt","float32")};return E.runKernel(Ja,e)}}),gt=A({square_:function P2(n){const t=I(n,"x","square");return E.runKernel("Square",{x:t},{})}}),Je=A({zerosLike_:function M2(n){const e={x:I(n,"x","zerosLike")};return E.runKernel(Yl,e)}});function z2(n){return C(Or(n),()=>"The f passed in grad(f) must be a function"),(t,e)=>{const s=I(t,"x","tf.grad","string_or_numeric"),r=null!=e?I(e,"dy","tf.grad"):null;return E.tidy(()=>{const{value:o,grads:a}=E.gradients(()=>n(s),[s],r);return null!=r&&fn(o.shape,r.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),Wh(a),a[0]})}}function B2(n){return C(Or(n),()=>"The f passed in grads(f) must be a function"),(t,e)=>{C(Array.isArray(t),()=>"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s");const s=lu(t,"args","tf.grads","string_or_numeric"),r=null!=e?I(e,"dy","tf.grads"):null;return E.tidy(()=>{const{value:o,grads:a}=E.gradients(()=>n(...s),s,r);return null!=r&&fn(o.shape,r.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),Wh(a),a})}}function V2(n){return C(Or(n),()=>"The f passed in valueAndGrad(f) must be a function"),(t,e)=>{C(t instanceof rt,()=>"The x passed in valueAndGrad(f)(x) must be a tensor"),C(null==e||e instanceof rt,()=>"The dy passed in valueAndGrad(f)(x, dy) must be a tensor");const{grads:s,value:r}=E.gradients(()=>n(t),[t],e);return Wh(s),{grad:s[0],value:r}}}function W2(n){return C(Or(n),()=>"The f passed in valueAndGrads(f) must be a function"),(t,e)=>{C(Array.isArray(t)&&t.every(r=>r instanceof rt),()=>"The args passed in valueAndGrads(f)(args) must be array of tensors"),C(null==e||e instanceof rt,()=>"The dy passed in valueAndGrads(f)(args, dy) must be a tensor");const s=E.gradients(()=>n(...t),t,e);return null!=e&&fn(s.value.shape,e.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),Wh(s.grads),s}}function i0(n,t){C(Or(n),()=>"The f passed in variableGrads(f) must be a function"),C(null==t||Array.isArray(t)&&t.every(u=>u instanceof iu),()=>"The varList passed in variableGrads(f, varList) must be an array of variables");const e=null!=t;if(!e){t=[];for(const u in E.registeredVariables)t.push(E.registeredVariables[u])}const s=e?t.filter(u=>!u.trainable):null,r=t.length;C((t=t.filter(u=>u.trainable)).length>0,()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${r} variables is trainable.`);const{value:a,grads:i}=E.gradients(n,t,null,!0);C(i.some(u=>null!=u),()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."),C(0===a.rank,()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`);const l={};return t.forEach((u,c)=>{null!=i[c]&&(l[u.name]=i[c])}),s?.forEach(u=>l[u.name]=null),{value:a,grads:l}}function Ys(n){return E.customGrad(n)}function Wh(n){if(n.filter(e=>null==e).length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.")}function _e(n,t){if((Jt(n)&&"string"!==t||Array.isArray(n))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&Jt(n)&&!(n instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return Mr(n,[],[],t)}const U2=new Map,Of=new Map;class To{getClassName(){return this.constructor.className}static fromConfig(t,e){return new t(e)}}class is{constructor(){this.classNameMap={}}static getMap(){return null==is.instance&&(is.instance=new is),is.instance}static register(t){is.getMap().classNameMap[t.className]=[t,t.fromConfig]}}function se(n,t,e){C(null!=n.className,()=>"Class being registered does not have the static className property defined."),C("string"==typeof n.className,()=>"className is required to be a string, but got type "+typeof n.className),C(n.className.length>0,()=>"Class being registered has an empty-string as its className, which is disallowed."),typeof t>"u"&&(t="Custom"),typeof e>"u"&&(e=n.className);const r=t+">"+e;return is.register(n),U2.set(r,n),Of.set(n,r),n}function G2(n){return Of.has(n)?Of.get(n):n.className}class gr extends To{minimize(t,e=!1,s){const{value:r,grads:o}=this.computeGradients(t,s);if(null!=s){const a=s.map(i=>({name:i.name,tensor:o[i.name]}));this.applyGradients(a)}else this.applyGradients(o);return Be(o),e?r:(r.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(t,e){return i0(t,e)}dispose(){null!=this.iterations_&&Be(this.iterations_)}saveIterations(){var t=this;return(0,O.Z)(function*(){return null==t.iterations_&&(t.iterations_=0),{name:"iter",tensor:_e(t.iterations_,"int32")}})()}getWeights(){return(0,O.Z)(function*(){throw new Error("getWeights() is not implemented for this optimizer yet.")})()}setWeights(t){var e=this;return(0,O.Z)(function*(){throw new Error(`setWeights() is not implemented for this optimizer class ${e.getClassName()}`)})()}extractIterations(t){var e=this;return(0,O.Z)(function*(){return e.iterations_=(yield t[0].tensor.data())[0],t.slice(1)})()}}Object.defineProperty(gr,Symbol.hasInstance,{value:n=>null!=n.minimize&&null!=n.computeGradients&&null!=n.applyGradients});class Lf extends gr{static get className(){return"Adadelta"}constructor(t,e,s=null){super(),this.learningRate=t,this.rho=e,this.epsilon=s,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==s&&(this.epsilon=E.backend.epsilon())}applyGradients(t){(Array.isArray(t)?t.map(s=>s.name):Object.keys(t)).forEach((s,r)=>{const o=E.registeredVariables[s];null==this.accumulatedGrads[r]&&(this.accumulatedGrads[r]={originalName:`${s}/accum_grad`,variable:z(()=>Je(o).variable(!1))}),null==this.accumulatedUpdates[r]&&(this.accumulatedUpdates[r]={originalName:`${s}/accum_var`,variable:z(()=>Je(o).variable(!1))});const i=Array.isArray(t)?t[r].tensor:t[s];if(null==i)return;const l=this.accumulatedGrads[r].variable,u=this.accumulatedUpdates[r].variable;z(()=>{const c=ne(D(l,this.rho),D(gt(i),1-this.rho)),h=D($e(yn(ne(u,this.epsilon)),yn(ne(l,this.epsilon))),i),d=ne(D(u,this.rho),D(gt(h),1-this.rho));l.assign(c),u.assign(d);const p=ne(D(h,-this.learningRate),o);o.assign(p)})}),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(Be(this.accumulatedGrads.map(t=>t.variable)),Be(this.accumulatedUpdates.map(t=>t.variable)))}getWeights(){var t=this;return(0,O.Z)(function*(){const e=[...t.accumulatedGrads,...t.accumulatedUpdates];return[yield t.saveIterations()].concat(e.map(s=>({name:s.originalName,tensor:s.variable})))})()}setWeights(t){var e=this;return(0,O.Z)(function*(){const s=(t=yield e.extractIterations(t)).length/2;e.accumulatedGrads=t.slice(0,s).map(o=>({originalName:o.name,variable:o.tensor.variable(!1)})),e.accumulatedUpdates=t.slice(s,2*s).map(o=>({originalName:o.name,variable:o.tensor.variable(!1)}))})()}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.rho,e.epsilon)}}function $o(n,t,e){return qn(n),e=e||bo(t),E.runKernel(jc,{},{shape:n,value:t,dtype:e})}class Pf extends gr{static get className(){return"Adagrad"}constructor(t,e=.1){super(),this.learningRate=t,this.initialAccumulatorValue=e,this.accumulatedGrads=[]}applyGradients(t){(Array.isArray(t)?t.map(s=>s.name):Object.keys(t)).forEach((s,r)=>{const o=E.registeredVariables[s];null==this.accumulatedGrads[r]&&(this.accumulatedGrads[r]={originalName:`${s}/accumulator`,variable:z(()=>$o(o.shape,this.initialAccumulatorValue).variable(!1))});const a=Array.isArray(t)?t[r].tensor:t[s];if(null==a)return;const i=this.accumulatedGrads[r].variable;z(()=>{const l=ne(i,gt(a));i.assign(l);const u=ne(D($e(a,yn(ne(l,E.backend.epsilon()))),-this.learningRate),o);o.assign(u)})}),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&Be(this.accumulatedGrads.map(t=>t.variable))}getWeights(){var t=this;return(0,O.Z)(function*(){return[yield t.saveIterations()].concat(t.accumulatedGrads.map(e=>({name:e.originalName,tensor:e.variable})))})()}setWeights(t){var e=this;return(0,O.Z)(function*(){t=yield e.extractIterations(t),e.accumulatedGrads=t.map(r=>({originalName:r.name,variable:r.tensor.variable(!1)}))})()}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(t,e){return new t(e.learningRate,e.initialAccumulatorValue)}}const yr=A({pow_:function H2(n,t){let e=I(n,"base","pow"),s=I(t,"exp","pow");return[e,s]=$t(e,s),E.runKernel(Va,{a:e,b:s})}}),be=A({sub_:function j2(n,t){let e=I(n,"a","sub"),s=I(t,"b","sub");return[e,s]=$t(e,s),E.runKernel(ti,{a:e,b:s})}});class Mf extends gr{static get className(){return"Adam"}constructor(t,e,s,r=null){super(),this.learningRate=t,this.beta1=e,this.beta2=s,this.epsilon=r,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],z(()=>{this.accBeta1=_e(e).variable(),this.accBeta2=_e(s).variable()}),null==r&&(this.epsilon=E.backend.epsilon())}applyGradients(t){const e=Array.isArray(t)?t.map(s=>s.name):Object.keys(t);z(()=>{const s=be(1,this.accBeta1),r=be(1,this.accBeta2);e.forEach((o,a)=>{const i=E.registeredVariables[o];null==this.accumulatedFirstMoment[a]&&(this.accumulatedFirstMoment[a]={originalName:`${o}/m`,variable:z(()=>Je(i).variable(!1))}),null==this.accumulatedSecondMoment[a]&&(this.accumulatedSecondMoment[a]={originalName:`${o}/v`,variable:z(()=>Je(i).variable(!1))});const u=Array.isArray(t)?t[a].tensor:t[o];if(null==u)return;const c=this.accumulatedFirstMoment[a].variable,h=this.accumulatedSecondMoment[a].variable,d=ne(D(c,this.beta1),D(u,1-this.beta1)),p=ne(D(h,this.beta2),D(gt(u),1-this.beta2)),f=$e(d,s),g=$e(p,r);c.assign(d),h.assign(p);const m=ne(D($e(f,ne(yn(g),this.epsilon)),-this.learningRate),i);i.assign(m)}),this.accBeta1.assign(D(this.accBeta1,this.beta1)),this.accBeta2.assign(D(this.accBeta2,this.beta2))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&Be(this.accumulatedFirstMoment.map(t=>t.variable)),null!=this.accumulatedSecondMoment&&Be(this.accumulatedSecondMoment.map(t=>t.variable))}getWeights(){var t=this;return(0,O.Z)(function*(){const e=[...t.accumulatedFirstMoment,...t.accumulatedSecondMoment];return[yield t.saveIterations()].concat(e.map(s=>({name:s.originalName,tensor:s.variable})))})()}setWeights(t){var e=this;return(0,O.Z)(function*(){t=yield e.extractIterations(t),z(()=>{e.accBeta1.assign(yr(e.beta1,e.iterations_+1)),e.accBeta2.assign(yr(e.beta2,e.iterations_+1))});const s=t.length/2;e.accumulatedFirstMoment=t.slice(0,s).map(o=>({originalName:o.name,variable:o.tensor.variable(!1)})),e.accumulatedSecondMoment=t.slice(s,2*s).map(o=>({originalName:o.name,variable:o.tensor.variable(!1)}))})()}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon)}}const jt=A({abs_:function K2(n){const t=I(n,"x","abs");return E.runKernel("complex64"===t.dtype?rl:Xi,{x:t})}});function Eo(n,t){const e=n.length,s=[];for(let r=0;r<e;r++){const o=e-1-r;(t[t.length-1-r]||1)>1&&1===(n[o]||1)&&s.unshift(o)}return s}function Kt(n,t){const e=[];for(let s=0;s<t.length;s++){const r=n[n.length-s-1],o=t.length-s-1;(null==r||1===r&&t[o]>1)&&e.unshift(o)}return e}function Ve(n,t){const e=Math.max(n.length,t.length),s=new Array(e);for(let r=0;r<e;r++){let o=n[n.length-r-1];null==o&&(o=1);let a=t[t.length-r-1];if(null==a&&(a=1),1===o)s[e-r-1]=a;else if(1===a)s[e-r-1]=o;else{if(o!==a)throw Error(`Operands could not be broadcast together with shapes ${n} and ${t}.`);s[e-r-1]=o}}return s}const Qs=A({maximum_:function q2(n,t){let e=I(n,"a","maximum"),s=I(t,"b","maximum");return[e,s]=$t(e,s),"bool"===e.dtype&&(e=de(e,"int32"),s=de(s,"int32")),Ve(e.shape,s.shape),E.runKernel(Pa,{a:e,b:s})}});class zf extends gr{static get className(){return"Adamax"}constructor(t,e,s,r=null,o=0){super(),this.learningRate=t,this.beta1=e,this.beta2=s,this.epsilon=r,this.decay=o,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],z(()=>{this.iteration=_e(0).variable(),this.accBeta1=_e(e).variable()}),null==r&&(this.epsilon=E.backend.epsilon())}applyGradients(t){const e=Array.isArray(t)?t.map(s=>s.name):Object.keys(t);z(()=>{const s=be(1,this.accBeta1),r=$e(-this.learningRate,ne(D(this.iteration,this.decay),1));e.forEach((o,a)=>{const i=E.registeredVariables[o];null==this.accumulatedFirstMoment[a]&&(this.accumulatedFirstMoment[a]={originalName:`${o}/m`,variable:Je(i).variable(!1)}),null==this.accumulatedWeightedInfNorm[a]&&(this.accumulatedWeightedInfNorm[a]={originalName:`${o}/v`,variable:Je(i).variable(!1)});const u=Array.isArray(t)?t[a].tensor:t[o];if(null==u)return;const c=this.accumulatedFirstMoment[a].variable,h=this.accumulatedWeightedInfNorm[a].variable,d=ne(D(c,this.beta1),D(u,1-this.beta1)),p=D(h,this.beta2),f=jt(u),g=Qs(p,f);c.assign(d),h.assign(g);const m=ne(D($e(r,s),$e(d,ne(g,this.epsilon))),i);i.assign(m)}),this.iteration.assign(ne(this.iteration,1)),this.accBeta1.assign(D(this.accBeta1,this.beta1))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&Be(this.accumulatedFirstMoment.map(t=>t.variable)),null!=this.accumulatedWeightedInfNorm&&Be(this.accumulatedWeightedInfNorm.map(t=>t.variable))}getWeights(){return(0,O.Z)(function*(){throw new Error("getWeights() is not implemented for Adamax yet.")})()}setWeights(t){return(0,O.Z)(function*(){throw new Error("setWeights() is not implemented for Adamax yet.")})()}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon,e.decay)}}class Uh extends gr{static get className(){return"SGD"}constructor(t){super(),this.learningRate=t,this.setLearningRate(t)}applyGradients(t){(Array.isArray(t)?t.map(s=>s.name):Object.keys(t)).forEach((s,r)=>{const o=Array.isArray(t)?t[r].tensor:t[s];if(null==o)return;const a=E.registeredVariables[s];z(()=>{const i=ne(D(this.c,o),a);a.assign(i)})}),this.incrementIterations()}setLearningRate(t){this.learningRate=t,null!=this.c&&this.c.dispose(),this.c=en(_e(-t))}dispose(){this.c.dispose()}getWeights(){var t=this;return(0,O.Z)(function*(){return[yield t.saveIterations()]})()}setWeights(t){var e=this;return(0,O.Z)(function*(){if(0!==(t=yield e.extractIterations(t)).length)throw new Error("SGD optimizer does not have settable weights.")})()}getConfig(){return{learningRate:this.learningRate}}static fromConfig(t,e){return new t(e.learningRate)}}class Bf extends Uh{static get className(){return"Momentum"}constructor(t,e,s=!1){super(t),this.learningRate=t,this.momentum=e,this.useNesterov=s,this.accumulations=[],this.m=_e(this.momentum)}applyGradients(t){(Array.isArray(t)?t.map(s=>s.name):Object.keys(t)).forEach((s,r)=>{const o=E.registeredVariables[s];null==this.accumulations[r]&&(this.accumulations[r]={originalName:`${s}/momentum`,variable:z(()=>Je(o).variable(!1))});const a=this.accumulations[r].variable,i=Array.isArray(t)?t[r].tensor:t[s];null!=i&&z(()=>{let l;const u=ne(D(this.m,a),i);l=ne(D(this.c,this.useNesterov?ne(i,D(u,this.m)):u),o),a.assign(u),o.assign(l)})}),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&Be(this.accumulations.map(t=>t.variable))}setMomentum(t){this.momentum=t}getWeights(){var t=this;return(0,O.Z)(function*(){return[yield t.saveIterations()].concat(t.accumulations.map(e=>({name:e.originalName,tensor:e.variable})))})()}setWeights(t){var e=this;return(0,O.Z)(function*(){t=yield e.extractIterations(t),e.accumulations=t.map(r=>({originalName:r.name,variable:r.tensor.variable(!1)}))})()}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(t,e){return new t(e.learningRate,e.momentum,e.useNesterov)}}class Vf extends gr{static get className(){return"RMSProp"}constructor(t,e=.9,s=0,r=null,o=!1){if(super(),this.learningRate=t,this.decay=e,this.momentum=s,this.epsilon=r,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=o,null==r&&(this.epsilon=E.backend.epsilon()),null==t)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(t){(Array.isArray(t)?t.map(s=>s.name):Object.keys(t)).forEach((s,r)=>{const o=E.registeredVariables[s],a=!1;null==this.accumulatedMeanSquares[r]&&(this.accumulatedMeanSquares[r]={originalName:`${s}/rms`,variable:z(()=>Je(o).variable(a))}),null==this.accumulatedMoments[r]&&(this.accumulatedMoments[r]={originalName:`${s}/momentum`,variable:z(()=>Je(o).variable(a))}),null==this.accumulatedMeanGrads[r]&&this.centered&&(this.accumulatedMeanGrads[r]={originalName:`${s}/mg`,variable:z(()=>Je(o).variable(a))});const i=Array.isArray(t)?t[r].tensor:t[s];if(null==i)return;const l=this.accumulatedMeanSquares[r].variable,u=this.accumulatedMoments[r].variable;z(()=>{const c=ne(D(l,this.decay),D(gt(i),1-this.decay));if(this.centered){const h=this.accumulatedMeanGrads[r].variable,d=ne(D(h,this.decay),D(i,1-this.decay)),p=$e(D(i,this.learningRate),yn(be(c,ne(gt(d),this.epsilon)))),f=ne(D(u,this.momentum),p);l.assign(c),h.assign(d),u.assign(f);const g=be(o,f);o.assign(g)}else{const h=ne(D(l,this.decay),D(gt(i),1-this.decay)),d=ne(D(u,this.momentum),$e(D(i,this.learningRate),yn(ne(h,this.epsilon))));l.assign(h),u.assign(d);const p=be(o,d);o.assign(p)}})}),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&Be(this.accumulatedMeanSquares.map(t=>t.variable)),null!=this.accumulatedMeanGrads&&this.centered&&Be(this.accumulatedMeanGrads.map(t=>t.variable)),null!=this.accumulatedMoments&&Be(this.accumulatedMoments.map(t=>t.variable))}getWeights(){var t=this;return(0,O.Z)(function*(){const e=[...t.accumulatedMeanSquares,...t.accumulatedMoments];return t.centered&&e.push(...t.accumulatedMeanGrads),[yield t.saveIterations()].concat(e.map(s=>({name:s.originalName,tensor:s.variable})))})()}setWeights(t){var e=this;return(0,O.Z)(function*(){t=yield e.extractIterations(t);const s=e.centered?t.length/3:t.length/2,r=!1;e.accumulatedMeanSquares=t.slice(0,s).map(o=>({originalName:o.name,variable:o.tensor.variable(r)})),e.accumulatedMoments=t.slice(s,2*s).map(o=>({originalName:o.name,variable:o.tensor.variable(r)})),e.centered&&(e.accumulatedMeanGrads=t.slice(2*s,3*s).map(o=>({originalName:o.name,variable:o.tensor.variable(r)})))})()}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(t,e){return new t(e.learningRate,e.decay,e.momentum,e.epsilon,e.centered)}}const X2=[Lf,Pf,Mf,zf,Bf,Vf,Uh];function l0(n){return new Promise(t=>setTimeout(t)).then(n)}let Wf=(()=>{class n{constructor(e){if(!B().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(n.URL_SCHEME)&&(e=e.slice(n.URL_SCHEME.length)),(null==e||0===e.length)&&(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}save(e){var s=this;return(0,O.Z)(function*(){if(typeof document>"u")throw new Error("Browser downloads are not supported in this environment since `document` is not present");const r=Es.join(e.weightData),o=window.URL.createObjectURL(new Blob([r],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const i=Kb(e,[{paths:["./"+s.weightDataFileName],weights:e.weightSpecs}]),l=window.URL.createObjectURL(new Blob([JSON.stringify(i)],{type:"application/json"})),u=null==s.modelJsonAnchor?document.createElement("a"):s.modelJsonAnchor;if(u.download=s.modelJsonFileName,u.href=l,yield l0(()=>u.dispatchEvent(new MouseEvent("click"))),null!=e.weightData){const c=null==s.weightDataAnchor?document.createElement("a"):s.weightDataAnchor;c.download=s.weightDataFileName,c.href=o,yield l0(()=>c.dispatchEvent(new MouseEvent("click")))}return{modelArtifactsInfo:uu(e)}}})()}}return n.URL_SCHEME="downloads://",n})();class e${constructor(t){if(null==t||t.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${t}`);this.jsonFile=t[0],this.weightsFiles=t.slice(1)}load(){var t=this;return(0,O.Z)(function*(){return new Promise((e,s)=>{const r=new FileReader;r.onload=o=>{const a=JSON.parse(o.target.result),i=a.modelTopology;if(null==i)return void s(new Error(`modelTopology field is missing from file ${t.jsonFile.name}`));if(null==a.weightsManifest)return void s(new Error(`weightManifest field is missing from file ${t.jsonFile.name}`));if(0===t.weightsFiles.length)return void e({modelTopology:i});const u=vf(a,c=>t.loadWeights(c));e(u)},r.onerror=o=>s(`Failed to read model topology and weights manifest JSON from file '${t.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),r.readAsText(t.jsonFile)})})()}loadWeights(t){const e=[],s=[];for(const a of t)e.push(...a.weights),s.push(...a.paths);const r=this.checkManifestAndWeightFiles(t),o=s.map(a=>this.loadWeightsFile(a,r[a]));return Promise.all(o).then(a=>[e,a])}loadWeightsFile(t,e){return new Promise((s,r)=>{const o=new FileReader;o.onload=a=>{s(a.target.result)},o.onerror=a=>r(`Failed to weights data from file of path '${t}'.`),o.readAsArrayBuffer(e)})}checkManifestAndWeightFiles(t){const e=[],s=this.weightsFiles.map(o=>jb(o.name)),r={};for(const o of t)o.paths.forEach(a=>{const i=jb(a);if(-1!==e.indexOf(i))throw new Error(`Duplicate file basename found in weights manifest: '${i}'`);if(e.push(i),-1===s.indexOf(i))throw new Error(`Weight file with basename '${i}' is not provided.`);r[a]=this.weightsFiles[s.indexOf(i)]});if(e.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${e.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return r}}function s$(n){return new e$(n)}function u0(n,t,e,s){(function a(l){C(null!=l&&Array.isArray(l)&&l.length>0,()=>"promises must be a none empty array")})(n),function i(l,u){C(l>=0&&l<=1,()=>`Progress fraction must be in range [0, 1], but got startFraction ${l}`),C(u>=0&&u<=1,()=>`Progress fraction must be in range [0, 1], but got endFraction ${u}`),C(u>=l,()=>`startFraction must be no more than endFraction, but got startFraction ${l} and endFraction ${u}`)}(e=e??0,s=s??1);let r=0;return Promise.all(n.map(l=>(l.then(u=>{const c=e+ ++r/n.length*(s-e);return t(c),u}),l)))}function c0(n,t){return Uf.apply(this,arguments)}function Uf(){return(Uf=(0,O.Z)(function*(n,t){null==t&&(t={});const e=null==t.fetchFunc?B().platform.fetch:t.fetchFunc,s=n.map(h=>e(h,t.requestInit,{isBinary:!0})),i=(null==t.onProgress?yield Promise.all(s):yield u0(s,t.onProgress,0,.5)).map(h=>h.arrayBuffer());return null==t.onProgress?yield Promise.all(i):yield u0(i,t.onProgress,.5,1)})).apply(this,arguments)}function h0(n){return Gf.apply(this,arguments)}function Gf(){return(Gf=(0,O.Z)(function*(n,t="",e,s){return d0(a=>c0(a,{requestInit:s}))(n,t,e)})).apply(this,arguments)}function d0(n){return function(){var t=(0,O.Z)(function*(e,s="",r){const o=e.map(()=>!1),a={},i=null!=r?r.map(()=>!1):[],l=[];if(e.forEach((f,g)=>{let m=0;f.weights.forEach(y=>{const b=mf["quantization"in y?y.quantization.dtype:y.dtype]*q(y.shape),w=()=>{o[g]=!0,null==a[g]&&(a[g]=[]),a[g].push({manifestEntry:y,groupOffset:m,sizeBytes:b})};null!=r?r.forEach((S,N)=>{S===y.name&&(w(),i[N]=!0)}):w(),l.push(y.name),m+=b})}),!i.every(f=>f)){const f=r.filter((g,m)=>!i[m]);throw new Error(`Could not find weights in manifest with names: ${f.join(", ")}. \nManifest JSON has weights with names: ${l.join(", ")}.`)}const u=o.reduce((f,g,m)=>(g&&f.push(m),f),[]),c=[];u.forEach(f=>{e[f].paths.forEach(g=>{const m=s+(s.endsWith("/")?"":"/")+g;c.push(m)})});const h=yield n(c),d={};let p=0;return u.forEach(f=>{const g=e[f].paths.length,m=new Es(h.slice(p,p+g));a[f].forEach(x=>{const w=xf(m.slice(x.groupOffset,x.groupOffset+x.sizeBytes),[x.manifestEntry]);for(const S in w)d[S]=w[S]}),p+=g}),d});return function(e){return t.apply(this,arguments)}}()}Et.registerSaveRouter(n=>B().getBool("IS_BROWSER")&&!Array.isArray(n)&&n.startsWith(Wf.URL_SCHEME)?function n$(n="model"){return new Wf(n)}(n.slice(Wf.URL_SCHEME.length)):null);let p0=(()=>{class n{constructor(e,s){if(this.DEFAULT_METHOD="POST",null==s&&(s={}),this.weightPathPrefix=s.weightPathPrefix,this.onProgress=s.onProgress,this.weightUrlConverter=s.weightUrlConverter,null!=s.fetchFunc?(C("function"==typeof s.fetchFunc,()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"),this.fetch=s.fetchFunc):this.fetch=B().platform.fetch,C(null!=e&&e.length>0,()=>"URL path for http must not be null, undefined or empty."),Array.isArray(e)&&C(2===e.length,()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`),this.path=e,null!=s.requestInit&&null!=s.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=s.requestInit||{}}save(e){var s=this;return(0,O.Z)(function*(){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const r=Object.assign({method:s.DEFAULT_METHOD},s.requestInit);r.body=new FormData;const a=Kb(e,[{paths:["./model.weights.bin"],weights:e.weightSpecs}]);if(r.body.append("model.json",new Blob([JSON.stringify(a)],{type:"application/json"}),"model.json"),null!=e.weightData){const l=Es.join(e.weightData);r.body.append("model.weights.bin",new Blob([l],{type:"application/octet-stream"}),"model.weights.bin")}const i=yield s.fetch(s.path,r);if(i.ok)return{modelArtifactsInfo:uu(e),responses:[i]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${i.status}.`)})()}load(){var e=this;return(0,O.Z)(function*(){const s=yield e.fetch(e.path,e.requestInit);if(!s.ok)throw new Error(`Request to ${e.path} failed with status code ${s.status}. Please verify this URL points to the model JSON of the model to load.`);let r;try{r=yield s.json()}catch{let l=`Failed to parse model JSON of response from ${e.path}.`;throw e.path.endsWith(".pb")?l+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":l+=" Please make sure the server is serving valid JSON for this request.",new Error(l)}if(null==r.modelTopology&&null==r.weightsManifest)throw new Error(`The JSON from HTTP path ${e.path} contains neither model topology or manifest for weights.`);return vf(r,i=>e.loadWeights(i))})()}loadWeights(e){var s=this;return(0,O.Z)(function*(){const r=Array.isArray(s.path)?s.path[1]:s.path,[o,a]=function a$(n){const t=n.lastIndexOf("/"),e=n.lastIndexOf("?");return[n.substring(0,t)+"/",e>t?n.substring(e):""]}(r),i=s.weightPathPrefix||o,l=Cf(e),u=[],c=[];for(const d of e)for(const p of d.paths)null!=s.weightUrlConverter?c.push(s.weightUrlConverter(p)):u.push(i+p+a);return s.weightUrlConverter&&u.push(...yield Promise.all(c)),[l,yield c0(u,{requestInit:s.requestInit,fetchFunc:s.fetch,onProgress:s.onProgress})]})()}}return n.URL_SCHEME_REGEX=/^https?:\/\//,n})();function Hf(n){return null!=n.match(p0.URL_SCHEME_REGEX)}const f0=(n,t)=>{if(typeof fetch>"u"&&(null==t||null==t.fetchFunc))return null;{let e=!0;if(e=Array.isArray(n)?n.every(s=>Hf(s)):Hf(n),e)return jf(n,t)}return null};function jf(n,t){return new p0(n,t)}function m0(n,t){return jf(n,t)}Et.registerSaveRouter(f0),Et.registerLoadRouter(f0);class Kf{constructor(t){this.modelArtifacts=t}load(){return this.modelArtifacts}}class g0{constructor(t){this.saveHandler=t}save(t){return this.saveHandler(t)}}class i${constructor(t){t.load&&(this.load=()=>Promise.resolve(t.load())),t.save&&(this.save=e=>Promise.resolve(t.save(e)))}}function l$(n,t,e,s){return new i$(Gh(...arguments))}function Gh(n,t,e,s){return 1===arguments.length?null!=n.modelTopology||null!=n.weightSpecs?new Kf(n):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Kf({modelTopology:n})):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Kf({modelTopology:n,weightSpecs:t,weightData:e,trainingConfig:s}))}function u$(n){return new g0(n)}function c$(n){return new g0(n)}const Ke=A({matMul_:function h$(n,t,e=!1,s=!1){let r=I(n,"a","matMul"),o=I(t,"b","matMul");return[r,o]=$t(r,o),E.runKernel(tl,{a:r,b:o},{transposeA:e,transposeB:s})}}),di=A({oneHot_:function d$(n,t,e=1,s=0,r="int32"){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const a={indices:I(n,"indices","oneHot","int32")};return E.runKernel(Dl,a,{dtype:r,depth:t,onValue:e,offValue:s})}}),cu=A({imag_:function p$(n){const e={input:I(n,"input","imag")};return E.runKernel(Zc,e)}}),St=A({neg_:function f$(n){const e={x:I(n,"x","neg")};return E.runKernel(_l,e)}}),pi=A({real_:function m$(n){const e={input:I(n,"input","real")};return E.runKernel(ch,e)}}),Qe=A({transpose_:function g$(n,t,e){const s=I(n,"x","transpose");if(null==t&&(t=s.shape.map((a,i)=>i).reverse()),C(s.rank===t.length,()=>`Error in transpose: rank of input ${s.rank} must match length of perm ${t}.`),t.forEach(a=>{C(a>=0&&a<s.rank,()=>`All entries in 'perm' must be between 0 and ${s.rank-1} but got ${t}`)}),s.rank<=1)return s.clone();const r={x:s},o={perm:t};return"complex64"===s.dtype?z(()=>{let a=pi(s),i=cu(s);return a=E.runKernel(So,{x:a},o),i=E.runKernel(So,{x:i},o),e&&(i=St(i)),mr(a,i)}):E.runKernel(So,r,o)}}),x$=A({confusionMatrix_:function y$(n,t,e){const s=I(n,"labels","confusionMatrix"),r=I(t,"predictions","confusionMatrix");C(null==e||e>0&&Number.isInteger(e),()=>`If provided, numClasses must be a positive integer, but got ${e}`),C(1===s.rank,()=>`Expected the rank of labels to be 1, but got ${s.rank}`),C(1===r.rank,()=>`Expected the rank of predictions to be 1, but got ${r.rank}`),C(s.shape[0]===r.shape[0],()=>`Mismatch in the number of examples: ${s.shape[0]} vs. ${r.shape[0]}. Labels and predictions should have the same number of elements.`),C(e>0&&Number.isInteger(e),()=>`numClasses is required to be a positive integer, but got ${e}`);const o=di(de(s,"int32"),e),a=di(de(r,"int32"),e),i=Qe(o),l=Ke(i,a);return de(l,"int32")}});function qf(n,t,e){if(go(n),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const s=qs(n,e);if(3!==s.length&&1!==s.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return Mr(n,t,s,e)}let _o,y0=!1;function x0(n,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==n)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let e=!1,s=!1,r=!1,o=!1,a=!1,i=!1;if(n.data instanceof Uint8Array)e=!0;else if(typeof ImageData<"u"&&n instanceof ImageData)s=!0;else if(typeof HTMLVideoElement<"u"&&n instanceof HTMLVideoElement)r=!0;else if(typeof HTMLImageElement<"u"&&n instanceof HTMLImageElement)o=!0;else if(null!=n.getContext)a=!0;else{if(!(typeof ImageBitmap<"u"&&n instanceof ImageBitmap))throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${n.constructor.name}`);i=!0}if(null!=nu(Eh,E.backendName))return E.runKernel(Eh,{pixels:n},{numChannels:t});const[u,c]=r?[n.videoWidth,n.videoHeight]:[n.width,n.height];let h,d;if(a)h=n.getContext("2d").getImageData(0,0,u,c).data;else if(s||e)h=n.data;else if(o||r||i){if(null==_o)if(typeof document>"u"){if(!(typeof OffscreenCanvas<"u"&&typeof OffscreenCanvasRenderingContext2D<"u"))throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");_o=new OffscreenCanvas(1,1).getContext("2d")}else _o=document.createElement("canvas").getContext("2d",{willReadFrequently:!0});_o.canvas.width=u,_o.canvas.height=c,_o.drawImage(n,0,0,u,c),h=_o.getImageData(0,0,u,c).data}if(4===t)d=new Int32Array(h);else{const f=u*c;d=new Int32Array(f*t);for(let g=0;g<f;g++)for(let m=0;m<t;++m)d[g*t+m]=h[4*g+m]}return qf(d,[c,u,t],"int32")}function C$(n){return Xf.apply(this,arguments)}function Xf(){return(Xf=(0,O.Z)(function*(n,t=3){let e=null;if(B().getBool("WRAP_TO_IMAGEBITMAP")&&function S$(n){return function w$(){return typeof window<"u"&&typeof ImageBitmap<"u"&&window.hasOwnProperty("createImageBitmap")}()&&!(n instanceof ImageBitmap)&&function v$(n){return null!=n&&0!==n.width&&0!==n.height}(n)&&!function b$(n){return null!=n&&n.data instanceof Uint8Array}(n)}(n)){let s;try{s=yield createImageBitmap(n,{premultiplyAlpha:"none"})}catch{s=null}e=null!=s&&s.width===n.width&&s.height===n.height?s:n}else e=n;return x0(e,t)})).apply(this,arguments)}function b0(n){if(2!==n.rank&&3!==n.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${n.rank}.`);const t=2===n.rank?1:n.shape[2];if(t>4||2===t)throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${t}`);if("float32"!==n.dtype&&"int32"!==n.dtype)throw new Error(`Unsupported type for toPixels: ${n.dtype}. Please use float32 or int32 tensors.`)}function I$(n,t){return Zf.apply(this,arguments)}function Zf(){return(Zf=(0,O.Z)(function*(n,t){let e=I(n,"img","toPixels");if(!(n instanceof rt)){const u=e;e=de(u,"int32"),u.dispose()}b0(e);const[s,r]=e.shape.slice(0,2),o=2===e.rank?1:e.shape[2],a=yield e.data(),i="float32"===e.dtype?255:1,l=new Uint8ClampedArray(r*s*4);for(let u=0;u<s*r;++u){const c=[0,0,0,255];for(let d=0;d<o;d++){const p=a[u*o+d];if("float32"===e.dtype){if(p<0||p>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${p}.`)}else if("int32"===e.dtype&&(p<0||p>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${p}.`);1===o?(c[0]=p*i,c[1]=p*i,c[2]=p*i):c[d]=p*i}const h=4*u;l[h+0]=Math.round(c[0]),l[h+1]=Math.round(c[1]),l[h+2]=Math.round(c[2]),l[h+3]=Math.round(c[3])}if(null!=t){y0||null!=nu(Wc,E.backendName)&&(console.warn("tf.browser.toPixels is not efficient to draw tensor on canvas. Please try tf.browser.draw instead."),y0=!0),t.width=r,t.height=s;const u=t.getContext("2d"),c=new ImageData(l,r,s);u.putImageData(c,0,0)}return e!==n&&e.dispose(),l})).apply(this,arguments)}function k$(n,t,e){let s=I(n,"img","draw");if(!(n instanceof rt)){const a=s;s=de(a,"int32"),a.dispose()}b0(s),function N$(n){const t=n?.alpha||1;if(t>1||t<0)throw new Error(`Alpha value ${t} is suppoed to be in range [0 - 1].`)}(e?.imageOptions),E.runKernel(Wc,{image:s},{canvas:t,options:e})}const Yf=A({fromPixels_:x0});function Hh(n,t){const e=n.shape.length,s=t.shape.length;if(e<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${e}.`);if(s<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${s}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[s-1]>e)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[s-1]} vs. ${e}`);if(0===q(n.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${n.shape}.`);const r=t.shape,o=r[r.length-1];let a=1;for(let h=0;h<r.length-1;++h)a*=r[h];const i=n.shape,l=r.slice();l.pop();let u=1;for(let h=o;h<e;++h)u*=i[h],l.push(i[h]);const c=[...Ae(n.shape).map(h=>h/u),1].slice(0,o);return[l,a,u,c]}function Qf(n,t,e){const s=t.rank>1?t.shape[t.rank-1]:1,r=t.rank>1?t.rank-1:1,o=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${e.shape}, indices.shape: ${t.shape}, shape: ${n}, sliceDim: ${s}, and batchDim: ${r}.`;if(e.rank<r)throw new Error(o+` update.rank < ${r}. `);if(n.length<s+(e.rank-r))throw new Error(o+` Output shape length < ${s+(e.rank-r)}`);if(e.rank!==r+n.length-s)throw new Error(o+" update.rank != "+(r+n.length-s));for(let a=0;a<r;++a)if(e.shape[a]!==t.shape[a])throw new Error(o+` updates.shape[${a}] (${e.shape[a]}) != indices.shape[${a}] (${t.shape[a]}).`);for(let a=0;a<e.rank-r;++a)if(e.shape[a+r]!==n[a+s])throw new Error(o+` updates.shape[${a+r}] (${e.shape[a+r]}) != shape[${a+r}] (${n[a+r]})`)}function jh(n,t,e){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(n.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${n.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(e.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${e}`);if(0===e.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===n.size)throw new Error(`Updates specified for empty output. updates shape: ${n.shape}`)}Qf(e,t,n)}function Br(n,t,e){const s=t.shape.length,r=s>1?t.shape[s-1]:1,o=e.length;let a=1;for(let h=r;h<o;++h)a*=e[h];const i=r<1?1:r;return{sliceRank:r,numUpdates:q(t.shape)/i,sliceSize:a,strides:[...Ae(e.slice(0,r)),1],outputSize:q(e)}}const Jf=-2,T$=-1;function em(n,t,e){const s=n.shape.length;C(s===t.length,()=>`Error in slice${s}D: Length of begin ${t} must match the rank of the array (${s}).`),C(s===e.length,()=>`Error in slice${s}D: Length of size ${e} must match the rank of the array (${s}).`);for(let r=0;r<s;++r)C(t[r]+e[r]<=n.shape[r],()=>`Error in slice${s}D: begin[${r}] + size[${r}] (${t[r]+e[r]}) would overflow input.shape[${r}] (${n.shape[r]})`)}function $$(n){const t=[];let e=0;for(;n>0;)1&n&&t.push(e),n/=2,e++;return t}function tm(n,t,e){const s=[];for(let r=0;r<n.length;r++)s[r]=Math.ceil((t[r]-n[r])/e[r]);return s}function w0(n,t,e,s){const r=[...n];for(let o=r.length;o<s.length;o++)r.push(1);for(let o=0;o<e;o++)0===o?r[t]=1:(r.splice(t,0,1),r.pop());return r}function v0(n,t,e){return e<=n?e:e-(t-1)}function S0(n,t){const e=[];for(let s=0;s<n;s++)e.push(t+s);return e}function E$(n,t,e,s,r,o,a,i,l){const u=n.length;let c=new Array(u),h=new Array(u),d=new Array(u);if(t.length&&e>0){const p=t[0],f=e+1;c=C0(a,p,f,s,n),h=N0(i,p,f,r,n),d=w0(o,p,f,n)}else for(let p=0;p<u;p++)c[p]=k0(a,s,o,n,p,l),h[p]=T0(i,r,o,n,p,l),d[p]=I0(o,p,l);return{begin:c,end:h,strides:d}}function C0(n,t,e,s,r){const o=[...r],a=S0(e,t);for(let i=0;i<o.length;i++)if(a.indexOf(i)>-1)o[i]=0;else{const l=v0(t,e,i);let u=s[l];n&1<<l&&(u=0),o[i]=u}return o}function N0(n,t,e,s,r){const o=[...r],a=S0(e,t);for(let i=0;i<o.length;i++)if(a.indexOf(i)>-1)o[i]=Number.MAX_SAFE_INTEGER;else{const l=v0(t,e,i);let u=s[l];n&1<<l&&(u=Number.MAX_SAFE_INTEGER),o[i]=u}for(let i=0;i<o.length;i++)o[i]<0&&(o[i]+=r[i]),o[i]=Fr(0,o[i],r[i]);return o}function I0(n,t,e){let s=n[t];return(e&1<<t||null==s)&&(s=1),s}function k0(n,t,e,s,r,o){let a=t[r];(n&1<<r||o&1<<r||null==a)&&(a=(e[r]||1)>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const l=s[r];return a<0&&(a+=l),a=Fr(0,a,l-1),a}function T0(n,t,e,s,r,o){let a=t[r];const i=e[r]||1;(n&1<<r||o&1<<r||null==a)&&(a=i>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const l=s[r];return a<0&&(a+=l),a=i>0?Fr(0,a,l):Fr(-1,a,l-1),a}function nm(n,t,e){let s=e.length;for(let r=0;r<e.length;r++)if(e[r]>1){s=r;break}for(let r=s+1;r<e.length;r++)if(t[r]>0||e[r]!==n[r])return!1;return!0}function sm(n,t){let e=n.length>0?n[n.length-1]:1;for(let s=0;s<n.length-1;s++)e+=n[s]*t[s];return e}function Kh(n,t,e){let s;const r=n.shape.length;let o;return s="number"==typeof t?[t,...new Array(r-1).fill(0)]:t.length<r?t.concat(new Array(r-t.length).fill(0)):t.slice(),s.forEach(a=>{C(-1!==a,()=>"slice() does not support negative begin indexing.")}),o=null==e?new Array(r).fill(-1):"number"==typeof e?[e,...new Array(r-1).fill(-1)]:e.length<r?e.concat(new Array(r-e.length).fill(-1)):e,o=o.map((a,i)=>a>=0?a:(C(-1===a,()=>`Negative size values should be exactly -1 but got ${a} for the slice() size at index ${i}.`),n.shape[i]-s[i])),[s,o]}function rm(n,t,e,s,r,o,a,i,l){let u;if(null==s?(u=new Array(t.length),u.fill(1)):u=s,null!=a&&a&a-1)throw new Error("Multiple ellipses in slice is not allowed.");let c=!1;const h={dims:u.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:e.slice(),strides:u.slice(),beginMask:r,endMask:o,ellipsisMask:a,newAxisMask:i,shrinkAxisMask:l};for(let b=0;b<h.dims;b++)c&&1<<b&i&&h.numAddAxisAfterEllipsis++,1<<b&a&&(c=!0);c||(h.ellipsisMask|=1<<h.dims,h.dims++);const d={dims:n.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};!function _$(n,t){t.beginMask=0,t.endMask=0,t.shrinkAxisMask=0;let e=0;t.beginValid=null!=n.begin,t.endValid=null!=n.end,t.begin=new Array(t.dims),t.end=new Array(t.dims),t.strides=new Array(t.dims),t.finalShapeGatherIndices=[],t.finalShapeGatherIndicesSparse=[],t.inputShapeGatherIndicesSparse=new Array(t.dims);for(let s=0;s<n.dims;s++)if(1<<s&n.ellipsisMask){const r=Math.min(t.dims-(n.dims-s)+1+n.numAddAxisAfterEllipsis,t.dims);for(;e<r;e++)t.begin[e]=0,t.end[e]=0,t.strides[e]=1,t.beginMask|=1<<e,t.endMask|=1<<e,t.finalShapeGatherIndices.push(e),t.finalShapeGatherIndicesSparse.push(-1),t.inputShapeGatherIndicesSparse[e]=s}else if(1<<s&n.newAxisMask)t.finalShapeGatherIndices.push(Jf),t.finalShapeGatherIndicesSparse.push(-1);else{if(e===t.begin.length)throw Error(`Index out of range using input dim ${e}; input has only ${t.dims} dims, ${t.begin.length}.`);null!=n.begin&&(t.begin[e]=n.begin[s]),null!=n.end&&(t.end[e]=n.end[s]),t.strides[e]=n.strides[s],n.beginMask&1<<s&&(t.beginMask|=1<<e),n.endMask&1<<s&&(t.endMask|=1<<e),n.shrinkAxisMask&1<<s?(t.finalShapeGatherIndices.push(T$),t.finalShapeGatherIndicesSparse.push(-1),t.shrinkAxisMask|=1<<e):(t.finalShapeGatherIndices.push(e),t.finalShapeGatherIndicesSparse.push(s)),t.inputShapeGatherIndicesSparse[e]=s,e++}}(h,d);let p=!0,f=!0,g=!0;const m=[],y=[];for(let b=0;b<n.length;++b){if(0===d.strides[b])throw Error(`strides[${b}] must be non-zero`);const w=!!(d.shrinkAxisMask&1<<b),S=n[b];if(-1===S){m.push(w?1:-1);continue}const N=[d.beginMask&1<<b,d.endMask&1<<b],k=[d.strides[b]>0?0:-1,d.strides[b]>0?S:S-1];if(w&&d.strides[b]<=0)throw Error("only stride 1 allowed on non-range indexing.");g=g&&1===d.strides[b];const T=!!(d.beginMask&1<<b&&d.endMask&1<<b);if(d.beginValid&&d.endValid){if(w){const V=d.begin[b]<0?S+d.begin[b]:d.begin[b];if(d.begin[b]=V,d.end[b]=d.begin[b]+1,V<0||V>=S)throw Error(`slice index ${d.begin[b]} of dimension ${b} out of bounds.`)}else d.begin[b]=$0(d.begin[b],0,d.strides[b],S,N,k),d.end[b]=$0(d.end[b],1,d.strides[b],S,N,k);const M=1===d.strides[b]&&0===d.begin[b]&&d.end[b]===S;p=p&&M,f=f&&(0===b&&1===d.strides[b]||M)}else p=p&&1===d.strides[b]&&T,f=f&&(0===b&&1===d.strides[b]||T);let $,R=!1;if(d.beginValid&&d.endValid?($=d.end[b]-d.begin[b],R=!0):w?($=1,R=!0):T&&S>=0&&($=d.strides[b]<0?-S:S,R=!0),R){let M;M=0===$||$<0!=d.strides[b]<0?0:Math.trunc($/d.strides[b])+($%d.strides[b]!=0?1:0),m.push(M)}else m.push(-1)}for(let b=0;b<d.finalShapeGatherIndices.length;++b){const w=d.finalShapeGatherIndices[b];w>=0?y.push(m[w]):w===Jf&&y.push(1)}return{finalShapeSparse:y.filter((b,w)=>d.finalShapeGatherIndices[w]!==Jf),finalShape:y,isIdentity:p,sliceDim0:f,isSimpleSlice:g,begin:d.begin,end:d.end,strides:d.strides}}function $0(n,t,e,s,r,o){if(r[t])return e>0?o[t]:o[t+1&1];{const a=n<0?s+n:n;return a<o[0]?o[0]:a>o[1]?o[1]:a}}const A$=.001,E0=.1;function R$(n,t,e){return null==e&&(e=om()),am(n,t,(s,r)=>im(s,r,e))}function om(){return 32===E.backend.floatPrecision()?A$:E0}function am(n,t,e){let s=!0;if((Jt(n)||Jt(t))&&(s=!1),Jt(n)&&Jt(t)&&(s=!0),s){const a=n.constructor.name,i=t.constructor.name;if(a!==i)throw new Error(`Arrays are of different type. Actual: ${a}. Expected: ${i}`)}if(Array.isArray(n)&&Array.isArray(t)){const a=qs(n),i=qs(t);if(!Ye(a,i))throw new Error(`Arrays have different shapes. Actual: [${a}]. Expected: [${i}]`)}const r=Jt(n)?n:Ks(n),o=Jt(t)?t:Ks(t);if(r.length!==o.length)throw new Error(`Arrays have different lengths actual: ${r.length} vs expected: ${o.length}.\nActual:   ${r}.\nExpected: ${o}.`);for(let a=0;a<o.length;++a){const i=r[a],l=o[a];if(!e(i,l))throw new Error(`Arrays differ: actual[${a}] = ${i}, expected[${a}] = ${l}.\nActual:   ${r}.\nExpected: ${o}.`)}typeof expect<"u"&&expect().nothing()}function D$(n,t){n().then(()=>t.fail(),()=>t()),typeof expect<"u"&&expect().nothing()}function F$(n,t){const e="string"==typeof t||"number"==typeof t||"boolean"==typeof t?[t]:t;return Hs(n)||Hs(n[0])||Hs(t)||Hs(t[0])?am(n,e,(s,r)=>s==r):am(n,t,(s,r)=>im(s,r,0))}function O$(n,t,e){if(null==e&&(e=om()),!im(n,t,e))throw new Error(`Numbers differ: actual === ${n}, expected === ${t}`);typeof expect<"u"&&expect().nothing()}function im(n,t,e){return!isFinite(n)&&!isFinite(t)||!(isNaN(n)||isNaN(t)||Math.abs(n-t)>e)}function L$(n,t,e){for(let s=0;s<n.length;s++)if(n[s]<t||n[s]>e)throw new Error(`Value out of range:${n[s]} low: ${t}, high: ${e}`)}function P$(n,t){const e=new Float32Array(n),s=new Float32Array(t);if(e.length!==s.length)throw new Error(`Expected ArrayBuffer to be of length ${s.length}, but it was ${e.length}`);for(let r=0;r<s.length;r++)if(e[r]!==s[r])throw new Error(`Expected ArrayBuffer value at ${r} to be ${s[r]} but got ${e[r]} instead`)}function _0(n){for(let t=0;t<n.length;t++){const e=n[t];Array.isArray(e)?_0(e):n[t]=js(e)}return n}function M$(n){const t=document.createElement("video");return"playsInline"in t&&(t.playsInline=!0),t.muted=!0,t.loop=!0,t.style.position="fixed",t.style.left="0px",t.style.top="0px",t.preload="auto",t.appendChild(n),new Promise(e=>{t.addEventListener("loadeddata",s=>e(t)),t.load()})}function z$(n){return lm.apply(this,arguments)}function lm(){return(lm=(0,O.Z)(function*(n){yield n.play(),"requestVideoFrameCallback"in n&&(yield new Promise(t=>{n.requestVideoFrameCallback(t)}))})).apply(this,arguments)}const A0="4.13.0";class R0{static sgd(t){return new Uh(t)}static momentum(t,e,s=!1){return new Bf(t,e,s)}static rmsprop(t,e=.9,s=0,r=null,o=!1){return new Vf(t,e,s,r,o)}static adam(t=.001,e=.9,s=.999,r=null){return new Mf(t,e,s,r)}static adadelta(t=.001,e=.95,s=null){return new Lf(t,e,s)}static adamax(t=.002,e=.9,s=.999,r=null,o=0){return new zf(t,e,s,r,o)}static adagrad(t,e=.1){return new Pf(t,e)}}const um=A({acos_:function B$(n){const e={x:I(n,"x","acos")};return E.runKernel(ha,e)}}),cm=A({acosh_:function V$(n){const e={x:I(n,"x","acosh")};return E.runKernel(da,e)}}),D0=A({addN_:function W$(n){C(Array.isArray(n),()=>"The argument passed to tf.addN() must be a list of tensors"),C(n.length>=1,()=>`Must pass at least one tensor to tf.addN(), but got ${n.length}`);const t=n.map((r,o)=>I(r,`tensors${o}`,"addN")),e=t[0];return t.forEach(r=>{if(r.dtype!==e.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")}),t.forEach(r=>{if(!Ye(r.shape,e.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}),E.runKernel(Zi,t)}}),qh=A({all_:function U$(n,t=null,e=!1){const r={x:I(n,"x","all","bool")};return E.runKernel(Cc,r,{axis:t,keepDims:e})}}),hu=A({any_:function G$(n,t=null,e=!1){const r={x:I(n,"x","any","bool")};return E.runKernel(Nc,r,{axis:t,keepDims:e})}}),Ao=A({argMax_:function H$(n,t=0){const s={x:I(n,"x","argMax")};return E.runKernel(Yi,s,{axis:t})}}),hm=A({argMin_:function j$(n,t=0){const s={x:I(n,"x","argMin")};return E.runKernel(Qi,s,{axis:t})}}),dm=A({asin_:function K$(n){const e={x:I(n,"x","asin")};return E.runKernel(pa,e)}}),pm=A({asinh_:function q$(n){const e={x:I(n,"x","asinh")};return E.runKernel(fa,e)}}),fm=A({atan_:function X$(n){const e={x:I(n,"x","atan")};return E.runKernel(ma,e)}}),mm=A({atan2_:function Z$(n,t){let e=I(n,"a","atan2"),s=I(t,"b","atan2");return[e,s]=$t(e,s),E.runKernel(ya,{a:e,b:s})}}),gm=A({atanh_:function Y$(n){const e={x:I(n,"x","atanh")};return E.runKernel(ga,e)}});function du(n,t,e,s,r="NHWC",o){return ln(n,[...t,n[3]],e,o,s,null,null,br(r))}function bs(n,t,e,s,r,o,a="channelsLast"){const[i,l]=pu(t);let u;if("channelsLast"===a)u=[i,l,n[3],n[3]];else{if("channelsFirst"!==a)throw new Error(`Unknown dataFormat ${a}`);u=[i,l,n[1],n[1]]}return ln(n,u,e,s,r,o,!1,a)}function xr(n,t,e,s,r,o,a="NDHWC"){const[i,l,u]=xm(t);let c,h;if("NDHWC"===a)h="channelsLast",c=[i,l,u,n[4],n[4]];else{if("NCDHW"!==a)throw new Error(`Unknown dataFormat ${a}`);h="channelsFirst",c=[i,l,u,n[1],n[1]]}return Vr(n,c,e,s,r,!1,h,o)}function ln(n,t,e,s,r,o,a=!1,i="channelsLast"){let[l,u,c,h]=[-1,-1,-1,-1];if("channelsLast"===i)[l,u,c,h]=n;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[l,h,u,c]=n}const[d,p,,f]=t,[g,m]=pu(e),[y,x]=pu(s),b=fi(d,y),w=fi(p,x),{padInfo:S,outHeight:N,outWidth:k}=function eE(n,t,e,s,r,o,a,i,l){let u,c,h;if("number"==typeof n){u={top:n,bottom:n,left:n,right:n,type:0===n?"VALID":"NUMBER"};const p=function Q$(n,t,e,s,r){null==s&&(s=ym(n,t,e));const a=n[1];return[fu((n[0]-t+2*s)/e+1,r),fu((a-t+2*s)/e+1,r)]}([t,e],o,s,n,i);c=p[0],h=p[1]}else if("same"===n){c=Math.ceil(t/s),h=Math.ceil(e/r);const d=Math.max(0,(c-1)*s+o-t),p=Math.max(0,(h-1)*r+a-e),f=Math.floor(d/2),g=d-f,m=Math.floor(p/2);u={top:f,bottom:g,left:m,right:p-m,type:"SAME"}}else if("valid"===n)u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-o+1)/s),h=Math.ceil((e-a+1)/r);else{if("object"!=typeof n)throw Error(`Unknown padding parameter: ${n}`);{const d="channelsLast"===l?n[1][0]:n[2][0],p="channelsLast"===l?n[1][1]:n[2][1],f="channelsLast"===l?n[2][0]:n[3][0],g="channelsLast"===l?n[2][1]:n[3][1];u={top:d,bottom:p,left:f,right:g,type:0===d&&0===p&&0===f&&0===g?"VALID":"EXPLICIT"},c=fu((t-o+d+p)/s+1,i),h=fu((e-a+f+g)/r+1,i)}}return{padInfo:u,outHeight:c,outWidth:h}}(r,u,c,g,m,b,w,o,i),T=a?f*h:f;let $;return"channelsFirst"===i?$=[l,T,N,k]:"channelsLast"===i&&($=[l,N,k,T]),{batchSize:l,dataFormat:i,inHeight:u,inWidth:c,inChannels:h,outHeight:N,outWidth:k,outChannels:T,padInfo:S,strideHeight:g,strideWidth:m,filterHeight:d,filterWidth:p,effectiveFilterHeight:b,effectiveFilterWidth:w,dilationHeight:y,dilationWidth:x,inShape:n,outShape:$,filterShape:t}}function Vr(n,t,e,s,r,o=!1,a="channelsLast",i){let[l,u,c,h,d]=[-1,-1,-1,-1,-1];if("channelsLast"===a)[l,u,c,h,d]=n;else{if("channelsFirst"!==a)throw new Error(`Unknown dataFormat ${a}`);[l,d,u,c,h]=n}const[p,f,g,,m]=t,[y,x,b]=xm(e),[w,S,N]=xm(s),k=fi(p,w),T=fi(f,S),$=fi(g,N),{padInfo:R,outDepth:M,outHeight:V,outWidth:W}=function tE(n,t,e,s,r,o,a,i,l,u,c){let h,d,p,f;if("valid"===n&&(n=0),"number"==typeof n){h={top:n,bottom:n,left:n,right:n,front:n,back:n,type:0===n?"VALID":"NUMBER"};const m=function J$(n,t,e,s,r,o){null==r&&(r=ym(n,t[0],s[0]));const a=[0,0,0,e];for(let i=0;i<3;i++)n[i]+2*r>=t[i]&&(a[i]=fu((n[i]-t[i]+2*r)/s[i]+1,o));return a}([t,e,s,1],[i,l,u],1,[r,o,a],n,c);d=m[0],p=m[1],f=m[2]}else{if("same"!==n)throw Error(`Unknown padding parameter: ${n}`);{d=Math.ceil(t/r),p=Math.ceil(e/o),f=Math.ceil(s/a);const g=(d-1)*r+i-t,m=(p-1)*o+l-e,y=(f-1)*a+u-s,x=Math.floor(g/2),b=g-x,w=Math.floor(m/2),S=m-w,N=Math.floor(y/2);h={top:w,bottom:S,left:N,right:y-N,front:x,back:b,type:"SAME"}}}return{padInfo:h,outDepth:d,outHeight:p,outWidth:f}}(r,u,c,h,y,x,b,k,T,$,i),H=o?m*d:m;let K;return"channelsFirst"===a?K=[l,H,M,V,W]:"channelsLast"===a&&(K=[l,M,V,W,H]),{batchSize:l,dataFormat:a,inDepth:u,inHeight:c,inWidth:h,inChannels:d,outDepth:M,outHeight:V,outWidth:W,outChannels:H,padInfo:R,strideDepth:y,strideHeight:x,strideWidth:b,filterDepth:p,filterHeight:f,filterWidth:g,effectiveFilterDepth:k,effectiveFilterHeight:T,effectiveFilterWidth:$,dilationDepth:w,dilationHeight:S,dilationWidth:N,inShape:n,outShape:K,filterShape:t}}function ym(n,t,e,s=1){const r=fi(t,s);return Math.floor((n[0]*(e-1)-e+r)/2)}function pu(n){return"number"==typeof n?[n,n,n]:2===n.length?[n[0],n[1],1]:n}function xm(n){return"number"==typeof n?[n,n,n]:n}function fi(n,t){return t<=1?n:n+(n-1)*(t-1)}function fu(n,t){if(!t)return Math.trunc(n);switch(t){case"round":return Math.round(n);case"ceil":return Math.ceil(n);case"floor":return Math.floor(n);default:throw new Error(`Unknown roundingMode ${t}`)}}function Wr(n){const[t,e,s]=pu(n);return 1===t&&1===e&&1===s}function xn(n,t){return Wr(n)||Wr(t)}function Ro(n){return pu(n).every(t=>t>0)}function br(n){if("NHWC"===n)return"channelsLast";if("NCHW"===n)return"channelsFirst";throw new Error(`Unknown dataFormat ${n}`)}function An(n,t,e){if(null!=e){if("string"==typeof t)throw Error(`Error in ${n}: pad must be an integer when using dimRoundingMode ${e} but got pad ${t}.`);if("number"==typeof t)C(yo(t),()=>`Error in ${n}: pad must be an integer when using dimRoundingMode ${e} but got pad ${t}.`);else{if("object"!=typeof t)throw Error(`Error in ${n}: Unknown padding parameter: ${t}`);t.forEach(s=>{s.forEach(r=>{C(yo(r),()=>`Error in ${n}: pad must be an integer when using dimRoundingMode ${e} but got pad ${r}.`)})})}}}const F=A({reshape_:function nE(n,t){const s={x:I(n,"x","reshape","string_or_numeric")};return E.runKernel(Ml,s,{shape:t})}}),mu=A({avgPool_:function sE(n,t,e,s,r){const o=I(n,"x","avgPool","float32");C(xn(e,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${e} and dilations '1'`);let i=o,l=!1;3===o.rank&&(l=!0,i=F(o,[1,o.shape[0],o.shape[1],o.shape[2]])),C(4===i.rank,()=>`Error in avgPool: x must be rank 4 but got rank ${i.rank}.`),An("avgPool",s,r);let h=E.runKernel(Ji,{x:i},{filterSize:t,strides:e,pad:s,dimRoundingMode:r});return h=de(h,o.dtype),l?F(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),bm=A({avgPool3d_:function rE(n,t,e,s,r,o="NDHWC"){const a=I(n,"x","avgPool3d","float32");let i=a,l=!1;4===a.rank&&(l=!0,i=F(a,[1,a.shape[0],a.shape[1],a.shape[2],a.shape[3]])),C(5===i.rank,()=>`Error in avgPool3d: x must be rank 5 but got rank ${i.rank}.`),C("NDHWC"===o,()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${o}`),C("number"==typeof e&&e>0||Array.isArray(e)&&e[0]>0&&e[1]>0&&e[2]>0,()=>`Error in avgPool3d: Stride must be > 0, but got '${e}'`),An("avgPool3d",s,r);let h=E.runKernel(el,{x:i},{filterSize:t,strides:e,pad:s,dimRoundingMode:r,dataFormat:o});return h=de(h,i.dtype),l?F(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}}),Mt=A({concat_:function oE(n,t=0){C(n.length>=1,()=>"Pass at least one tensor to concat");const e=lu(n,"tensors","concat","string_or_numeric");return"complex64"===e[0].dtype&&e.forEach(o=>{if("complex64"!==o.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${o.dtype}. `)}),1===e.length?Zs(e[0]):E.runKernel(ol,e,{axis:t})}}),As=A({sigmoid_:function aE(n){const e={x:I(n,"x","sigmoid","float32")};return E.runKernel(Ya,e)}}),et=A({slice_:function iE(n,t,e){const s=I(n,"x","slice","string_or_numeric");if(0===s.rank)throw new Error("Slicing scalar is not possible");return E.runKernel(Ul,{x:s},{begin:t,size:e})}}),Do=A({tanh_:function lE(n){const e={x:I(n,"x","tanh","float32")};return E.runKernel(si,e)}}),F0=A({basicLSTMCell_:function uE(n,t,e,s,r,o){const a=I(n,"forgetBias","basicLSTMCell"),i=I(t,"lstmKernel","basicLSTMCell"),l=I(e,"lstmBias","basicLSTMCell"),u=I(s,"data","basicLSTMCell"),c=I(r,"c","basicLSTMCell"),h=I(o,"h","basicLSTMCell"),d=Mt([u,h],1),p=Ke(d,i),f=ne(p,l),m=f.shape[1]/4,y=[f.shape[0],m],x=et(f,[0,0],y),b=et(f,[0,m],y),w=et(f,[0,2*m],y),S=et(f,[0,3*m],y),N=ne(D(As(x),Do(b)),D(c,As(ne(a,w))));return[N,D(Do(N),As(S))]}}),gu=A({batchToSpaceND_:function cE(n,t,e){const s=I(n,"x","batchToSpaceND"),r=t.reduce((i,l)=>i*l);return C(s.rank>=1+t.length,()=>`input rank is ${s.rank} but should be > than blockShape.length ${t.length}`),C(e.length===t.length,()=>`crops.length is ${e.length} but should be equal to blockShape.length  ${t.length}`),C(s.shape[0]%r==0,()=>`input tensor batch is ${s.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${r}`),E.runKernel(nl,{x:s},{blockShape:t,crops:e})}});function hE(n){let t;return t=0===n.rank||1===n.rank?F(n,[1,1,1,n.size]):2===n.rank?F(n,[1,1,n.shape[0],n.shape[1]]):3===n.rank?F(n,[1,n.shape[0],n.shape[1],n.shape[2]]):n,t}const mi=A({batchNorm_:function dE(n,t,e,s,r,o){null==o&&(o=.001);const a=I(n,"x","batchNorm"),i=I(t,"mean","batchNorm"),l=I(e,"variance","batchNorm");let u,c;null!=r&&(u=I(r,"scale","batchNorm")),null!=s&&(c=I(s,"offset","batchNorm")),C(i.rank===l.rank,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),C(null==c||i.rank===c.rank,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),C(null==u||i.rank===u.rank,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");const d={x:hE(a),scale:u,offset:c,mean:i,variance:l},f=E.runKernel(fl,d,{varianceEpsilon:o});return F(f,a.shape)}}),wm=A({batchNorm2d_:function pE(n,t,e,s,r,o){const a=I(n,"x","batchNorm"),i=I(t,"mean","batchNorm"),l=I(e,"variance","batchNorm");let u,c;return null!=r&&(u=I(r,"scale","batchNorm")),null!=s&&(c=I(s,"offset","batchNorm")),C(2===a.rank,()=>`Error in batchNorm2D: x must be rank 2 but got rank ${a.rank}.`),C(2===i.rank||1===i.rank,()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${i.rank}.`),C(2===l.rank||1===l.rank,()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`),null!=u&&C(2===u.rank||1===u.rank,()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`),null!=c&&C(2===c.rank||1===c.rank,()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`),mi(a,i,l,c,u,o)}}),vm=A({batchNorm3d_:function fE(n,t,e,s,r,o){const a=I(n,"x","batchNorm"),i=I(t,"mean","batchNorm"),l=I(e,"variance","batchNorm");let u,c;return null!=r&&(u=I(r,"scale","batchNorm")),null!=s&&(c=I(s,"offset","batchNorm")),C(3===a.rank,()=>`Error in batchNorm3D: x must be rank 3 but got rank ${a.rank}.`),C(3===i.rank||1===i.rank,()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${i.rank}.`),C(3===l.rank||1===l.rank,()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`),null!=u&&C(3===u.rank||1===u.rank,()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`),null!=c&&C(3===c.rank||1===c.rank,()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`),mi(a,i,l,c,u,o)}}),Sm=A({batchNorm4d_:function mE(n,t,e,s,r,o){const a=I(n,"x","batchNorm"),i=I(t,"mean","batchNorm"),l=I(e,"variance","batchNorm");let u,c;return null!=r&&(u=I(r,"scale","batchNorm")),null!=s&&(c=I(s,"offset","batchNorm")),C(4===a.rank,()=>`Error in batchNorm4D: x must be rank 4 but got rank ${a.rank}.`),C(4===i.rank||1===i.rank,()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${i.rank}.`),C(4===l.rank||1===l.rank,()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`),null!=u&&C(4===u.rank||1===u.rank,()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`),null!=c&&C(4===c.rank||1===c.rank,()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`),mi(a,i,l,c,u,o)}}),Cm=A({bincount_:function gE(n,t,e){const s=I(n,"x","bincount"),r=I(t,"weights","bincount");return C("int32"===s.dtype,()=>`Error in bincount: input dtype must be int32, but got ${s.dtype}`),C(e>=0,()=>`size must be non-negative, but got ${e}.`),C(r.size===s.size||0===r.size,()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${s.shape}, weights shape: ${r.shape}.`),E.runKernel(Tc,{x:s,weights:r},{size:e})}}),O0=A({bitwiseAnd_:function yE(n,t){const e=I(n,"x","bitwiseAnd"),s=I(t,"y","bitwiseAnd");if(!Ye(e.shape,s.shape))throw new Error(`BitwiseAnd: Tensors must have the same shape. x: ${e.shape}, y: ${s.shape}`);if("int32"!==e.dtype||"int32"!==s.dtype)throw new Error(`BitwiseAnd: Only supports 'int32' values in tensor, found type of x: ${e.dtype} and type of y: ${s.dtype}`);return E.runKernel(sl,{a:e,b:s})}}),L0=A({broadcastArgs_:function xE(n,t){const e=I(n,"s0","broadcastArgs","int32"),s=I(t,"s1","broadcastArgs","int32");if(1!==e.rank)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${e.rank}`);if(1!==s.rank)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${s.rank}`);return E.runKernel($c,{s0:e,s1:s})}}),Fo=A({broadcastTo_:function bE(n,t){let e=I(n,"broadcastTo","x");const s=e.shape;if(qn(t),t.length<e.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${e.rank}.`);if(t.length>e.rank){const u=e.shape.slice();for(;u.length<t.length;)u.unshift(1);e=F(e,u)}const r=e.shape,o=Array.from(t);for(let u=t.length-1;u>=0;u--)if(r[u]===t[u])o[u]=1;else if(1!==e.shape[u])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${t}].`);return 0===o.map((u,c)=>u>1?c:-1).filter(u=>u>=0).length?Zs(e):E.runKernel(ri,{x:e},{reps:o})}}),Nm=A({ceil_:function wE(n){const e={x:I(n,"x","ceil","float32")};return E.runKernel(ba,e)}}),zn=A({clipByValue_:function vE(n,t,e){const s=I(n,"x","clipByValue");return C(t<=e,()=>`Error in clip: min (${t}) must be less than or equal to max (${e}).`),t===e?$o(s.shape,t,s.dtype):E.runKernel(wa,{x:s},{clipValueMin:t,clipValueMax:e})}}),Im=A({concat1d_:function SE(n){return Mt(n,0)}}),km=A({concat2d_:function CE(n,t){return Mt(n,t)}}),Tm=A({concat3d_:function NE(n,t){return Mt(n,t)}}),$m=A({concat4d_:function IE(n,t){return Mt(n,t)}}),wr=A({conv2d_:function kE(n,t,e,s,r="NHWC",o=[1,1],a){const i=I(n,"x","conv2d","float32"),l=I(t,"filter","conv2d","float32");let u=i,c=!1;3===i.rank&&(c=!0,u=F(i,[1,i.shape[0],i.shape[1],i.shape[2]])),C(4===u.rank,()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`),C(4===l.rank,()=>`Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`),An("conv2d",s,a);const h="NHWC"===r?u.shape[3]:u.shape[1];C(h===l.shape[2],()=>`Error in conv2d: depth of input (${h}) must match input depth for filter ${l.shape[2]}.`),C(xn(e,o),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${e} and dilations '${o}'`),C(Ro(o),()=>"Error in conv2D: Dilated rates should be larger than 0."),C(Ro(e),()=>"Error in conv2D: Strides should be larger than 0.");const f=E.runKernel(al,{x:u,filter:l},{strides:e,pad:s,dataFormat:r,dilations:o,dimRoundingMode:a});return c?F(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),Xh=A({conv1d_:function TE(n,t,e,s,r="NWC",o=1,a){const i=I(n,"x","conv1d"),l=I(t,"filter","conv1d");let u=i,c=!1;2===i.rank&&(c=!0,u=F(i,[1,i.shape[0],i.shape[1]])),C(3===u.rank,()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`),C(3===l.rank,()=>`Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`),An("conv1d",s,a),C(u.shape[2]===l.shape[1],()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`),C(xn(e,o),()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${e} and dilation '${o}'`),C(Ro(o),()=>"Error in conv1D: Dilated rates should be larger than 0."),C(Ro(e),()=>"Error in conv1D: Stride should be larger than 0."),C("NWC"===r,()=>`Error in conv1d: got dataFormat of ${r} but only NWC is currently supported.`);const h=F(l,[1,l.shape[0],l.shape[1],l.shape[2]]),d=F(u,[u.shape[0],1,u.shape[1],u.shape[2]]),m=wr(d,h,[1,e],s,"NHWC",[1,o],a);return F(m,c?[m.shape[2],m.shape[3]]:[m.shape[0],m.shape[2],m.shape[3]])}}),Em=A({conv2DBackpropInput_:function $E(n,t,e,s,r,o="NHWC",a){C(n.length===t.rank,()=>`Length of inShape (${n.length}) and rank of dy (${t.rank}) must match`);let i=n,l=t,u=!1;3===t.rank&&(u=!0,l=F(t,[1,t.shape[0],t.shape[1],t.shape[2]]),i=[1,n[0],n[1],n[2]]),C(4===i.length,()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${i.length}.`),C(4===l.rank,()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`),C(4===e.rank,()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${e.rank}`);const c="NHWC"===o?i[3]:i[1],h="NHWC"===o?l.shape[3]:l.shape[1];C(c===e.shape[2],()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${e.shape[2]}.`),C(h===e.shape[3],()=>`Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${e.shape[3]}.`),An("conv2dDerInput",r,a);const f=E.runKernel(il,{dy:l,filter:e},{strides:s,pad:r,dataFormat:o,dimRoundingMode:a,inputShape:i});return u?F(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),Zh=A({conv2dTranspose_:function EE(n,t,e,s,r,o){const a=I(n,"x","conv2dTranspose"),i=I(t,"filter","conv2dTranspose");return Em(e,a,i,s,r,"NHWC",o)}}),_m=A({conv3d_:function _E(n,t,e,s,r="NDHWC",o=[1,1,1]){const a=I(n,"x","conv3d"),i=I(t,"filter","conv3d");let l=a,u=!1;4===a.rank&&(u=!0,l=F(a,[1,a.shape[0],a.shape[1],a.shape[2],a.shape[3]])),C(5===l.rank,()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`),C(5===i.rank,()=>`Error in conv3d: filter must be rank 5, but got rank ${i.rank}.`),C(l.shape[4]===i.shape[3],()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${i.shape[3]}.`),C(xn(e,o),()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${e} and dilations '${o}'`),C("NDHWC"===r,()=>`Error in conv3d: got dataFormat of ${r} but only NDHWC is currently supported.`),C(Ro(o),()=>"Error in conv3D: Dilated rates should be larger than 0."),C(Ro(e),()=>"Error in conv3D: Strides should be larger than 0.");const d=E.runKernel(ll,{x:l,filter:i},{strides:e,pad:s,dataFormat:r,dilations:o});return u?F(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),P0=A({conv3DBackpropInput_:function AE(n,t,e,s,r){C(n.length===t.rank,()=>`Length of inShape (${n.length}) and rank of dy (${t.rank}) must match`);let o=n,a=t,i=!1;4===t.rank&&(i=!0,a=F(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),o=[1,n[0],n[1],n[2],n[3]]);const l=o[4],u=a.shape[4];C(5===o.length,()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${o.length}.`),C(5===a.rank,()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${a.rank}`),C(5===e.rank,()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${e.rank}`),C(l===e.shape[3],()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${e.shape[3]}.`),C(u===e.shape[4],()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${e.shape[4]}.`);const d=E.runKernel(Rc,{dy:a,filter:e},{pad:r,strides:s,inputShape:o});return i?F(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),Am=A({conv3dTranspose_:function RE(n,t,e,s,r){const o=I(n,"x","conv3dTranspose"),a=I(t,"filter","conv3dTranspose");return P0(e,o,a,s,r)}}),yu=A({cos_:function DE(n){const e={x:I(n,"x","cos","float32")};return E.runKernel(va,e)}}),Yh=A({cosh_:function FE(n){const e={x:I(n,"x","cosh","float32")};return E.runKernel(Sa,e)}}),xu=A({cumprod_:function OE(n,t=0,e=!1,s=!1){const o={x:I(n,"x","cumprod")};return E.runKernel(Dc,o,{axis:t,exclusive:e,reverse:s})}}),Qh=A({cumsum_:function LE(n,t=0,e=!1,s=!1){const o={x:I(n,"x","cumsum")};return E.runKernel(ul,o,{axis:t,exclusive:e,reverse:s})}}),Jh=A({denseBincount_:function PE(n,t,e,s=!1){const r=I(n,"x","denseBincount"),o=I(t,"weights","denseBincount");return C("int32"===r.dtype,()=>`Error in denseBincount: input dtype must be int32, but got ${r.dtype}`),C(r.rank<=2,()=>`Error in denseBincount: input must be at most rank 2, but got rank ${r.rank}.`),C(e>=0,()=>`size must be non-negative, but got ${e}.`),C(o.size===r.size||0===o.size,()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${r.shape}, weights shape: ${o.shape}.`),E.runKernel(Oc,{x:r,weights:o},{size:e,binaryOutput:s})}}),Rm=A({depthToSpace_:function ME(n,t,e="NHWC"){const s=I(n,"x","depthToSpace","float32"),r="NHWC"===e?s.shape[1]:s.shape[2],o="NHWC"===e?s.shape[2]:s.shape[3],a="NHWC"===e?s.shape[3]:s.shape[1];return C(t>1,()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`),C(r*t>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${r} and ${t}  for depthToSpace with input shape\n    ${s.shape}`),C(o*t>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${o} and ${t} for depthToSpace with input shape\n        ${s.shape}`),C(a%(t*t)==0,()=>`Dimension size must be evenly divisible by ${t*t} but is ${a} for depthToSpace with input shape ${s.shape}`),E.runKernel(Lc,{x:s},{blockSize:t,dataFormat:e})}}),gi=A({depthwiseConv2d_:function zE(n,t,e,s,r="NHWC",o=[1,1],a){const i=I(n,"x","depthwiseConv2d","float32"),l=I(t,"filter","depthwiseConv2d","float32");let u=i,c=!1;3===i.rank&&(c=!0,u=F(i,[1,i.shape[0],i.shape[1],i.shape[2]])),C(4===u.rank,()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`),C(4===l.rank,()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`);const h="NHWC"===r?u.shape[3]:u.shape[1];C(h===l.shape[2],()=>`Error in depthwiseConv2d: number of input channels (${h}) must match the inChannels dimension in filter ${l.shape[2]}.`),An("depthwiseConv2d",s,a);const f=E.runKernel(cl,{x:u,filter:l},{strides:e,pad:s,dataFormat:r,dilations:o,dimRoundingMode:a});return c?F(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),M0=A({diag_:function BE(n){const e={x:I(n,"x","diag")};return E.runKernel(zc,e)}}),Dm=A({dilation2d_:function VE(n,t,e,s,r=[1,1],o="NHWC"){const a=I(n,"x","dilation2d"),i=I(t,"filter","dilation2d");C(3===a.rank||4===a.rank,()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${a.rank}.`),C(3===i.rank,()=>`Error in dilation2d: filter must be rank 3, but got rank ${i.rank}.`),C("NHWC"===o,()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${o}`);let l=a,u=!1;3===a.rank&&(l=F(a,[1,a.shape[0],a.shape[1],a.shape[2]]),u=!0),C(l.shape[3]===i.shape[2],()=>`Error in dilation2d:  input and filter must have the same depth: ${l.shape[3]} vs ${i.shape[2]}`);const d=E.runKernel(hl,{x:l,filter:i},{strides:e,pad:s,dilations:r});return u?F(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),Zn=A({equal_:function WE(n,t){let e=I(n,"a","equal","string_or_numeric"),s=I(t,"b","equal","string_or_numeric");return[e,s]=$t(e,s),Ve(e.shape,s.shape),E.runKernel(dl,{a:e,b:s})}}),un=A({where_:function UE(n,t,e){const s=I(t,"a","where"),r=I(e,"b","where"),o=I(n,"condition","where","bool"),a=Ve(Ve(o.shape,s.shape),r.shape),i=Fo(o,a),l=Fo(s,a),u=Fo(r,a);return E.runKernel(Wl,{condition:i,t:l,e:u})}}),Fm=A({divNoNan_:function GE(n,t){let e=I(n,"a","div"),s=I(t,"b","div");[e,s]=$t(e,s);const r=$e(e,s),o=Je(r),a=Zn(s,o);return un(a,o,r)}}),Om=A({dot_:function HE(n,t){const e=I(n,"t1","dot"),s=I(t,"t2","dot");C(!(1!==e.rank&&2!==e.rank||1!==s.rank&&2!==s.rank),()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${e.rank} and ${s.rank}.`);const r=1===e.rank?e.size:e.shape[1],o=1===s.rank?s.size:s.shape[0];if(C(r===o,()=>`Error in dot: inner dimensions of inputs must match, but got ${r} and ${o}.`),1===e.rank&&1===s.rank){const a=F(e,[1,-1]),i=F(s,[-1,1]),l=Ke(a,i);return F(l,[])}if(1===e.rank&&2===s.rank){const a=F(e,[1,-1]),i=F(s,[s.shape[0],s.shape[1]]),l=Ke(a,i);return F(l,[l.size])}if(2===e.rank&&1===s.rank){const a=F(s,[-1,1]),i=Ke(e,a);return F(i,[i.size])}{const a=F(s,[s.shape[0],s.shape[1]]);return Ke(e,a)}}}),Oo=A({einsum_:function jE(n,...t){const e=t.map((r,o)=>I(r,`tensors${o}`,"einsum"));return E.runKernel(Uc,e,{equation:n})}}),yi=A({elu_:function KE(n){const e={x:I(n,"x","elu","float32")};return E.runKernel(Na,e)}}),z0=A({ensureShape_:function qE(n,t){const e=I(n,"x","ensureShape","string_or_numeric");if(!lb(e.shape,t))throw new Error(`EnsureShape: Shape of tensor ${e.shape} is not compatible with expected shape ${t}`);return n}}),Lm=A({erf_:function XE(n){let t=I(n,"x","erf");return C("int32"===t.dtype||"float32"===t.dtype,()=>"Input dtype must be `int32` or `float32`."),"int32"===t.dtype&&(t=de(t,"float32")),E.runKernel(Ia,{x:t})}});function Pm(n,t){for(let e=0;e<n.length;++e)if(n[n.length-e-1]!==t-1-e)return!1;return!0}function B0(n,t,e){const s=n.length+t.length,r=[];let o=0,a=0;for(let i=0;i<s;i++)-1===e.indexOf(i)?r.push(n[o++]):r.push(t[a++]);return r}function cn(n,t){const e=[],s=n.length;for(let o=0;o<s;o++)-1===t.indexOf(o)&&e.push(n[o]);return[e,t.map(o=>n[o])]}function zt(n,t){return B0(n,t.map(s=>1),t)}function bn(n,t,e){C(Pm(t,e),()=>`${n} supports only inner-most axes for now. Got axes ${t} and rank-${e} input.`)}function _t(n,t){if(Pm(n,t))return null;const e=[];for(let s=0;s<t;++s)-1===n.indexOf(s)&&e.push(s);return n.forEach(s=>e.push(s)),e}function Ur(n){return n.map((t,e)=>[e,t]).sort((t,e)=>t[1]-e[1]).map(t=>t[0])}function Bt(n,t){const e=[];for(let s=t-n;s<t;++s)e.push(s);return e}const ls=A({max_:function ZE(n,t=null,e=!1){const r={x:I(n,"x","max")};return E.runKernel(Nl,r,{reductionIndices:t,keepDims:e})}}),xi=A({min_:function YE(n,t=null,e=!1){const r={x:I(n,"x","min")};return E.runKernel($l,r,{axis:t,keepDims:e})}}),ve=A({sum_:function QE(n,t=null,e=!1){let s=I(n,"x","sum");return"bool"===s.dtype&&(s=de(s,"int32")),E.runKernel(Gl,{x:s},{axis:t,keepDims:e})}});function V0(n,t,e=null){if(0===n.rank)return jt(n);if(1!==n.rank&&null===e)return V0(F(n,[-1]),t,e);if(1===n.rank||"number"==typeof e||Array.isArray(e)&&1===e.length){if(1===t)return ve(jt(n),e);if(t===1/0)return ls(jt(n),e);if(t===-1/0)return xi(jt(n),e);if("euclidean"===t||2===t)return yn(ve(yr(jt(n),_e(2,"int32")),e));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(e)&&2===e.length){if(1===t)return ls(ve(jt(n),e[0]),e[1]-1);if(t===1/0)return ls(ve(jt(n),e[1]),e[0]);if(t===-1/0)return xi(ve(jt(n),e[1]),e[0]);if("fro"===t||"euclidean"===t)return yn(ve(gt(n),e));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${e}`)}const bi=A({norm_:function JE(n,t="euclidean",e=null,s=!1){const r=V0(n=I(n,"x","norm"),t,e);let o=r.shape;if(s){const a=je(e,n.shape);o=zt(r.shape,a)}return F(r,o)}}),Mm=A({euclideanNorm_:function e_(n,t=null,e=!1){return bi(n,"euclidean",t,e)}}),Bn=A({exp_:function t_(n){const e={x:I(n,"x","exp")};return E.runKernel(ka,e)}}),wn=A({expandDims_:function n_(n,t=0){const e=I(n,"x","expandDims","string_or_numeric");return C(t<=e.rank,()=>"Axis must be <= rank of the tensor"),E.runKernel(pl,{input:e},{dim:t})}}),zm=A({expm1_:function s_(n){const e={x:I(n,"x","expm1")};return E.runKernel(Ta,e)}}),us=A({tile_:function r_(n,t){const e=I(n,"x","tile","string_or_numeric");return C(e.rank===t.length,()=>`Error in transpose: rank of input ${e.rank} must match length of reps ${t}.`),E.runKernel(ri,{x:e},{reps:t})}}),ed=A({eye_:function o_(n,t,e,s="float32"){null==t&&(t=n);const r=Ge([n,t],s),o=n<=t?n:t;for(let i=0;i<o;++i)r.set(1,i,i);const a=F(r.toTensor(),[n,t]);if(null==e)return a;if(1===e.length)return us(wn(a,0),[e[0],1,1]);if(2===e.length)return us(wn(wn(a,0),0),[e[0],e[1],1,1]);if(3===e.length)return us(wn(wn(wn(a,0),0),0),[e[0],e[1],e[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${e.length}D.`)}}),wi=A({floor_:function a_(n){const e={x:I(n,"x","floor","float32")};return E.runKernel($a,e)}}),vi=A({gather_:function i_(n,t,e=0,s=0){const r=I(n,"x","gather"),o=I(t,"indices","gather","int32");return E.runKernel(ml,{x:r,indices:o},{axis:e,batchDims:s})}}),Rn=A({greater_:function l_(n,t){let e=I(n,"a","greater","string_or_numeric"),s=I(t,"b","greater","string_or_numeric");return[e,s]=$t(e,s),Ve(e.shape,s.shape),E.runKernel(gl,{a:e,b:s})}}),vr=A({greaterEqual_:function u_(n,t){let e=I(n,"a","greaterEqual","string_or_numeric"),s=I(t,"b","greaterEqual","string_or_numeric");return[e,s]=$t(e,s),Ve(e.shape,s.shape),E.runKernel(_a,{a:e,b:s})}}),Bm=A({isFinite_:function c_(n){const e={x:I(n,"x","isFinite")};return E.runKernel(Ra,e)}}),Vm=A({isInf_:function h_(n){const e={x:I(n,"x","isInf")};return E.runKernel(Da,e)}}),Wm=A({isNaN_:function d_(n){const e={x:I(n,"x","isNaN")};return E.runKernel(Fa,e)}}),bu=A({leakyRelu_:function p_(n,t=.2){const s={x:I(n,"x","leakyRelu")};return E.runKernel(yl,s,{alpha:t})}}),Si=A({less_:function f_(n,t){let e=I(n,"a","less","string_or_numeric"),s=I(t,"b","less","string_or_numeric");return[e,s]=$t(e,s),Ve(e.shape,s.shape),E.runKernel(xl,{a:e,b:s})}}),Gr=A({lessEqual_:function m_(n,t){let e=I(n,"a","lessEqual","string_or_numeric"),s=I(t,"b","lessEqual","string_or_numeric");return[e,s]=$t(e,s),Ve(e.shape,s.shape),E.runKernel(bl,{a:e,b:s})}});function W0(n,t,e){if(e<=0)throw new Error("The number of values should be positive.");return E.runKernel(Yc,{},{start:n,stop:t,num:e})}const Um=A({localResponseNormalization_:function g_(n,t=5,e=1,s=1,r=.5){const o=I(n,"x","localResponseNormalization");C(4===o.rank||3===o.rank,()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${o.rank}.`),C(yo(t),()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`);let a=o,i=!1;3===o.rank&&(i=!0,a=F(o,[1,o.shape[0],o.shape[1],o.shape[2]]));const c=E.runKernel(Cl,{x:a},{depthRadius:t,bias:e,alpha:s,beta:r});return i?F(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),Yn=A({log_:function y_(n){const e={x:I(n,"x","log","float32")};return E.runKernel(Oa,e)}}),wu=A({log1p_:function x_(n){const e={x:I(n,"x","log1p")};return E.runKernel(La,e)}}),Lo=A({softplus_:function b_(n){const e={x:I(n,"x","softplus")};return E.runKernel(Qa,e)}}),Gm=A({logSigmoid_:function w_(n){const t=I(n,"x","logSigmoid");return Ys(s=>({value:St(Lo(St(s))),gradFunc:a=>D(a,As(St(s)))}))(t)}}),td=A({logSoftmax_:function v_(n,t=-1){const e=I(n,"logits","logSoftmax");if(-1===t&&(t=e.rank-1),t!==e.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${e.rank} and axis was ${t}`);return Ys((r,o)=>{const i=ls(r,t,!0),l=be(r,i),u=be(de(l,"float32"),Yn(ve(Bn(l),t,!0)));return o([u]),{value:u,gradFunc:(h,d)=>{const[p]=d,g=Bn(p);return be(h,D(ve(h,t,!0),g))}}})(e)}}),vu=A({logSumExp_:function S_(n,t=null,e=!1){const s=I(n,"x","logSumExp"),r=je(t,s.shape),o=ls(s,r,!0),a=be(s,o),i=Bn(a),l=ve(i,r),u=Yn(l),c=ne(F(o,u.shape),u);if(e){const h=zt(c.shape,r);return F(c,h)}return c}}),ws=A({logicalAnd_:function C_(n,t){const e=I(n,"a","logicalAnd","bool"),s=I(t,"b","logicalAnd","bool");return Ve(e.shape,s.shape),E.runKernel(wl,{a:e,b:s})}}),Su=A({logicalNot_:function N_(n){const e={x:I(n,"x","logicalNot","bool")};return E.runKernel(vl,e)}}),nd=A({logicalOr_:function I_(n,t){const e=I(n,"a","logicalOr","bool"),s=I(t,"b","logicalOr","bool");return Ve(e.shape,s.shape),E.runKernel(Sl,{a:e,b:s})}}),Hm=A({logicalXor_:function k_(n,t){const e=I(n,"a","logicalXor","bool"),s=I(t,"b","logicalXor","bool");return Ve(e.shape,s.shape),ws(nd(n,t),Su(ws(n,t)))}}),sd=2147483648,rd=A({searchSorted_:function T_(n,t,e="left"){const s=I(n,"sortedSequence","searchSorted"),r=I(t,"values","searchSorted"),a=r.shape[r.shape.length-1],i=F(s,[-1,s.shape[s.shape.length-1]]),l=F(r,[-1,a]);if(i.rank<2)throw new Error("Sorted input argument must be at least 2-dimensional");if(i.shape[0]!==l.shape[0])throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");if(q(l.shape)>=sd)throw new Error(`values tensor size must less than ${sd}`);if(i.shape[1]>=sd)throw new Error(`trailing dim_size must less than ${sd} for int32 output type, was ${i.shape[1]}`);return E.runKernel(mh,{sortedSequence:i,values:l},{side:e})}});function U0(n,t){return rd(n,t,"left")}const Cu=A({maxPool_:function $_(n,t,e,s,r){const o=I(n,"x","maxPool");let i=o,l=!1;3===o.rank&&(l=!0,i=F(o,[1,o.shape[0],o.shape[1],o.shape[2]])),C(4===i.rank,()=>`Error in maxPool: input must be rank 4 but got rank ${i.rank}.`),C(xn(e,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${e} and dilations '1'`),An("maxPool",s,r);const h=E.runKernel(Il,{x:i},{filterSize:t,strides:e,pad:s,dimRoundingMode:r});return l?F(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),jm=A({maxPool3d_:function E_(n,t=[1,1,1],e,s,r,o="NDHWC"){const a=I(n,"x","maxPool3d");let i=a,l=!1;4===a.rank&&(l=!0,i=F(a,[1,a.shape[0],a.shape[1],a.shape[2],a.shape[3]])),C(5===i.rank,()=>`Error in maxPool3d: x must be rank 5 but got rank ${i.rank}.`),C("NDHWC"===o,()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${o}`),An("maxPool3d",s,r);const h=E.runKernel(kl,{x:i},{filterSize:t,strides:e,pad:s,dimRoundingMode:r,dataFormat:o});return l?F(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}}),G0=A({maxPoolWithArgmax_:function __(n,t,e,s,r=!1){const a={x:I(n,"x","maxPoolWithArgmax")},l=E.runKernel(th,a,{filterSize:t,strides:e,pad:s,includeBatchInIndex:r});return{result:l[0],indexes:l[1]}}}),At=A({mean_:function A_(n,t=null,e=!1){const r={x:I(n,"x","mean")};return E.runKernel(Tl,r,{axis:t,keepDims:e})}});function qt(n,t="float32"){if(qn(n),"complex64"===t){const s=qt(n,"float32"),r=qt(n,"float32");return mr(s,r)}const e=mn(q(n),t);return E.makeTensor(e,n,t)}function Vn(n,t="float32"){if(qn(n),"complex64"===t){const s=Vn(n,"float32"),r=qt(n,"float32");return mr(s,r)}const e=Sc(q(n),t);return E.makeTensor(e,n,t)}function H0(n,t,{indexing:e="xy"}={}){if("xy"!==e&&"ij"!==e)throw new TypeError(`${e} is not a valid third argument to meshgrid`);if(void 0===n)return[];let s=I(n,"x","meshgrid",n instanceof rt?n.dtype:"float32");if(void 0===t)return[s];let r=I(t,"y","meshgrid",t instanceof rt?t.dtype:"float32");const o=q(s.shape),a=q(r.shape);return"xy"===e?(s=F(s,[1,-1]),r=F(r,[-1,1]),[Ke(Vn([a,1],s.dtype),s),Ke(r,Vn([1,o],r.dtype))]):(s=F(s,[-1,1]),r=F(r,[1,-1]),[Ke(s,Vn([1,a],s.dtype)),Ke(Vn([o,1],r.dtype),r)])}const Hr=A({minimum_:function R_(n,t){let e=I(n,"a","minimum"),s=I(t,"b","minimum");return[e,s]=$t(e,s),"bool"===e.dtype&&(e=de(e,"int32"),s=de(s,"int32")),Ve(e.shape,s.shape),E.runKernel(Ma,{a:e,b:s})}}),Km=A({mirrorPad_:function D_(n,t,e){C("reflect"===e||"symmetric"===e,()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${e}.`);const s=I(n,"x","mirrorPad");if(0===s.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");C(t.length===s.rank,()=>`Padding doesn't match input. Must be ${s.rank}. Got ${t.length}.`);const r="reflect"===e?1:0;for(let i=0;i<s.rank;i++)C(2===t[i].length,()=>"Invalid number of paddings. Must be length of 2 each."),C(t[i][0]>=0&&t[i][0]<=s.shape[i]-r&&t[i][1]>=0&&t[i][1]<=s.shape[i]-r,()=>`Padding in dimension ${i} cannot be greater than or equal to ${s.shape[i]-r} or less than 0 for input of shape ${s.shape}`);return E.runKernel(El,{x:s},{paddings:t,mode:e})}}),qm=A({mod_:function F_(n,t){let e=I(n,"a","mod"),s=I(t,"b","mod");return[e,s]=$t(e,s),E.runKernel(za,{a:e,b:s})}}),Nu=A({moments_:function O_(n,t=null,e=!1){const s=je(t,(n=I(n,"x","moments")).shape),r=At(n,s,e);let o=r.shape;e||(o=zt(r.shape,s));const a=gt(be(de(n,"float32"),F(r,o)));return{mean:r,variance:At(a,s,e)}}}),j0=A({multiRNNCell_:function L_(n,t,e,s){const r=I(t,"data","multiRNNCell"),o=lu(e,"c","multiRNNCell"),a=lu(s,"h","multiRNNCell");let i=r;const l=[];for(let h=0;h<n.length;h++){const d=n[h](i,o[h],a[h]);l.push(d[0]),l.push(d[1]),i=d[1]}const u=[],c=[];for(let h=0;h<l.length;h+=2)u.push(l[h]),c.push(l[h+1]);return[u,c]}}),K0=A({multinomial_:function P_(n,t,e,s=!1){const r=I(n,"logits","multinomial"),o=r.size,a=r.rank;if(o<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${o}.`);if(a>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${a}`);e=e||Math.random();const l={logits:1===a?F(r,[1,-1]):r},c=E.runKernel(nh,l,{numSamples:t,seed:e,normalized:s});return 1===a?F(c,[c.size]):c}}),Po=A({notEqual_:function M_(n,t){let e=I(n,"a","notEqual","string_or_numeric"),s=I(t,"b","notEqual","string_or_numeric");return[e,s]=$t(e,s),Ve(e.shape,s.shape),E.runKernel(Al,{a:e,b:s})}}),Qn=A({onesLike_:function z_(n){const e={x:I(n,"x","onesLike")};return E.runKernel(Rl,e)}}),q0=A({outerProduct_:function B_(n,t){const e=I(n,"v1","outerProduct"),s=I(t,"v2","outerProduct");C(1===e.rank&&1===s.rank,()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${e.rank} and ${s.rank}.`);const r=F(e,[-1,1]),o=F(s,[1,-1]);return Ke(r,o)}}),Sr=A({pad_:function V_(n,t,e=0){const s=I(n,"x","pad");if(0===s.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");return E.runKernel(Ol,{x:s},{paddings:t,constantValue:e})}}),X0=A({pad1d_:function W_(n,t,e=0){return C(2===t.length,()=>"Invalid number of paddings. Must be length of 2."),Sr(n,[t],e)}}),Z0=A({pad2d_:function U_(n,t,e=0){return C(2===t.length&&2===t[0].length&&2===t[1].length,()=>"Invalid number of paddings. Must be length of 2 each."),Sr(n,t,e)}}),Y0=A({pad3d_:function G_(n,t,e=0){return C(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,()=>"Invalid number of paddings. Must be length of 2 each."),Sr(n,t,e)}}),Q0=A({pad4d_:function H_(n,t,e=0){return C(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,()=>"Invalid number of paddings. Must be length of 2 each."),Sr(n,t,e)}}),Iu=A({spaceToBatchND_:function j_(n,t,e){const s=I(n,"x","spaceToBatchND");return C(s.rank>=1+t.length,()=>`input rank ${s.rank} should be > than [blockShape] ${t.length}`),C(e.length===t.length,()=>`paddings.shape[0] ${e.length} must be equal to [blockShape] ${t.length}`),C(s.shape.reduce((a,i,l)=>l>0&&l<=t.length?a&&(i+e[l-1][0]+e[l-1][1])%t[l-1]==0:a,!0),()=>`input spatial dimensions ${s.shape.slice(1)} with paddings ${e.toString()} must be divisible by blockShapes ${t.toString()}`),E.runKernel(Hl,{x:s},{blockShape:t,paddings:e})}}),Xm=A({pool_:function K_(n,t,e,s,r,o,a){null==r&&(r=[1,1]),null==o&&(o=1),0===s&&(s="valid");const i=I(n,"x","maxPool");let l=i,u=!1;3===i.rank&&(u=!0,l=F(i,[1,i.shape[0],i.shape[1],i.shape[2]])),C(xn(o,r),()=>`Error in pool: Either strides or dilations must be 1. Got strides ${o} and dilations '${r}'`);const c=bs(l.shape,t,o,r,s),h=[c.dilationHeight,c.dilationWidth];let d;d="same"===s?function X_(n,t){const s=n.map((a,i)=>a+(a-1)*(t[i]-1)).map(a=>a-1),r=s.map(a=>Math.floor(a/2)),o=s.map((a,i)=>a-r[i]);return s.map((a,i)=>[r[i],o[i]])}([c.filterHeight,c.filterWidth],h):[[0,0],[0,0]];const p=1===h[0]&&1===h[1],[f,g]=function q_(n,t,e){const s=e.map(c=>c[0]),r=e.map(c=>c[1]),o=n.concat(s,r),a=t.map((c,h)=>(c-o[h]%c)%c),i=r.map((c,h)=>c+a[h]),l=t.map((c,h)=>[s[h],i[h]]),u=t.map((c,h)=>[0,a[h]]);return[l,u]}([c.inHeight,c.inWidth],h,d),m=p?s:"valid",y=p?l:Iu(l,h,f),b=("avg"===e?()=>mu(y,t,o,m,a):()=>Cu(y,t,o,m,a))(),w=p?b:gu(b,h,g);return u?F(w,[w.shape[1],w.shape[2],w.shape[3]]):w}}),ku=A({prelu_:function Z_(n,t){const e=I(n,"x","prelu"),s=I(t,"alpha","prelu");return E.runKernel(Ll,{x:e,alpha:s})}}),Zm=A({prod_:function Y_(n,t=null,e=!1){let s=I(n,"x","prod");return"bool"===s.dtype&&(s=de(s,"int32")),E.runKernel(Pl,{x:s},{axis:t,keepDims:e})}}),J0=A({raggedGather_:function Q_(n,t,e,s){const r=n.map((c,h)=>I(c,`tensors${h}`,"raggedGather","int32")),o=I(t,"paramsDenseValues","raggedGather"),a=I(e,"indices","raggedGather","int32"),u=E.runKernel(ah,{paramsNestedSplits:r,paramsDenseValues:o,indices:a},{outputRaggedRank:s});return{outputNestedSplits:u.slice(0,u.length-1),outputDenseValues:u[u.length-1]}}}),ew=A({raggedRange_:function J_(n,t,e){const s=I(n,"starts","raggedRange"),r=I(t,"limits","raggedRange",s.dtype),o=I(e,"deltas","raggedRange",s.dtype),i=E.runKernel(ih,{starts:s,limits:r,deltas:o});return{rtNestedSplits:i[0],rtDenseValues:i[1]}}}),tw=A({raggedTensorToTensor_:function eA(n,t,e,s,r){const o=I(n,"shape","raggedTensorToTensor","int32"),a=I(t,"values","raggedTensorToTensor"),i=I(e,"defaultValue","raggedTensorToTensor",a.dtype),l=s.map((h,d)=>I(h,`tensors${d}`,"raggedTensorToTensor","int32"));return E.runKernel(lh,{shape:o,values:a,defaultValue:i,rowPartitionTensors:l},{rowPartitionTypes:r})}}),nw=A({rand_:function tA(n,t,e){qn(n);const s=q(n);let r=null;if(null==e||"float32"===e)r=new Float32Array(s);else if("int32"===e)r=new Int32Array(s);else{if("bool"!==e)throw new Error(`Unknown data type ${e}`);r=new Uint8Array(s)}for(let o=0;o<s;o++)r[o]=t();return E.makeTensor(r,n,e)}});var Ci=P(9128);class Ym{constructor(t,e,s,r,o){this.mean=t,this.stdDev=e,this.dtype=s,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=o||Math.random();this.random=Ci.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const r=this.nextVal;return this.nextVal=NaN,r}let t,e,s=!1;for(;!s;){let r,o,a;do{r=2*this.random()-1,o=2*this.random()-1,a=r*r+o*o}while(a>=1||0===a);const i=Math.sqrt(-2*Math.log(a)/a);t=this.mean+this.stdDev*r*i,e=this.mean+this.stdDev*o*i,(!this.truncated||this.isValidTruncated(t))&&(s=!0)}return(!this.truncated||this.isValidTruncated(e))&&(this.nextVal=this.convertValue(e)),this.convertValue(t)}convertValue(t){return null==this.dtype||"float32"===this.dtype?t:Math.round(t)}isValidTruncated(t){return t<=this.upper&&t>=this.lower}}class nA{constructor(t,e,s,r){this.alpha=t,this.beta=1/e,this.dtype=s;const o=r||Math.random();this.randu=Ci.alea(o.toString()),this.randn=new Ym(0,1,s,!1,this.randu()),this.d=t<1?t+.6666666666666666:t-.3333333333333333,this.c=1/Math.sqrt(9*this.d)}nextValue(){let t,e,s,r,o,a;for(;;){do{r=this.randn.nextValue(),a=1+this.c*r}while(a<=0);if(a*=a*a,t=r*r,e=1-.331*t*t,s=.5*t+this.d*(1-a+Math.log(a)),o=this.randu(),o<e||Math.log(o)<s)break}return a*=1/this.beta*this.d,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)}convertValue(t){return"float32"===this.dtype?t:Math.round(t)}}class sA{constructor(t=0,e=1,s,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=t,this.range=e-t,this.dtype=s,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${t} - ${e} <= 1 and dtype is not float`);this.random=Ci.alea(r)}convertValue(t){return this.canReturnFloat()?t:Math.round(t)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const sw=A({randomGamma_:function iA(n,t,e=1,s="float32",r){if(qn(n),null==e&&(e=1),null==s&&(s="float32"),"float32"!==s&&"int32"!==s)throw new Error(`Unsupported data type ${s}`);const o=new nA(t,e,s,r),a=Ge(n,s);for(let i=0;i<a.values.length;i++)a.values[i]=o.nextValue();return a.toTensor()}}),Tu=A({randomNormal_:function lA(n,t=0,e=1,s,r){if(qn(n),null!=s&&"bool"===s)throw new Error(`Unsupported data type ${s}`);const o=new Ym(t,e,s,!1,r),a=Ge(n,s);for(let i=0;i<a.values.length;i++)a.values[i]=o.nextValue();return a.toTensor()}}),rw=A({randomStandardNormal_:function uA(n,t,e){if(null!=t&&"bool"===t)throw new Error(`Unsupported data type ${t}`);return Tu(n,0,1,t,e)}}),jr=A({randomUniform_:function cA(n,t=0,e=1,s="float32",r){qn(n);const o=Ge(n,s),a=new sA(t,e,null,r);for(let i=0;i<o.values.length;i++)o.values[i]=a.nextValue();return o.toTensor()}}),ow=A({randomUniformInt_:function hA(n,t,e,s){return jr(n,t,e,"int32",s)}});function Mo(n,t,e=1,s="float32"){if(0===e)throw new Error("Cannot have a step of zero");return E.runKernel(uh,{},{start:n,stop:t,step:e,dtype:s})}const Jm=A({reciprocal_:function dA(n){const e={x:I(n,"x","reciprocal")};return E.runKernel(Wa,e)}}),Rs=A({relu_:function pA(n){const e={x:I(n,"x","relu")};return E.runKernel(Ua,e)}}),od=A({relu6_:function fA(n){const e={x:I(n,"x","relu6")};return E.runKernel(Ga,e)}}),cs=A({reverse_:function mA(n,t){const s={x:I(n,"x","reverse")};return E.runKernel(Vl,s,{dims:t})}}),aw=A({reverse1d_:function gA(n){const t=I(n,"x","reverse");return C(1===t.rank,()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`),cs(t,0)}}),iw=A({reverse2d_:function yA(n,t){const e=I(n,"x","reverse");return C(2===e.rank,()=>`Error in reverse2D: x must be rank 2 but got rank ${e.rank}.`),cs(e,t)}}),lw=A({reverse3d_:function xA(n,t){const e=I(n,"x","reverse");return C(3===e.rank,()=>`Error in reverse3D: x must be rank 3 but got rank ${e.rank}.`),cs(e,t)}}),uw=A({reverse4d_:function bA(n,t){const e=I(n,"x","reverse");return C(4===e.rank,()=>`Error in reverse4D: x must be rank 4 but got rank ${e.rank}.`),cs(e,t)}}),ad=A({round_:function wA(n){const e={x:I(n,"x","round")};return E.runKernel(Ha,e)}}),id=A({rsqrt_:function vA(n){const e={x:I(n,"x","rsqrt","float32")};return E.runKernel(ja,e)}}),ld=A({selu_:function SA(n){const e={x:I(n,"x","selu")};return E.runKernel(Ka,e)}}),ud=A({separableConv2d_:function CA(n,t,e,s,r,o=[1,1],a="NHWC"){const i=I(n,"x","separableConv2d"),l=I(t,"depthwiseFilter","separableConv2d"),u=I(e,"pointwiseFilter","separableConv2d");let c=i,h=!1;if(3===i.rank&&(h=!0,c=F(i,[1,i.shape[0],i.shape[1],i.shape[2]])),"NCHW"===a)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");C(4===c.rank,()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`),C(4===l.rank,()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`),C(4===u.rank,()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`),C(1===u.shape[0],()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`),C(1===u.shape[1],()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`);const d=l.shape[2],p=l.shape[3];C(u.shape[2]===d*p,()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${d*p}, but got ${u.shape[2]}.`);const f=gi(c,l,s,r,a,o),m=wr(f,u,1,"valid",a);return h?F(m,[m.shape[1],m.shape[2],m.shape[3]]):m}});function eg(){return(eg=(0,O.Z)(function*(n,t){const e=I(n,"x","setdiff1d"),s=I(t,"y","setdiff1d");C(e.dtype===s.dtype,()=>`x and y should have the same dtype, but got x (${e.dtype}) and y (${s.dtype}).`),C(1===e.rank,()=>`x should be 1D tensor, but got x (${e.shape}).`),C(1===s.rank,()=>`y should be 1D tensor, but got y (${s.shape}).`);const r=yield e.data(),o=yield s.data(),a=new Set(o);let i=0;for(let c=0;c<r.length;c++)a.has(r[c])||i++;const l=new Ht([i],e.dtype),u=new Ht([i],"int32");for(let c=0,h=0;c<r.length;c++)a.has(r[c])||(l.values[h]=r[c],u.values[h]=c,h++);return[l.toTensor(),u.toTensor()]})).apply(this,arguments)}const cw=function NA(n,t){return eg.apply(this,arguments)},tg=A({sign_:function IA(n){const e={x:I(n,"x","sign")};return E.runKernel(Za,e)}}),cd=A({sin_:function kA(n){const e={x:I(n,"x","sin","float32")};return E.runKernel(qa,e)}}),hd=A({sinh_:function TA(n){const e={x:I(n,"x","sinh")};return E.runKernel(Xa,e)}}),$u=A({slice1d_:function $A(n,t,e){const s=I(n,"x","slice1d");return C(1===s.rank,()=>`slice1d expects a rank-1 tensor, but got a rank-${s.rank} tensor`),et(s,[t],[e])}}),dd=A({slice2d_:function EA(n,t,e){const s=I(n,"x","slice2d");return C(2===s.rank,()=>`slice2d expects a rank-2 tensor, but got a rank-${s.rank} tensor`),et(s,t,e)}}),Eu=A({slice3d_:function _A(n,t,e){const s=I(n,"x","slice3d");return C(3===s.rank,()=>`slice3d expects a rank-3 tensor, but got a rank-${s.rank} tensor`),et(s,t,e)}}),Ni=A({slice4d_:function AA(n,t,e){const s=I(n,"x","slice4d");return C(4===s.rank,()=>`slice4d expects a rank-4 tensor, but got a rank-${s.rank} tensor`),et(s,t,e)}}),_u=A({softmax_:function RA(n,t=-1){const e=I(n,"logits","softmax","float32");if(-1===t&&(t=e.rank-1),t!==e.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${e.rank} and dim was ${t}`);return E.runKernel(Kl,{logits:e},{dim:t})}}),Au=A({fft_:function DA(n){return C("complex64"===n.dtype,()=>`The dtype for tf.spectral.fft() must be complex64 but got ${n.dtype}.`),E.runKernel(Hc,{input:n})}}),Ii=A({ifft_:function FA(n){return C("complex64"===n.dtype,()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${n.dtype}.`),E.runKernel(Xc,{input:n})}}),pd=A({irfft_:function OA(n){const t=n.shape[n.shape.length-1],e=n.size/t;let s;if(t<=2){const r=F(n,[e,t]);s=Ii(r)}else{const r=[e,2*(t-1)],o=F(pi(n),[e,t]),a=F(cu(n),[e,t]),i=cs(et(o,[0,1],[e,t-2]),1),l=D(cs(et(a,[0,1],[e,t-2]),1),_e(-1)),u=Mt([o,i],1),c=Mt([a,l],1),h=F(mr(u,c),[r[0],r[1]]);s=Ii(h)}if(s=pi(s),3===n.rank&&0!==n.shape[0]){const r=s,o=n.shape[0];s=F(s,[o,s.shape[0]/o,s.shape[1]]),r.dispose()}return s}}),Wn=A({split_:function LA(n,t,e=0){const r={x:I(n,"x","split")};return E.runKernel(jl,r,{numOrSizeSplits:t,axis:e})}}),Ru=A({rfft_:function PA(n,t){C("float32"===n.dtype,()=>`The dtype for rfft() must be real value but got ${n.dtype}`);let e=n.shape[n.shape.length-1];const s=n.size/e;let r;if(null!=t&&t<e){const f=n.shape.map(m=>0),g=n.shape.map(m=>m);g[n.shape.length-1]=t,r=et(n,f,g),e=t}else if(null!=t&&t>e){const f=n.shape.map(g=>g);f[n.shape.length-1]=t-e,r=Mt([n,qt(f)],n.shape.length-1),e=t}else r=n;const o=Je(r),a=F(mr(r,o),[s,e]),i=Au(a),l=Math.floor(e/2)+1,u=pi(i),c=cu(i),h=Wn(u,[l,e-l],u.shape.length-1),d=Wn(c,[l,e-l],c.shape.length-1),p=r.shape.slice();return p[r.shape.length-1]=l,F(mr(h[0],d[0]),p)}}),fd=A({squaredDifference_:function MA(n,t){let e=I(n,"a","squaredDifference"),s=I(t,"b","squaredDifference");return[e,s]=$t(e,s),Ve(e.shape,s.shape),E.runKernel(ei,{a:e,b:s},{})}}),Kr=A({squeeze_:function zA(n,t){const e=I(n,"x","squeeze","string_or_numeric");return F(e,cr(e.shape,t).newShape)}}),Dn=A({stack_:function BA(n,t=0){const e=lu(n,"tensors","stack","string_or_numeric");return C(e.length>=1,()=>"Pass at least one tensor to tf.stack"),e.length>0&&C(t<=e[0].rank,()=>"Axis must be <= rank of the tensor"),E.runKernel(Fl,e,{axis:t})}}),zo=A({step_:function VA(n,t=0){const s={x:I(n,"x","step")};return E.runKernel(oi,s,{alpha:t})}}),ng=A({stridedSlice_:function WA(n,t,e,s,r=0,o=0,a=0,i=0,l=0){const c={x:I(n,"x","stridedSlice","string_or_numeric")};return E.runKernel(Sh,c,{begin:t,end:e,strides:s,beginMask:r,endMask:o,ellipsisMask:a,newAxisMask:i,shrinkAxisMask:l})}}),sg=A({tan_:function UA(n){const e={x:I(n,"x","tan","float32")};return E.runKernel(ni,e)}});function vn(n,t){go(n);const e=qs(n,t);if(1!==e.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return Mr(n,null,e,t)}function qr(n,t,e){if(go(n),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const s=qs(n,e);if(2!==s.length&&1!==s.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return Mr(n,t,s,e)}function hw(n,t,e){if(go(n),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const s=qs(n,e);if(4!==s.length&&1!==s.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return Mr(n,t,s,e)}function dw(n,t,e){if(go(n),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const s=qs(n,e);if(5!==s.length&&1!==s.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return Mr(n,t,s,e)}function pw(n,t,e){if(go(n),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const s=qs(n,e);if(6!==s.length&&1!==s.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return Mr(n,t=t||s,s,e)}const fw=A({tensorScatterUpdate_:function GA(n,t,e){const s=I(n,"tensor","tensorScatterupdate"),r=I(t,"indices","tensorScatterupdate","int32"),o=I(e,"updates","tensorScatterupdate");if(jh(o,r,s.shape),s.dtype!==o.dtype)throw new Error(`tensor and updates must have the same dtype, instead they are ${s.dtype} and ${o.dtype}.`);return E.runKernel(fh,{tensor:s,indices:r,updates:o},{})}}),rg=A({topk_:function HA(n,t=1,e=!0){const s=I(n,"x","topk");if(0===s.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const r=s.shape[s.shape.length-1];if(t<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>r)throw new Error(`'k' passed to topk() must be <= the last dimension (${r}) but got ${t}`);const o={x:s},a={k:t,sorted:e},[i,l]=E.runKernel(kh,o,a);return{values:i,indices:l}}}),md=A({truncatedNormal_:function jA(n,t=0,e=1,s,r){if(qn(n),null!=s&&"bool"===s)throw new Error("Unsupported data type $ { dtype }");const o=new Ym(t,e,s,!0,r),a=Ge(n,s);for(let i=0;i<a.values.length;i++)a.values[i]=o.nextValue();return a.toTensor()}}),og=A({unique_:function KA(n,t=0){const e=I(n,"x","unique","string_or_numeric");C(e.rank>0,()=>"The input tensor must be at least 1D");const s={x:e},r={axis:t},[o,a]=E.runKernel($h,s,r);return{values:o,indices:a}}}),gd=A({unsortedSegmentSum_:function qA(n,t,e){const s=I(n,"x","unsortedSegmentSum"),r=I(t,"segmentIds","unsortedSegmentSum","int32");return C(yo(e),()=>"numSegments must be of dtype int"),E.runKernel(Zl,{x:s,segmentIds:r},{numSegments:e})}}),hs=A({unstack_:function XA(n,t=0){const e=I(n,"x","unstack","string_or_numeric");return C(t>=-e.shape.length&&t<e.shape.length,()=>`Axis = ${t} is not in [-${e.shape.length}, ${e.shape.length})`),E.runKernel(Xl,{value:e},{axis:t})}});function mw(n,t){return rd(n,t,"right")}function ag(n,t=!0,e,s){return E.makeVariable(n,t,e,s)}function yd(n,t){const e=[];for(let o=0;o<t.length;o++)t[o]&&e.push(o);const s=Ge(n,"int32"),r=Ge([e.length,n.length],"int32");for(let o=0;o<e.length;o++){const a=s.indexToLoc(e[o]);r.values.set(a,o*n.length)}return r.toTensor()}function ig(){return(ig=(0,O.Z)(function*(n){const t=I(n,"condition","whereAsync","bool"),e=yield t.data(),s=yd(t.shape,e);return n!==t&&t.dispose(),s})).apply(this,arguments)}const lg=function ZA(n){return ig.apply(this,arguments)};function ug(){return(ug=(0,O.Z)(function*(n,t,e){const s=I(n,"tensor","boolMask"),r=I(t,"mask","boolMask","bool"),o=e??0,a=r.rank,i=s.shape;C(a>0,()=>"mask cannot be scalar"),fn(i.slice(o,o+a),r.shape,"mask's shape must match the first K dimensions of tensor's shape,");let l=1;for(let g=o;g<o+a;g++)l*=i[g];const u=i.slice(0,o).concat([l],i.slice(o+a)),c=F(s,u),h=F(r,[-1]),d=yield lg(h),p=Kr(d,[1]),f=vi(c,p,o);return n!==s&&s.dispose(),t!==r&&r.dispose(),p.dispose(),c.dispose(),h.dispose(),d.dispose(),f})).apply(this,arguments)}const gw=function YA(n,t,e){return ug.apply(this,arguments)},yw=A({movingAverage_:function QA(n,t,e,s,r=!0){const o=I(n,"v","movingAverage"),a=I(t,"x","movingAverage"),i=I(e,"decay","movingAverage");Mb(o,a),C(Ye(o.shape,a.shape),()=>"Shape mismatch in v and x");const l=_e(1),u=be(l,i);let c=D(be(a,o),u);if(r){C(null!=s,()=>"When using zeroDebias: true, step is required.");const h=I(s,"step","movingAverage");c=$e(c,be(l,yr(i,h)))}return ne(o,c)}}),xw=A({scatterND_:function JA(n,t,e){qn(e);const s=I(n,"indices","scatterND","int32"),r=I(t,"updates","scatterND");return jh(r,s,e),E.runKernel(ph,{indices:s,updates:r},{shape:e})}}),bw=A({sparseToDense_:function tR(n,t,e,s=0){qn(e);const r=I(n,"sparseIndices","sparseToDense","int32"),o=I(t,"sparseValues","sparseToDense","string_or_numeric"),a=I(s,"defaultValue","sparseToDense",o.dtype);return function eR(n,t,e,s){if("int32"!==n.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${n.dtype}.`);if(n.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${n.shape}.`);const r=n.rank>0?n.shape[0]:1,o=n.rank>1?n.shape[1]:1;if(e.length!==o)throw new Error(`outputShape has incorrect number of elements:, ${e.length}, should be: ${o}.`);if(0!==t.rank&&(1!==t.rank||t.size!==r))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${r}]`);if(t.dtype!==s.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(r,o,e,a),E.runKernel(wh,{sparseIndices:r,sparseValues:o,defaultValue:a},{outputShape:e})}}),ww=A({gatherND_:function nR(n,t){const e=I(t,"indices","gatherND","int32"),r={params:I(n,"x","gatherND","string_or_numeric"),indices:e};return E.runKernel(qc,r)}}),cg=A({dropout_:function rR(n,t,e,s){const r=I(n,"x","dropout");if(C("float32"===r.dtype,()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${r.dtype} tensor instead.`),C(t>=0&&t<1,()=>`rate must be a float in the range [0, 1), but got ${t}.`),0===t)return n instanceof rt?r.clone():r;const o=function sR(n,t){if(null==t)return n.shape.slice();if(Ye(n.shape,t))return t;if(n.shape.length===t.length){const e=[];for(let s=0;s<n.shape.length;s++)e.push(null==t[s]&&null!=n.shape[s]?n.shape[s]:t[s]);return e}return t}(r,e),a=1-t,i=$e(wi(ne(jr(o,0,1,"float32",s),a)),a);return D(r,i)}});function hg(n){return Math.floor(Math.pow(2,Math.ceil(Math.log(n)/Math.log(2))))}function xd(n,t,e){const s=1-n%2,r=new Float32Array(n);for(let o=0;o<n;++o){const a=2*Math.PI*o/(n+s-1);r[o]=t-e*Math.cos(a)}return vn(r,"float32")}function dg(){return(dg=(0,O.Z)(function*(n,t,e=1){const s=I(n,"predictions","inTopK"),r=I(t,"targets","inTopK");C(s.rank>1,()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${s.rank}`),C(s.rank-1===r.rank,()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${s.rank} and targets rank ${r.rank}`),fn(s.shape.slice(0,s.shape.length-1),r.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const o=s.shape[s.shape.length-1];C(e>0&&e<=o,()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${o}), but got ${e}`);const a=yield s.data(),i=yield r.data(),[l,u]=[a.length/o,o],c=on("bool",l);for(let h=0;h<l;h++){const d=h*u,p=a.subarray(d,d+u),f=[];for(let g=0;g<p.length;g++)f.push({value:p[g],index:g});f.sort((g,m)=>m.value-g.value),c[h]=0;for(let g=0;g<e;g++)if(f[g].index===i[h]){c[h]=1;break}}return n!==s&&s.dispose(),t!==r&&r.dispose(),Xn(c,r.shape,"bool")})).apply(this,arguments)}const vw=function oR(n,t){return dg.apply(this,arguments)},pg=A({conv2DBackpropFilter_:function aR(n,t,e,s,r,o="NHWC",a){let i=n;3===n.rank&&(i=F(n,[1,n.shape[0],n.shape[1],n.shape[2]]));let l=t;3===l.rank&&(l=F(t,[1,t.shape[0],t.shape[1],t.shape[2]])),C(4===i.rank,()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${i.shape}.`),C(4===l.rank,()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`),C(4===e.length,()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${e}.`);const u="NHWC"===o?i.shape[3]:i.shape[1],c="NHWC"===o?l.shape[3]:l.shape[1];return C(u===e[2],()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${e[2]}.`),C(c===e[3],()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${e[3]}).`),An("conv2dDerFilter",r,a),E.runKernel(_c,{x:i,dy:l},{strides:s,pad:r,dataFormat:o,dimRoundingMode:a,filterShape:e})}});function bd(n,t,e){if(null==e||"linear"===e)return n;if("relu"===e)return D(n,zo(t));throw new Error(`Cannot compute gradient for fused activation ${e}.`)}function wd(n,t){let e=t;const s=Kt(n.shape,t.shape);return s.length>0&&(e=ve(e,s)),F(e,n.shape)}function vd(n,t,e,s){if("linear"===t)return n;if("relu"===t)return Rs(n);if("elu"===t)return yi(n);if("relu6"===t)return od(n);if("prelu"===t)return ku(n,e);if("leakyrelu"===t)return bu(n,s);if("sigmoid"===t)return As(n);throw new Error(`Unknown fused activation ${t}.`)}const Sd=(n,t)=>!(n>0)||"linear"===t,Sw=A({fusedConv2d_:function iR({x:n,filter:t,strides:e,pad:s,dataFormat:r="NHWC",dilations:o=[1,1],dimRoundingMode:a,bias:i,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(!1===Sd(E.state.gradientDepth,l=l||"linear")){C("NHWC"===r,()=>`Error in fused conv2d: got dataFormat of ${r} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`);let N=wr(n,t,e,s,r,o,a);return null!=i&&(N=ne(N,i)),vd(N,l,u,c)}const h=I(n,"x","conv2d","float32"),d=I(t,"filter","conv2d","float32");let p=h,f=!1;3===h.rank&&(f=!0,p=F(h,[1,h.shape[0],h.shape[1],h.shape[2]])),C(4===p.rank,()=>`Error in fused conv2d: input must be rank 4, but got rank ${p.rank}.`),C(4===d.rank,()=>`Error in fused conv2d: filter must be rank 4, but got rank ${d.rank}.`),An("fused conv2d",s,a);const g="NHWC"===r?p.shape[3]:p.shape[1];C(d.shape[2]===g,()=>`Error in conv2d: depth of input (${g}) must match input depth for filter ${d.shape[2]}.`),C(xn(e,o),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${e} and dilations '${o}'`);const m=ln(p.shape,d.shape,e,o,s,a);let y,x;if(null!=i&&(y=I(i,"bias","fused conv2d"),[y]=$t(y,h),"NHWC"===r?Ve(m.outShape,y.shape):(C(y.shape.length<=1,()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${y.shape.length}.`),C(0===y.shape.length||y.shape[0]===m.outChannels||1===y.shape[0],()=>`Error in fused conv2d: bias shape (${y.shape}) is not compatible with the number of output channels (${m.outChannels})`))),null!=u){const N=u.shape;if(C(N.length<=1||3===N.length,()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${N.length}.`),1===N.length)C(1===N[0]||N[0]===m.outChannels,()=>`Error in fused conv2d: PReLU activation weights (${N}) is not compatible with the number of output channels (${m.outChannels}).`);else if(3===N.length)try{Ve(N,m.outShape)}catch{throw Error(`Error in fused conv2d: PReLU activation weights (${N}) is not compatible with the output shape of the conv2d (${m.outShape}).`)}x=I(u,"prelu weights","fused conv2d")}const b=(N,k)=>{C("NHWC"===r,()=>`Error in gradient of fused conv2D: got dataFormat of ${r} but only NHWC is currently supported.`);const[T,$,R,M]=k,V=bd(N,R,l);C(Wr(o),()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${o}'`);const K=[Em($.shape,V,T,e,s),pg($,V,T.shape,e,s)];if(null!=M){const U=wd(M,V);K.push(U)}return K},w={x:p,filter:d,bias:y,preluActivationWeights:x},S={strides:e,pad:s,dataFormat:r,dilations:o,dimRoundingMode:a,activation:l,leakyreluAlpha:c};return null==i?Ys((k,T,$)=>{let R=E.runKernel(Jl,w,S);return $([T,k,R]),f&&(R=F(R,[R.shape[1],R.shape[2],R.shape[3]])),{value:R,gradFunc:b}})(p,d):Ys((k,T,$,R)=>{let M=E.runKernel(Jl,w,S);return R([T,k,M,$]),f&&(M=F(M,[M.shape[1],M.shape[2],M.shape[3]])),{value:M,gradFunc:b}})(p,d,y)}}),Cw=A({depthwiseConv2dNativeBackpropFilter_:function lR(n,t,e,s,r,o=[1,1],a){let i=n;3===n.rank&&(i=F(n,[1,n.shape[0],n.shape[1],n.shape[2]]));let l=t;return 3===l.rank&&(l=F(t,[1,t.shape[0],t.shape[1],t.shape[2]])),E.runKernel(Pc,{x:i,dy:l},{strides:s,pad:r,dimRoundingMode:a,dilations:o,filterShape:e})}}),Nw=A({depthwiseConv2dNativeBackpropInput_:function uR(n,t,e,s,r,o=[1,1],a){let i=t,l=!1;3===t.rank&&(l=!0,i=F(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const h=E.runKernel(Mc,{dy:i,filter:e},{strides:s,pad:r,dimRoundingMode:a,dilations:o,inputShape:n});return l?F(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),hR=A({fusedDepthwiseConv2d_:function cR({x:n,filter:t,strides:e,pad:s,dataFormat:r="NHWC",dilations:o=[1,1],dimRoundingMode:a,bias:i,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(!1===Sd(E.state.gradientDepth,l)){let S=gi(n,t,e,s,r,o,a);return null!=i&&(S=ne(S,i)),vd(S,l,u,c)}const h=I(n,"x","depthwiseConv2d","float32"),d=I(t,"filter","depthwiseConv2d","float32");let p=h,f=!1;3===h.rank&&(f=!0,p=F(h,[1,h.shape[0],h.shape[1],h.shape[2]])),C(4===p.rank,()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${p.rank}.`),C(4===d.rank,()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${d.rank}.`),C(p.shape[3]===d.shape[2],()=>`Error in fused depthwiseConv2d: number of input channels (${p.shape[3]}) must match the inChannels dimension in filter ${d.shape[2]}.`),null==o&&(o=[1,1]),C(xn(e,o),()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${e} and dilations '${o}'`),An("fused depthwiseConv2d",s,a);const g=ln(p.shape,d.shape,e,o,s,a,!0);let m,y;null!=i&&(m=I(i,"bias","fused conv2d"),[m]=$t(m,h),Ve(g.outShape,m.shape)),null!=u&&(y=I(u,"prelu weights","fused depthwiseConv2d"));const x=(S,N)=>{C(Wr(o),()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`);const[k,T,$,R]=N,M=bd(S,$,l),V=Nw(T.shape,M,k,e,s,o,a),W=Cw(T,M,k.shape,e,s,o,a);return null!=R?[V,W,wd(m,M)]:[V,W]},b={x:p,filter:d,bias:m,preluActivationWeights:y},w={strides:e,pad:s,dataFormat:r,dilations:o,dimRoundingMode:a,activation:l,leakyreluAlpha:c};return null==i?Ys((N,k,T)=>{let $=E.runKernel(eu,b,w);return T([k,N,$]),f&&($=F($,[$.shape[1],$.shape[2],$.shape[3]])),{value:$,gradFunc:x}})(p,d):Ys((N,k,T,$)=>{let R=E.runKernel(eu,b,w);return $([k,N,R,T]),f&&(R=F(R,[R.shape[1],R.shape[2],R.shape[3]])),{value:R,gradFunc:x}})(p,d,m)}}),fg=A({fusedMatMul_:function dR({a:n,b:t,transposeA:e=!1,transposeB:s=!1,bias:r,activation:o="linear",preluActivationWeights:a,leakyreluAlpha:i=.2}){if(!1===Sd(E.state.gradientDepth,o)){let M=Ke(n,t,e,s);return null!=r&&(M=ne(M,r)),vd(M,o,a,i)}let l=I(n,"a","fused matMul"),u=I(t,"b","fused matMul");[l,u]=$t(l,u);const c=e?l.shape[l.rank-2]:l.shape[l.rank-1],h=s?u.shape[u.rank-1]:u.shape[u.rank-2],d=e?l.shape[l.rank-1]:l.shape[l.rank-2],p=s?u.shape[u.rank-2]:u.shape[u.rank-1],f=l.shape.slice(0,-2),g=u.shape.slice(0,-2),m=q(f),y=q(g);C(c===h,()=>`Error in fused matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${l.shape} and ${u.shape} and transposeA=${e} and transposeB=${s} must match.`);const b=Ve(l.shape.slice(0,-2),u.shape.slice(0,-2)).concat([d,p]),w=F(l,e?[m,c,d]:[m,d,c]),S=F(u,s?[y,p,h]:[y,h,p]);let N,k;null!=r&&(N=I(r,"bias","fused matMul"),[N]=$t(N,l),Ve(b,N.shape)),null!=a&&(k=I(a,"prelu weights","fused matMul"));const T=(M,V)=>{const[W,H,K,U]=V,Y=bd(F(M,K.shape),K,o);let X,Q;return e||s?!e&&s?(X=Ke(Y,H,!1,!1),Q=Ke(Y,W,!0,!1)):e&&!s?(X=Ke(H,Y,!1,!0),Q=Ke(W,Y,!1,!1)):(X=Ke(H,Y,!0,!0),Q=Ke(Y,W,!0,!0)):(X=Ke(Y,H,!1,!0),Q=Ke(W,Y,!0,!1)),null!=r?[X,Q,wd(U,Y)]:[X,Q]},$={a:w,b:S,bias:N,preluActivationWeights:k},R={transposeA:e,transposeB:s,activation:o,leakyreluAlpha:i};return null==r?Ys((V,W,H)=>{const K=E.runKernel(Ql,$,R);return H([V,W,K]),{value:F(K,b),gradFunc:T}})(w,S):Ys((V,W,H,K)=>{const U=E.runKernel(Ql,$,R);return K([V,W,U,H]),{value:F(U,b),gradFunc:T}})(w,S,N)}}),fR=A({hammingWindow_:function pR(n){return xd(n,.54,.46)}}),Iw=A({hannWindow_:function mR(n){return xd(n,.5,.5)}}),kw=A({frame_:function gR(n,t,e,s=!1,r=0){let o=0;const a=[];for(;o+t<=n.size;)a.push(et(n,o,t)),o+=e;if(s)for(;o<n.size;){const i=o+t-n.size,l=Mt([et(n,o,t-i),$o([i],r)]);a.push(l),o+=e}return 0===a.length?qr([],[0,t]):F(Mt(a),[a.length,t])}}),xR=A({stft_:function yR(n,t,e,s,r=Iw){null==s&&(s=hg(t));const o=kw(n,t,e),a=D(o,r(t));return Ru(a,s)}}),wR=A({cropAndResize_:function bR(n,t,e,s,r="bilinear",o=0){const a=I(n,"image","cropAndResize"),i=I(t,"boxes","cropAndResize","float32"),l=I(e,"boxInd","cropAndResize","int32"),u=i.shape[0];return C(4===a.rank,()=>`Error in cropAndResize: image must be rank 4,but got rank ${a.rank}.`),C(2===i.rank&&4===i.shape[1],()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${i.shape}.`),C(1===l.rank&&l.shape[0]===u,()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${i.shape}.`),C(2===s.length,()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${s.length}.`),C(s[0]>=1&&s[1]>=1,()=>`cropSize must be atleast [1,1], but was ${s}`),C("bilinear"===r||"nearest"===r,()=>`method must be bilinear or nearest, but was ${r}`),E.runKernel(Fc,{image:a,boxes:i,boxInd:l},{method:r,extrapolationValue:o,cropSize:s})}}),SR=A({flipLeftRight_:function vR(n){const t=I(n,"image","flipLeftRight","float32");return C(4===t.rank,()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`),E.runKernel(Kc,{image:t},{})}}),NR=A({grayscaleToRGB_:function CR(n){const t=I(n,"image","grayscaleToRGB"),e=t.rank-1,s=t.shape[e];C(t.rank>=2,()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`),C(1===s,()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${s}.`);const r=new Array(t.rank);return r.fill(1,0,e),r[e]=3,us(t,r)}}),kR=A({rgbToGrayscale_:function IR(n){const t=I(n,"image","RGBToGrayscale"),s=t.shape[t.rank-1];C(t.rank>=2,()=>`Error in RGBToGrayscale: images must be at least rank 2, but got rank ${t.rank}.`),C(3===s,()=>`Error in RGBToGrayscale: last dimension of an RGB image should be size 3, but got size ${s}.`);const r=t.dtype,o=de(t,"float32"),a=vn([.2989,.587,.114]);let i;switch(t.rank){case 2:i=Oo("ij,j->i",o,a);break;case 3:i=Oo("ijk,k->ij",o,a);break;case 4:i=Oo("ijkl,l->ijk",o,a);break;case 5:i=Oo("ijklm,m->ijkl",o,a);break;case 6:i=Oo("ijklmn,n->ijklm",o,a);break;default:throw new Error("Not a valid tensor rank.")}return i=wn(i,-1),de(i,r)}}),$R=A({rotateWithOffset_:function TR(n,t,e=0,s=.5){const r=I(n,"image","rotateWithOffset","float32");return C(4===r.rank,()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${r.rank}.`),E.runKernel(_h,{image:r},{radians:t,fillValue:e,center:s})}});function ki(n,t,e,s,r,o){null==s&&(s=.5),null==r&&(r=Number.NEGATIVE_INFINITY),null==o&&(o=0);const a=n.shape[0];return e=Math.min(e,a),C(0<=s&&s<=1,()=>`iouThreshold must be in [0, 1], but was '${s}'`),C(2===n.rank,()=>`boxes must be a 2D tensor, but was of rank '${n.rank}'`),C(4===n.shape[1],()=>`boxes must have 4 columns, but 2nd dimension was ${n.shape[1]}`),C(1===t.rank,()=>"scores must be a 1D tensor"),C(t.shape[0]===a,()=>`scores has incompatible shape with boxes. Expected ${a}, but was ${t.shape[0]}`),C(0<=o&&o<=1,()=>`softNmsSigma must be in [0, 1], but was '${o}'`),{maxOutputSize:e,iouThreshold:s,scoreThreshold:r,softNmsSigma:o}}const _R=A({nonMaxSuppression_:function ER(n,t,e,s=.5,r=Number.NEGATIVE_INFINITY){const o=I(n,"boxes","nonMaxSuppression","float32"),a=I(t,"scores","nonMaxSuppression","float32"),i=ki(o,a,e,s,r);return E.runKernel(sh,{boxes:o,scores:a},{maxOutputSize:e=i.maxOutputSize,iouThreshold:s=i.iouThreshold,scoreThreshold:r=i.scoreThreshold})}});function AR(n,t,e){const s=function RR(n,t,e){return function FR(n,t,e){let s=0,r=n.length,o=0,a=!1;for(;s<r;){o=s+(r-s>>>1);const i=e(t,n[o]);i>0?s=o+1:(r=o,a=!i)}return a?s:-s-1}(n,t,e||DR)}(n,t,e);n.splice(s<0?-(s+1):s,0,t)}function DR(n,t){return n>t?1:n<t?-1:0}function Cd(n,t,e,s,r){return mg(n,t,e,s,r,0)}function Nd(n,t,e,s,r,o){return mg(n,t,e,s,r,0,!1,o,!0)}function Id(n,t,e,s,r,o){return mg(n,t,e,s,r,o,!0)}function mg(n,t,e,s,r,o,a=!1,i=!1,l=!1){const u=[];for(let m=0;m<t.length;m++)t[m]>r&&u.push({score:t[m],boxIndex:m,suppressBeginIndex:0});u.sort(Tw);const c=o>0?-.5/o:0,h=[],d=[];for(;h.length<e&&u.length>0;){const m=u.pop(),{score:y,boxIndex:x,suppressBeginIndex:b}=m;if(y<r)break;let w=!1;for(let S=h.length-1;S>=b;--S){const N=OR(n,x,h[S]);if(N>=s){w=!0;break}if(m.score=m.score*LR(s,c,N),m.score<=r)break}m.suppressBeginIndex=h.length,w||(m.score===y?(h.push(x),d.push(m.score)):m.score>r&&AR(u,m,Tw))}const p=h.length,f=e-p;i&&f>0&&(h.push(...new Array(f).fill(0)),d.push(...new Array(f).fill(0)));const g={selectedIndices:h};return a&&(g.selectedScores=d),l&&(g.validOutputs=p),g}function OR(n,t,e){const s=n.subarray(4*t,4*t+4),r=n.subarray(4*e,4*e+4),o=Math.min(s[0],s[2]),a=Math.min(s[1],s[3]),i=Math.max(s[0],s[2]),l=Math.max(s[1],s[3]),u=Math.min(r[0],r[2]),c=Math.min(r[1],r[3]),h=Math.max(r[0],r[2]),d=Math.max(r[1],r[3]),p=(i-o)*(l-a),f=(h-u)*(d-c);if(p<=0||f<=0)return 0;const g=Math.max(o,u),m=Math.max(a,c),y=Math.min(i,h),x=Math.min(l,d),b=Math.max(y-g,0)*Math.max(x-m,0);return b/(p+f-b)}function LR(n,t,e){const s=Math.exp(t*e*e);return e<=n?s:0}function Tw(n,t){return n.score-t.score||n.score===t.score&&t.boxIndex-n.boxIndex}function gg(){return(gg=(0,O.Z)(function*(n,t,e,s=.5,r=Number.NEGATIVE_INFINITY){const o=I(n,"boxes","nonMaxSuppressionAsync"),a=I(t,"scores","nonMaxSuppressionAsync"),i=ki(o,a,e,s,r);e=i.maxOutputSize,s=i.iouThreshold,r=i.scoreThreshold;const l=yield Promise.all([o.data(),a.data()]),u=l[0],c=l[1],{selectedIndices:h}=Cd(u,c,e,s,r);return o!==n&&o.dispose(),a!==t&&a.dispose(),vn(h,"int32")})).apply(this,arguments)}const BR=A({nonMaxSuppressionWithScore_:function zR(n,t,e,s=.5,r=Number.NEGATIVE_INFINITY,o=0){const a=I(n,"boxes","nonMaxSuppression"),i=I(t,"scores","nonMaxSuppression"),l=ki(a,i,e,s,r,o),h=E.runKernel(oh,{boxes:a,scores:i},{maxOutputSize:e=l.maxOutputSize,iouThreshold:s=l.iouThreshold,scoreThreshold:r=l.scoreThreshold,softNmsSigma:o=l.softNmsSigma});return{selectedIndices:h[0],selectedScores:h[1]}}});function yg(){return(yg=(0,O.Z)(function*(n,t,e,s=.5,r=Number.NEGATIVE_INFINITY,o=0){const a=I(n,"boxes","nonMaxSuppressionAsync"),i=I(t,"scores","nonMaxSuppressionAsync"),l=ki(a,i,e,s,r,o);e=l.maxOutputSize,s=l.iouThreshold,r=l.scoreThreshold,o=l.softNmsSigma;const u=yield Promise.all([a.data(),i.data()]),c=u[0],h=u[1],{selectedIndices:d,selectedScores:p}=Id(c,h,e,s,r,o);return a!==n&&a.dispose(),i!==t&&i.dispose(),{selectedIndices:vn(d,"int32"),selectedScores:vn(p)}})).apply(this,arguments)}const GR=A({nonMaxSuppressionPadded_:function UR(n,t,e,s=.5,r=Number.NEGATIVE_INFINITY,o=!1){const a=I(n,"boxes","nonMaxSuppression"),i=I(t,"scores","nonMaxSuppression"),l=ki(a,i,e,s,r,null),f=E.runKernel(rh,{boxes:a,scores:i},{maxOutputSize:l.maxOutputSize,iouThreshold:l.iouThreshold,scoreThreshold:l.scoreThreshold,padToMaxOutputSize:o});return{selectedIndices:f[0],validOutputs:f[1]}}});function xg(){return(xg=(0,O.Z)(function*(n,t,e,s=.5,r=Number.NEGATIVE_INFINITY,o=!1){const a=I(n,"boxes","nonMaxSuppressionAsync"),i=I(t,"scores","nonMaxSuppressionAsync"),l=ki(a,i,e,s,r,null),u=l.maxOutputSize,c=l.iouThreshold,h=l.scoreThreshold,[d,p]=yield Promise.all([a.data(),i.data()]),{selectedIndices:f,validOutputs:g}=Nd(d,p,u,c,h,o);return a!==n&&a.dispose(),i!==t&&i.dispose(),{selectedIndices:vn(f,"int32"),validOutputs:_e(g,"int32")}})).apply(this,arguments)}const $w=A({resizeBilinear_:function KR(n,t,e=!1,s=!1){const r=I(n,"images","resizeBilinear");C(3===r.rank||4===r.rank,()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${r.rank}.`),C(2===t.length,()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`),C(!1===s||!1===e,()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.");let o=r,a=!1;3===r.rank&&(a=!0,o=F(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[]=t,u=E.runKernel(Bl,{images:o},{alignCorners:e,halfPixelCenters:s,size:t});return a?F(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),Ew=A({resizeNearestNeighbor_:function qR(n,t,e=!1,s=!1){const r=I(n,"images","resizeNearestNeighbor");C(3===r.rank||4===r.rank,()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${r.rank}.`),C(2===t.length,()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`),C("float32"===r.dtype||"int32"===r.dtype,()=>"`images` must have `int32` or `float32` as dtype"),C(!1===s||!1===e,()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.");let o=r,a=!1;3===r.rank&&(a=!0,o=F(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[]=t,u=E.runKernel(zl,{images:o},{alignCorners:e,halfPixelCenters:s,size:t});return a?F(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),YR=A({threshold_:function XR(n,t="binary",e=!1,s=.5){const r=I(n,"image","threshold"),l=r.shape[0]*r.shape[1];let c,h,d,p,u=D(vn([s]),255);if(C(3===r.rank,()=>`Error in threshold: image must be rank 3,but got rank ${r.rank}.`),C(3===r.shape[2]||1===r.shape[2],()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${r.shape[2]}.`),C("int32"===r.dtype||"float32"===r.dtype,()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${r.dtype}.`),C("otsu"===t||"binary"===t,()=>`Method must be binary or otsu, but was ${t}`),3===r.shape[2]){[c,h,d]=Wn(r,[1,1,1],-1);const m=D(c,.2989),y=D(h,.587),x=D(d,.114);p=ne(ne(m,y),x)}else p=n;"otsu"===t&&(u=function ZR(n,t){let o,a,i,l,u,c,e=vn([-1]),s=vn([0]),r=vn([0]);for(let h=0;h<n.size-1;h++){o=et(n,0,h+1),a=et(n,h+1),u=$e(ve(o),t),c=$e(ve(a),t);const d=ve(D(o,Mo(0,o.size)));i=$e(d,ve(o));const p=$o(a.shape,o.size),f=ne(Mo(0,a.size),p),g=D(a,f);l=$e(ve(g),ve(a));const m=be(i,l),y=be(i,l),x=D(u,c);r=D(D(x,m),y);const b=Rn(r,s);s=un(b,r,s),e=un(b,vn([h]),e)}return e}(Cm(de(ad(p),"int32"),Xn([]),256),l));const f=e?Gr(p,u):Rn(p,u);return de(D(f,255),"int32")}}),JR=A({transform_:function QR(n,t,e="nearest",s="constant",r=0,o){const a=I(n,"image","transform","float32"),i=I(t,"transforms","transform","float32");return C(4===a.rank,()=>`Error in transform: image must be rank 4,but got rank ${a.rank}.`),C(2===i.rank&&(i.shape[0]===a.shape[0]||1===i.shape[0])&&8===i.shape[1],()=>"Error in transform: Input transform should be batch x 8 or 1 x 8"),C(null==o||2===o.length,()=>`Error in transform: outputShape must be [height, width] or null, but got ${o}.`),E.runKernel(Th,{image:a,transforms:i},{interpolation:e,fillMode:s,fillValue:r,outputShape:o})}}),tD=A({bandPart_:function eD(n,t,e){const s=I(n,"a","bandPart");C(s.rank>=2,()=>`bandPart(): Rank must be at least 2, got ${s.rank}.`);const r=s.shape,[o,a]=s.shape.slice(-2);let i,l;"number"==typeof t?(C(t%1==0,()=>`bandPart(): numLower must be an integer, got ${t}.`),C(t<=o,()=>`bandPart(): numLower (${t}) must not be greater than the number of rows (${o}).`),i=I(t<0?o:t,"numLower","bandPart")):(C("int32"===t.dtype,()=>"bandPart(): numLower's dtype must be an int32."),i=un(Si(t,0),o,Hr(t,o))),"number"==typeof e?(C(e%1==0,()=>`bandPart(): numUpper must be an integer, got ${e}.`),C(e<=a,()=>`bandPart(): numUpper (${e}) must not be greater than the number of columns (${a}).`),l=I(e<0?a:e,"numUpper","bandPart")):(C("int32"===e.dtype,()=>"bandPart(): numUpper's dtype must be an int32."),l=un(Si(e,0),a,Hr(e,a)));const u=F(Mo(0,o,1,"int32"),[-1,1]),c=Mo(0,a,1,"int32"),h=be(u,c),d=ws(Gr(h,i),vr(h,St(l))),p=qt([o,a],s.dtype);return F(Dn(hs(F(s,[-1,o,a])).map(f=>un(d,f,p))),r)}}),sD=A({gramSchmidt_:function nD(n){let t;if(Array.isArray(n)){t=!1,C(null!=n&&n.length>0,()=>"Gram-Schmidt process: input must not be null, undefined, or empty");const r=n[0].shape[0];for(let o=1;o<n.length;++o)C(n[o].shape[0]===r,()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${n[o].shape[0]} vs. ${r})`)}else t=!0,n=Wn(n,n.shape[0],0).map(r=>Kr(r,[0]));C(n.length<=n[0].shape[0],()=>`Gram-Schmidt: Number of vectors (${n.length}) exceeds number of dimensions (${n[0].shape[0]}).`);const e=[],s=n;for(let r=0;r<n.length;++r)e.push(E.tidy(()=>{let o=s[r];if(r>0)for(let a=0;a<r;++a){const i=D(ve(D(e[a],o)),e[a]);o=be(o,i)}return $e(o,bi(o,"euclidean"))}));return t?Dn(e,0):e}});function _w(n,t=!1){return E.tidy(()=>{C(2===n.shape.length,()=>`qr2d() requires a 2D Tensor, but got a ${n.shape.length}D Tensor.`);const e=n.shape[0],s=n.shape[1];let r=ed(e),o=Zs(n);const a=qr([[1]],[1,1]);let i=Zs(a);const l=e>=s?s:e;for(let u=0;u<l;++u){const c=o,h=i,d=r;[i,o,r]=E.tidy(()=>{const p=et(o,[u,u],[e-u,1]),f=bi(p),g=et(o,[u,u],[1,1]),m=un(Rn(g,0),qr([[-1]]),qr([[1]])),y=be(g,D(m,f)),x=$e(p,y);i=1===x.shape[0]?Zs(a):Mt([a,et(x,[1,0],[x.shape[0]-1,x.shape[1]])],0);const b=St($e(Ke(m,y),f)),w=et(o,[u,0],[e-u,s]),S=D(b,i),N=Qe(i);if(0===u)o=be(w,Ke(S,Ke(N,w)));else{const $=be(w,Ke(S,Ke(N,w)));o=Mt([et(o,[0,0],[u,s]),$],0)}const k=Qe(S),T=et(r,[0,u],[e,r.shape[1]-u]);if(0===u)r=be(T,Ke(Ke(T,i),k));else{const $=be(T,Ke(Ke(T,i),k));r=Mt([et(r,[0,0],[e,u]),$],1)}return[i,o,r]}),Be([c,h,d])}return!t&&e>s&&(r=et(r,[0,0],[e,s]),o=et(o,[0,0],[s,s])),[r,o]})}const oD=A({qr_:function rD(n,t=!1){if(C(n.rank>=2,()=>`qr() requires input tensor to have a rank >= 2, but got rank ${n.rank}`),2===n.rank)return _w(n,t);{const e=n.shape.slice(0,n.shape.length-2).reduce((l,u)=>l*u),s=hs(F(n,[e,n.shape[n.shape.length-2],n.shape[n.shape.length-1]]),0),r=[],o=[];return s.forEach(l=>{const[u,c]=_w(l,t);r.push(u),o.push(c)}),[F(Dn(r,0),n.shape),F(Dn(o,0),n.shape)]}}});var Un=function(n){return n[n.NONE=0]="NONE",n[n.MEAN=1]="MEAN",n[n.SUM=2]="SUM",n[n.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS",n}(Un||{});const Cr=A({computeWeightedLoss_:function aD(n,t,e=Un.SUM_BY_NONZERO_WEIGHTS){const s=I(n,"losses","computeWeightedLoss");let r=null;null!=t&&(r=I(t,"weights","computeWeightedLoss"));const o=null==r?s:D(s,r);if(e===Un.NONE)return o;if(e===Un.SUM)return ve(o);if(e===Un.MEAN){if(null==r)return At(o);{const a=s.size/r.size,i=$e(ve(o),ve(r));return a>1?$e(i,_e(a)):i}}if(e===Un.SUM_BY_NONZERO_WEIGHTS){if(null==r)return $e(ve(o),_e(s.size));{const a=D(r,Vn(s.shape)),i=de(ve(Po(a,_e(0))),"float32");return $e(ve(o),i)}}throw Error(`Unknown reduction: ${e}`)}}),lD=A({absoluteDifference_:function iD(n,t,e,s=Un.SUM_BY_NONZERO_WEIGHTS){const r=I(n,"labels","absoluteDifference"),o=I(t,"predictions","absoluteDifference");let a=null;null!=e&&(a=I(e,"weights","absoluteDifference")),fn(r.shape,o.shape,"Error in absoluteDifference: ");const i=jt(be(r,o));return Cr(i,a,s)}}),cD=A({cosineDistance_:function uD(n,t,e,s,r=Un.SUM_BY_NONZERO_WEIGHTS){const o=I(n,"labels","cosineDistance"),a=I(t,"predictions","cosineDistance");let i=null;null!=s&&(i=I(s,"weights","cosineDistance")),fn(o.shape,a.shape,"Error in cosineDistance: ");const l=_e(1),u=be(l,ve(D(o,a),e,!0));return Cr(u,i,r)}}),dD=A({hingeLoss_:function hD(n,t,e,s=Un.SUM_BY_NONZERO_WEIGHTS){let r=I(n,"labels","hingeLoss");const o=I(t,"predictions","hingeLoss");let a=null;null!=e&&(a=I(e,"weights","hingeLoss")),fn(r.shape,o.shape,"Error in hingeLoss: ");const i=_e(1);r=be(D(_e(2),r),i);const l=Rs(be(i,D(r,o)));return Cr(l,a,s)}}),fD=A({huberLoss_:function pD(n,t,e,s=1,r=Un.SUM_BY_NONZERO_WEIGHTS){const o=I(n,"labels","huberLoss"),a=I(t,"predictions","huberLoss");let i=null;null!=e&&(i=I(e,"weights","huberLoss")),fn(o.shape,a.shape,"Error in huberLoss: ");const l=_e(s),u=jt(be(a,o)),c=Hr(u,l),h=be(u,c),d=ne(D(_e(.5),gt(c)),D(l,h));return Cr(d,i,r)}}),gD=A({logLoss_:function mD(n,t,e,s=1e-7,r=Un.SUM_BY_NONZERO_WEIGHTS){const o=I(n,"labels","logLoss"),a=I(t,"predictions","logLoss");let i=null;null!=e&&(i=I(e,"weights","logLoss")),fn(o.shape,a.shape,"Error in logLoss: ");const l=_e(1),u=_e(s),c=St(D(o,Yn(ne(a,u)))),h=D(be(l,o),Yn(ne(be(l,a),u))),d=be(c,h);return Cr(d,i,r)}}),xD=A({meanSquaredError_:function yD(n,t,e,s=Un.SUM_BY_NONZERO_WEIGHTS){const r=I(n,"labels","meanSquaredError"),o=I(t,"predictions","meanSquaredError");let a=null;null!=e&&(a=I(e,"weights","meanSquaredError")),fn(r.shape,o.shape,"Error in meanSquaredError: ");const i=fd(r,o);return Cr(i,a,s)}}),vD=A({sigmoidCrossEntropy_:function wD(n,t,e,s=0,r=Un.SUM_BY_NONZERO_WEIGHTS){let o=I(n,"multiClassLabels","sigmoidCrossEntropy");const a=I(t,"logits","sigmoidCrossEntropy");let i=null;if(null!=e&&(i=I(e,"weights","sigmoidCrossEntropy")),fn(o.shape,a.shape,"Error in sigmoidCrossEntropy: "),s>0){const u=_e(s),c=_e(1),h=_e(.5);o=ne(D(o,be(c,u)),D(h,u))}const l=function bD(n,t){const e=I(n,"labels","sigmoidCrossEntropyWithLogits"),s=I(t,"logits","sigmoidCrossEntropyWithLogits");fn(e.shape,s.shape,"Error in sigmoidCrossEntropyWithLogits: ");const r=Rs(s),o=D(s,e),a=wu(Bn(St(jt(s))));return ne(be(r,o),a)}(o,a);return Cr(l,i,r)}}),ND=A({softmaxCrossEntropy_:function CD(n,t,e,s=0,r=Un.SUM_BY_NONZERO_WEIGHTS){let o=I(n,"onehotLabels","softmaxCrossEntropy");const a=I(t,"logits","softmaxCrossEntropy");let i=null;if(null!=e&&(i=I(e,"weights","softmaxCrossEntropy")),fn(o.shape,a.shape,"Error in softmaxCrossEntropy: "),s>0){const u=_e(s),c=_e(1),h=_e(o.shape[1]);o=ne(D(o,be(c,u)),$e(u,h))}const l=function SD(n,t,e=-1){if(-1===e&&(e=t.rank-1),e!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${e}`);return Ys((r,o,a)=>{const l=vu(o,[e],!0),u=be(de(o,"float32"),l);a([r,u]);const c=St(D(u,r));return{value:ve(c,[e]),gradFunc:(p,f)=>{const[g,m]=f,y=zt(p.shape,[e]);return[D(F(p,y),be(de(g,"float32"),Bn(m))),D(F(p,y),be(Bn(m),de(g,"float32")))]}}})(n,t)}(o,a);return Cr(l,i,r)}}),Aw={fft:Au,ifft:Ii,rfft:Ru,irfft:pd},Rw={hammingWindow:fR,hannWindow:Iw,frame:kw,stft:xR},ds={flipLeftRight:SR,grayscaleToRGB:NR,resizeNearestNeighbor:Ew,resizeBilinear:$w,rgbToGrayscale:kR,rotateWithOffset:$R,cropAndResize:wR,nonMaxSuppression:_R,nonMaxSuppressionAsync:function PR(n,t,e){return gg.apply(this,arguments)},nonMaxSuppressionWithScore:BR,nonMaxSuppressionWithScoreAsync:function VR(n,t,e){return yg.apply(this,arguments)},nonMaxSuppressionPadded:GR,nonMaxSuppressionPaddedAsync:function HR(n,t,e){return xg.apply(this,arguments)},threshold:YR,transform:JR},bg={bandPart:tD,gramSchmidt:sD,qr:oD},Dw={absoluteDifference:lD,computeWeightedLoss:Cr,cosineDistance:cD,hingeLoss:dD,huberLoss:fD,logLoss:gD,meanSquaredError:xD,sigmoidCrossEntropy:vD,softmaxCrossEntropy:ND},Fw={sparseFillEmptyRows:A({sparseFillEmptyRows_:function ID(n,t,e,s){const r=I(n,"indices","sparseFillEmptyRows","int32"),o=I(t,"values","sparseFillEmptyRows"),a=I(e,"denseShape","sparseFillEmptyRows","int32"),i=I(s,"defaultValue","sparseFillEmptyRows",o.dtype);if(2!==r.rank)throw new Error(`Indices should be Tensor2D but received shape\n        ${r.shape}`);if(1!==o.rank)throw new Error(`Values should be Tensor1D but received shape ${o.shape}`);if(1!==a.rank)throw new Error(`Dense shape should be Tensor1D but received shape ${a.shape}`);if(0!==i.rank)throw new Error(`Default value should be a scalar but received shape ${i.shape}`);const u=E.runKernel(gh,{indices:r,values:o,denseShape:a,defaultValue:i});return{outputIndices:u[0],outputValues:u[1],emptyRowIndicator:u[2],reverseIndexMap:u[3]}}}),sparseReshape:A({sparseReshape_:function TD(n,t,e){const s=I(n,"inputIndices","sparseReshape","int32"),r=I(t,"inputShape","sparseReshape","int32"),o=I(e,"newShape","sparseReshape","int32");if(2!==s.rank)throw new Error(`Input indices should be Tensor2D but received shape\n        ${s.shape}`);if(1!==r.rank)throw new Error(`Input shape should be Tensor1D but received shape ${r.shape}`);if(1!==o.rank)throw new Error(`New shape should be Tensor1D but received shape ${o.shape}`);const i=E.runKernel(yh,{inputIndices:s,inputShape:r,newShape:o});return{outputIndices:i[0],outputShape:i[1]}}}),sparseSegmentMean:A({sparseSegmentMean_:function ED(n,t,e){const s=I(n,"data","sparseSegmentMean"),r=I(t,"indices","sparseSegmentMean","int32"),o=I(e,"segmentIds","sparseSegmentMean","int32");if(s.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.rank)throw new Error(`Indices should be Tensor1D but received shape\n          ${r.shape}`);if(1!==o.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n          ${o.shape}`);return E.runKernel(xh,{data:s,indices:r,segmentIds:o})}}),sparseSegmentSum:A({sparseSegmentSum_:function AD(n,t,e){const s=I(n,"data","sparseSegmentSum"),r=I(t,"indices","sparseSegmentSum","int32"),o=I(e,"segmentIds","sparseSegmentSum","int32");if(s.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.rank)throw new Error(`Indices should be Tensor1D but received shape\n         ${r.shape}`);if(1!==o.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n         ${o.shape}`);return E.runKernel(bh,{data:s,indices:r,segmentIds:o})}})},Ow={stringNGrams:A({stringNGrams_:function DD(n,t,e,s,r,o,a,i){const l=I(n,"data","stringNGrams","string");if("string"!==l.dtype)throw new Error("Data must be of datatype string");if(1!==l.shape.length)throw new Error(`Data must be a vector, saw: ${l.shape}`);const u=I(t,"dataSplits","stringNGrams");if("int32"!==u.dtype)throw new Error("Data splits must be of datatype int32");const d=E.runKernel(Ch,{data:l,dataSplits:u},{separator:e,nGramWidths:s,leftPad:r,rightPad:o,padWidth:a,preserveShortSequences:i});return{nGrams:d[0],nGramsSplits:d[1]}}}),stringSplit:A({stringSplit_:function OD(n,t,e=!0){const s=I(n,"input","stringSplit","string"),r=I(t,"delimiter","stringSplit","string");if(1!==s.rank)throw new Error(`Input should be Tensor1D but received shape ${s.shape}`);if(0!==r.rank)throw new Error(`Delimiter should be a scalar but received shape ${r.shape}`);const i=E.runKernel(Nh,{input:s,delimiter:r},{skipEmpty:e});return{indices:i[0],values:i[1],shape:i[2]}}}),stringToHashBucketFast:A({stringToHashBucketFast_:function PD(n,t){const e=I(n,"input","stringToHashBucketFast","string"),s={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");return E.runKernel(Ih,{input:e},s)}}),staticRegexReplace:A({staticRegexReplace_:function zD(n,t,e,s=!0){const r=I(n,"input","staticRegexReplace","string");return E.runKernel(ql,{x:r},{pattern:t,rewrite:e,replaceGlobal:s})}})},Bo=R0,VD=typeof requestAnimationFrame<"u"?requestAnimationFrame:typeof setImmediate<"u"?setImmediate:n=>n();function wg(){return new Promise(n=>VD(()=>n()))}function vg(n,t){const e=n[0].length;n.forEach((r,o)=>{C(r.length===e,()=>`Error in concat${e}D: rank of tensors[${o}] must be the same as the rank of the rest (${e})`)}),C(t>=0&&t<e,()=>`Error in concat${e}D: axis must be between 0 and ${e-1}.`);const s=n[0];n.forEach((r,o)=>{for(let a=0;a<e;a++)C(a===t||r[a]===s[a],()=>`Error in concat${e}D: Shape of tensors[${o}] (${r}) does not match the shape of the rest (${s}) along the non-concatenated axis ${o}.`)})}function Js(n,t){const e=n[0].slice();for(let s=1;s<n.length;s++)e[t]+=n[s][t];return e}var er=function(n){return n[n.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",n[n.VALUE_ROWIDS=1]="VALUE_ROWIDS",n[n.ROW_LENGTHS=2]="ROW_LENGTHS",n[n.ROW_SPLITS=3]="ROW_SPLITS",n[n.ROW_LIMITS=4]="ROW_LIMITS",n[n.ROW_STARTS=5]="ROW_STARTS",n}(er||{});function Lw(n,t,e){let s=new Array;if(null==e&&null==t)return s;if(null==t)for(;s.length<n+e.length;)s.push(-1);else s=t.slice();if(null==e)return s;if(n+e.length!==s.length)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.rank = ${n+e.length}, but shape.rank = ${s.length}`);for(let r=1;r<e.length;++r){const o=e[r],a=s[s.length-e.length+r],i=s[a];if(o>=0)if(i>=0){if(i!==o)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.shape[${r+n}] = ${o} but shape[${r+n}] = ${i}`)}else s[a]=o}return s}function Pw(n){const t={FIRST_DIM_SIZE:er.FIRST_DIM_SIZE,VALUE_ROWIDS:er.VALUE_ROWIDS,ROW_LENGTHS:er.ROW_LENGTHS,ROW_SPLITS:er.ROW_SPLITS,ROW_LIMITS:er.ROW_LIMITS,ROW_STARTS:er.ROW_STARTS},e=[];for(const s of n){if(!(s in t))break;e.push(t[s])}return e}function Mw(n){return 0===n.length?0:n[0]===er.FIRST_DIM_SIZE?n.length-1:n.length}function zw(n,t){if(null==n||null==t)return;const e=n.length,s=t.length;if(e>=s)throw new Error(`defaultValue.shape=${n} and ragged tensor flatValues.shape=${t}, are incompatible: defaultValue.rank = ${e} must be less than ragged tensor input flatValues.rank = ${s})`);for(let r=0;r<Math.min(e,s-1);++r){const o=n[r],a=t[r+1];if(o>=0&&a>=0&&1!==o&&o!==a)throw new Error(`defaultValue.shape=${n}, and ragged tensor input flatValues.shape=${t} are incompatible: defaultValue.shape[${r-n.length}] = ${o} but ragged tensor input.flatValues.shape[${r-n.length}] = ${a}`)}}const Sg=30;function kd(n){return n<=Sg?n:vc(n,Math.floor(Math.sqrt(n)))}function Cg(n,t,e){return[e*("number"==typeof n?n:n[0]),t*("number"==typeof n?n:n[1])]}function Du(n,t,e,s=!0){let r=[];if(s)r=r.concat(t.slice(0)),r.push(n[0]/e),r=r.concat(n.slice(1));else{r=r.concat(n[0]);const o=t.length;for(let a=0;a<o;++a)r=r.concat([n[a+1]/t[a],t[a]]);r=r.concat(n.slice(o+1))}return r}function Fu(n,t,e=!0){const s=[];if(e){s.push(t);for(let r=t+1;r<n;++r)r<=2*t?(s.push(r),s.push(r-(t+1))):s.push(r)}else{const r=[],o=[];for(let a=1;a<n;++a)a>=2*t+1||a%2==1?o.push(a):r.push(a);s.push(...r),s.push(0),s.push(...o)}return s}function Ou(n,t,e,s=!0){const r=[];r.push(s?n[0]/e:n[0]*e);for(let o=1;o<n.length;++o)r.push(o<=t.length?s?t[o-1]*n[o]:n[o]/t[o-1]:n[o]);return r}function Ng(n,t){const e=[0];for(let s=0;s<t;++s)e.push(n[s][0]);return e}function Ig(n,t,e){const s=n.slice(0,1);for(let r=0;r<e;++r)s.push(n[r+1]-t[r][0]-t[r][1]);return s}const Td=1.7580993408473768,$d=1.0507009873554805,kg=.3275911,Tg=.254829592,$g=-.284496736,Eg=1.421413741,_g=-1.453152027,Ag=1.061405429;function Nr(n,t){if(n.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${n.length}, imag: ${t.length}.`);const e=new Float32Array(2*n.length);for(let s=0;s<e.length;s+=2)e[s]=n[s/2],e[s+1]=t[s/2];return e}function Bw(n){const t=new Float32Array(n.length/2),e=new Float32Array(n.length/2);for(let s=0;s<n.length;s+=2)t[s/2]=n[s],e[s/2]=n[s+1];return{real:t,imag:e}}function Vw(n){const t=Math.ceil(n.length/4),e=new Float32Array(t),s=new Float32Array(t);for(let r=0;r<n.length;r+=4)e[Math.floor(r/4)]=n[r],s[Math.floor(r/4)]=n[r+1];return{real:e,imag:s}}function Ww(n){const t=Math.floor(n.length/4),e=new Float32Array(t),s=new Float32Array(t);for(let r=2;r<n.length;r+=4)e[Math.floor(r/4)]=n[r],s[Math.floor(r/4)]=n[r+1];return{real:e,imag:s}}function Rg(n,t){return{real:n[2*t],imag:n[2*t+1]}}function Uw(n,t,e,s){n[2*s]=t,n[2*s+1]=e}function Gw(n,t){const e=new Float32Array(n/2),s=new Float32Array(n/2);for(let r=0;r<Math.ceil(n/2);r++){const o=(t?2:-2)*Math.PI*(r/n);e[r]=Math.cos(o),s[r]=Math.sin(o)}return{real:e,imag:s}}function Hw(n,t,e){const s=(e?2:-2)*Math.PI*(n/t);return{real:Math.cos(s),imag:Math.sin(s)}}const Dg="->",WD=/->/g,jw=",",Kw="...";function Fg(n,t){const e=((n=n.replace(/\s/g,"")).length-n.replace(WD,"").length)/Dg.length;if(e<1)throw new Error("Equations without an arrow are not supported.");if(e>1)throw new Error(`Equation must contain exactly one arrow ("${Dg}").`);const[s,r]=n.split(Dg);C(-1===s.indexOf(Kw),()=>`The ellipsis notation ("${Kw}") is not supported yet.`);const o=s.split(jw),a=o.length;if(t!==a)throw new Error(`Expected ${a} input tensors, received ${t}`);if(a>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const i=[];for(let d=0;d<r.length;++d){const p=r[d];if(!o.some(f=>-1!==f.indexOf(p)))throw new Error(`Output subscripts contain the label ${p} not present in the input subscripts.`);-1===i.indexOf(p)&&i.push(p)}for(let d=0;d<s.length;++d){const p=s[d];-1===i.indexOf(p)&&p!==jw&&i.push(p)}const l=new Array(o.length);for(let d=0;d<a;++d){if(new Set(o[d].split("")).size!==o[d].length)throw new Error(`Found duplicate axes in input component ${o[d]}. Support for duplicate axes in input is not implemented yet.`);l[d]=[];for(let p=0;p<o[d].length;++p)l[d].push(i.indexOf(o[d][p]))}const u=i.length,h=[];for(let d=r.length;d<u;++d)h.push(d);return{allDims:i,summedDims:h,idDims:l}}function Og(n,t){let e=new Array(n);e.fill(-1);for(let r=0;r<t.length;++r)e[t[r]]=r;const s=[];for(let r=0;r<n;++r)-1===e[r]&&s.push(r);return e=e.filter(r=>-1!==r),{permutationIndices:e,expandDims:s}}function Lg(n,t,e){const s=new Array(n);for(let r=0;r<e.length;++r){const o=e[r].shape;for(let a=0;a<t[r].length;++a)void 0===s[t[r][a]]?s[t[r][a]]=o[a]:C(s[t[r][a]]===o[a],()=>`Expected dimension ${s[t[r][a]]} at axis ${a} of input shaped ${JSON.stringify(o)}, but got dimension ${o[a]}`)}}function Pg(n,t){const e=n,s=[];let r=0;0===n.length&&e.push(-1),r=n.length+1;for(let a=0;a<r;++a)s.push([]);const o=[];for(let a=0;a<e.length;++a){const l=UD(t,e[a]);for(const u of l)-1===o.indexOf(u)&&(s[a].push(u),o.push(u))}return{path:e,steps:s}}function Mg(n){return n.every((t,e)=>t===e)}function UD(n,t){const e=[];for(let s=0;s<n.length;++s)(0===n[s].length||-1!==n[s].indexOf(t)||-1===t)&&e.push(s);return e}function zg(n,t,e=0){let s=[];if("number"==typeof t)C(n.shape[e]%t==0,()=>"Number of splits must evenly divide the axis."),s=new Array(t).fill(n.shape[e]/t);else{C(t.reduce((a,i)=>(-1===i&&(a+=1),a),0)<=1,()=>"There should be only one negative value in split array.");const o=t.indexOf(-1);if(-1!==o){const a=t.reduce((i,l)=>l>0?i+l:i);t[o]=n.shape[e]-a}C(n.shape[e]===t.reduce((a,i)=>a+i),()=>"The sum of sizes must match the size of the axis dimension."),s=t}return s}function qw(n){return`Received SparseTensor with denseShape[0] = 0 but\n  indices.shape[0] = ${n}`}function Xw(n,t){return`indices(${n}, 0) is invalid: ${t} < 0`}function Zw(n,t,e){return`indices(${n}, 0) is invalid: ${t} >= ${e}`}function Yw(n,t){return`only one output dimension may be -1, not both ${n} and ${t}`}function Qw(n,t){return`size ${n} must be non-negative, not ${t}`}function Jw(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function ev(n,t){return`Input to reshape is a SparseTensor with ${q(n)}\n  dense values, but the requested shape requires a multiple of ${q(t)}. inputShape=${n} outputShape= ${t}`}function tv(n,t){return`Input to reshape is a tensor with ${q(n)} dense values, but the requested shape has ${q(t)}. inputShape=${n} outputShape=${t}`}function Bg(){return"segment ids must be >= 0"}function nv(){return"segment ids are not increasing"}function sv(n,t){return`Segment id ${n} out of range [0, ${t}), possibly because segmentIds input is not sorted.`}function rv(n,t,e){return`Bad: indices[${n}] == ${t} out of range [0, ${e})`}function ov(n,t){let s,e=!1;for(n<=Sg?(s=n,e=!0):s=vc(n,Math.floor(Math.sqrt(n)));!e;)s>t||s===n?e=!0:s=vc(n,s+1);return s}function av(n,t,e){const s=[],r=n.length;for(let o=0;o<r;o++)s.push(o!==t?n[o]:e);return s}function Vg(n,t,e,s){const r=t.shape.length,o=n.shape.length;if(0!==s&&(s<-r||s>r))throw new Error(`Expect batchDims in the range of [-${r}, ${r}], but got ${s}`);if(s<0&&(s+=r),s>o)throw new Error(`batchDims (${s}) must be less than rank(x) (\n    ${o}).`);if(e<s)throw new Error(`batchDims (${s}) must be less than or equal to axis (${e}).`);for(let h=0;h<s;++h)if(n.shape[h]!==t.shape[h])throw new Error(`x.shape[${h}]: ${n.shape[h]} should be equal to indices.shape[${h}]: ${t.shape[h]}.`);const a=n.shape[e],i=[];let l=1,u=1,c=1;for(let h=0;h<s;++h)i.push(n.shape[h]),l*=n.shape[h];for(let h=s;h<e;h++)i.push(n.shape[h]),u*=n.shape[h];for(let h=s;h<r;h++)i.push(t.shape[h]);for(let h=e+1;h<o;h++)i.push(n.shape[h]),c*=n.shape[h];return{batchSize:l,sliceSize:c,outerSize:u,dimSize:a,outputShape:i}}function Ir(n){try{return n.map(t=>pr(t))}catch(t){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${t}`)}}function iv(n){return n.map(t=>js(t))}!function Z2(){for(const n of X2)se(n)}();const lv={kernelName:Xi,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(n,zo(de(e,"float32"),-1))}}},GD={kernelName:ha,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>{const s=gt(de(e,"float32")),r=yn(be(_e(1),s));return St($e(n,r))}}}},HD={kernelName:da,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>{const s=yn(be(gt(de(e,"float32")),1));return $e(n,s)}}}},jD={kernelName:vo,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Ve(e.shape,s.shape);return{a:()=>{let i=n;const l=Kt(e.shape,r);return l.length>0&&(i=ve(i,l)),F(i,e.shape)},b:()=>{let i=n;const l=Kt(s.shape,r);return l.length>0&&(i=ve(i,l)),F(i,s.shape)}}}},KD={kernelName:Zi,saveAllInputs:!0,gradFunc:(n,t)=>{const e={};return t.forEach((s,r)=>{e[r]=()=>n.clone()}),e}},qD={kernelName:Yi,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>Je(e)}}},XD={kernelName:Qi,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>Je(e)}}},ZD={kernelName:pa,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>$e(n,yn(be(_e(1),gt(de(e,"float32")))))}}},YD={kernelName:fa,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>{const s=yn(ne(_e(1),gt(de(e,"float32"))));return $e(n,s)}}}},QD={kernelName:ya,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Ve(e.shape,s.shape);return{a:()=>{const i=ne(gt(e),gt(s));let l=D(n,$e(s,i));const u=Kt(e.shape,r);return u.length>0&&(l=ve(l,u)),F(l,e.shape)},b:()=>{const i=ne(gt(e),gt(s));let l=St(D(n,$e(e,i)));const u=Kt(s.shape,r);return u.length>0&&(l=ve(l,u)),F(l,s.shape)}}}},JD={kernelName:ma,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>$e(n,ne(gt(de(e,"float32")),1))}}},eF={kernelName:ga,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>$e(n,be(_e(1),gt(de(e,"float32"))))}}},nF=A({avgPool3dGrad_:function tF(n,t,e,s,r,o){const a=I(n,"dy","avgPool3dGrad"),i=I(t,"input","avgPool3dGrad");let l=a,u=i,c=!1;4===i.rank&&(c=!0,l=F(a,[1,a.shape[0],a.shape[1],a.shape[2],a.shape[3]]),u=F(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),C(5===l.rank,()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${l.rank}.`),C(5===u.rank,()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${u.rank}.`),An("avgPool3dGrad",r,o);const p=E.runKernel(kc,{dy:l,input:u},{filterSize:e,strides:s,pad:r,dimRoundingMode:o});return c?F(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),sF={kernelName:el,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{filterSize:r,strides:o,pad:a,dimRoundingMode:i}=e;return{x:()=>nF(n,s,r,o,a,i)}}},oF=A({avgPoolGrad_:function rF(n,t,e,s,r){const o=I(n,"dy","avgPoolGrad"),a=I(t,"input","avgPoolGrad");C(a.rank===o.rank,()=>`Rank of input (${a.rank}) does not match rank of dy (${o.rank})`);let i=a,l=o,u=!1;3===a.rank&&(u=!0,i=F(a,[1,a.shape[0],a.shape[1],a.shape[2]]),l=F(o,[1,o.shape[0],o.shape[1],o.shape[2]])),C(4===l.rank,()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`),C(4===i.rank,()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${i.rank}.`);const d=E.runKernel(Ic,{dy:l,input:i},{filterSize:e,strides:s,pad:r});return u?F(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),aF={kernelName:Ji,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{filterSize:r,strides:o,pad:a}=e;return{x:()=>oF(n,s,r,o,a)}}},iF={kernelName:tl,inputsToSave:["a","b"],gradFunc:(n,t,e)=>{const[s,r]=t,{transposeA:o,transposeB:a}=e;return o||a?!o&&a?{a:()=>Ke(n,r,!1,!1),b:()=>Ke(n,s,!0,!1)}:o&&!a?{a:()=>Ke(r,n,!1,!0),b:()=>Ke(s,n,!1,!1)}:{a:()=>Ke(r,n,!0,!0),b:()=>Ke(n,s,!0,!0)}:{a:()=>Ke(n,r,!1,!0),b:()=>Ke(s,n,!0,!1)}}},lF={kernelName:nl,gradFunc:(n,t,e)=>{const{blockShape:s,crops:r}=e;return{x:()=>Iu(n,s,r)}}},uF={kernelName:xb,gradFunc:(n,t,e)=>{const r=e.inputShape,o=e.shape,a=Array.from(o);for(let l=r.length-1;l>=0;l--)if(r[l]===o[l])a[l]=1;else if(1!==r[l])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${o}].`);const i=[];for(let l=0;l<a.length;l++)a[l]>1&&i.push(l);return{x:()=>ve(n,i,!0)}}},cF={kernelName:xa,gradFunc:n=>({x:()=>n.clone()})},hF={kernelName:ba,gradFunc:n=>({x:()=>Je(n)})},dF={kernelName:wa,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{clipValueMin:r,clipValueMax:o}=e;return{x:()=>un(ws(vr(s,r),Gr(s,o)),n,Je(n))}}},pF={kernelName:rl,inputsToSave:["x"],gradFunc:lv.gradFunc},fF={kernelName:ol,saveAllInputs:!0,gradFunc:(n,t,e)=>{const s=t.map(l=>l.shape),{axis:r}=e,o=je(r,t[0].shape)[0],a=s.map(l=>l[o]);return Wn(n,a,o).map(l=>()=>l)}},mF={kernelName:al,inputsToSave:["x","filter"],gradFunc:(n,t,e)=>{const[s,r]=t,{dilations:o,strides:a,pad:i,dataFormat:l}=e;return C(Wr(o),()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${o}'`),{x:()=>Em(s.shape,n,r,a,i,l),filter:()=>pg(s,n,r.shape,a,i,l)}}},gF={kernelName:il,inputsToSave:["dy","filter"],gradFunc:(n,t,e)=>{const[s,r]=t,{strides:o,pad:a,dataFormat:i,dimRoundingMode:l}=e;return{dy:()=>wr(n,r,o,a,i,1,l),filter:()=>pg(n,s,r.shape,o,a,i,l)}}},xF=A({conv3DBackpropFilter_:function yF(n,t,e,s,r){let o=n;4===n.rank&&(o=F(n,[1,n.shape[0],n.shape[1],n.shape[2],n.shape[3]]));let a=t;return 4===a.rank&&(a=F(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),C(5===o.rank,()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${o.shape}.`),C(5===a.rank,()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${a.shape}.`),C(5===e.length,()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${e}.`),C(o.shape[4]===e[3],()=>`Error in conv3dDerFilter: depth of input ${o.shape[4]}) must match input depth in filter (${e[3]}.`),C(a.shape[4]===e[4],()=>`Error in conv3dDerFilter: depth of dy (${a.shape[4]}) must match output depth for filter (${e[4]}).`),E.runKernel(Ac,{x:o,dy:a},{strides:s,pad:r,filterShape:e})}}),bF={kernelName:ll,inputsToSave:["x","filter"],gradFunc:(n,t,e)=>{const{dilations:s,strides:r,pad:o}=e;C(Wr(s),()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`);const[a,i]=t;return{x:()=>P0(a.shape,n,i,r,o),filter:()=>xF(a,n,i.shape,r,o)}}},wF={kernelName:va,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(St(cd(de(e,"float32"))),n)}}},vF={kernelName:Sa,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(hd(de(e,"float32")),n)}}},SF={kernelName:ul,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{axis:r,exclusive:o,reverse:a}=e;return{x:()=>{const i=_t([r],s.rank);let l=Qh(n,r,o,!a);return null!=i&&(l=Qe(l,i)),l}}}},CF={kernelName:cl,inputsToSave:["x","filter"],gradFunc:(n,t,e)=>{const{dilations:s,strides:r,pad:o,dimRoundingMode:a}=e,i=s??[1,1];C(Wr(i),()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${i}'`);const[l,u]=t;return C(4===l.rank,()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`),C(4===u.rank,()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`),C(l.shape[3]===u.shape[2],()=>`Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`),C(xn(r,i),()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${r} and dilations '${i}'.`),An("depthwiseConv2d",o,a),{x:()=>Nw(l.shape,n,u,r,o,i,a),filter:()=>Cw(l,n,u.shape,r,o,i,a)}}},NF={kernelName:hl,inputsToSave:["x","filter"],gradFunc:(n,t,e)=>{const[s,r]=t,o={x:s,filter:r,dy:n},a={x:s,filter:r,dy:n};return{x:()=>E.runKernel(Bc,o,e),filter:()=>E.runKernel(Vc,a,e)}}},IF={kernelName:Na,outputsToSave:[!0],gradFunc:(n,t)=>{const[e]=t,s={dy:n,y:e};return{x:()=>E.runKernel(Gc,s)}}},kF={kernelName:Ia,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t,s=D(Bn(St(gt(e))),2/Math.sqrt(Math.PI));return{x:()=>D(n,s)}}},TF={kernelName:ka,outputsToSave:[!0],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(n,e)}}},$F={kernelName:pl,inputsToSave:["input"],gradFunc:(n,t)=>{const[e]=t;return{input:()=>F(n,e.shape)}}},EF={kernelName:Ta,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(n,Bn(e))}}},_F={kernelName:$a,gradFunc:n=>({x:()=>Je(n)})},AF={kernelName:Ea,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Ve(e.shape,s.shape);return{a:()=>{const i=$e(n,de(s,"float32")),l=Kt(e.shape,r);return l.length>0?F(ve(i,l),e.shape):i},b:()=>{let i=D(n,de(e,"float32"));const l=Kt(s.shape,r);l.length>0&&(i=F(ve(i,l),s.shape));const u=gt(s);return St($e(i,de(u,"float32")))}}}},RF={kernelName:fl,inputsToSave:["x","mean","variance","scale"],gradFunc:(n,t,e)=>{const{varianceEpsilon:s}=e,[r,o,a,i]=t,l=i??_e(1),u=Kt(o.shape,r.shape),c=[];if(1===o.rank){for(let w=0;w<r.shape.length-1;++w)c.push(r.shape[w]);c.push(1)}const h=be(r,o),d=D(n,l),p=id(ne(a,_e(s))),f=D(D(D(p,p),p),_e(-.5));return{x:()=>F(D(D(n,1===o.rank?us(F(p,[1,1,1,o.shape[0]]),c):p),l),r.shape),mean:()=>{let w=D(D(p,_e(-1)),d);return 1===o.rank&&(w=ve(w,u)),F(w,o.shape)},variance:()=>{let w=D(D(f,h),d);return 1===o.rank&&(w=ve(w,u)),F(w,o.shape)},scale:()=>{const w=D(h,p);let S=D(n,w);return 1===o.rank&&(S=ve(S,u)),F(S,o.shape)},offset:()=>{let w=n;return 1===o.rank&&(w=ve(w,u)),F(w,o.shape)}}}},DF={kernelName:ml,inputsToSave:["x","indices"],gradFunc:(n,t,e)=>{const[s,r]=t,{axis:o,batchDims:a}=e,i=je(o,s.shape)[0],l=(u,c,h)=>()=>{const d=u.shape,p=c.size,f=d.slice(0,i),g=f.length,m=d.slice(o,d.length).slice(1),y=m.length,x=uv(0,g),b=uv(g+1,g+1+y),w=hv([f,[p],m]),S=F(h,w),N=F(c,[p]),k=hv([[g],x,b]),T=Qe(S,k);let $=gd(T,N,u.shape[i]);const R=Ur(k);return $=Qe($,R),$};if(1===a){const c=s.split(s.shape[0],0);return{x:()=>Dn(c.map((p,f)=>l(p,r.slice(f,1),n.slice(f,1))())).reshape(s.shape),indices:()=>r}}return{x:l(s,r,n),indices:()=>r}}};function uv(n,t){const e=[];for(let s=n;s<t;++s)e.push(s);return e}function hv(n){const t=[];for(let e=0;e<n.length;++e)for(let s=0;s<n[e].length;++s)t.push(n[e][s]);return t}const FF={kernelName:_a,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t;return{a:()=>Je(e),b:()=>Je(s)}}},OF={kernelName:Aa,gradFunc:n=>({x:()=>de(n,"float32")})},LF={kernelName:Ra,gradFunc:n=>({x:()=>Je(n)})},PF={kernelName:Da,gradFunc:n=>({x:()=>Je(n)})},MF={kernelName:Fa,gradFunc:n=>({x:()=>Je(n)})},zF={kernelName:yl,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{alpha:r}=e,o=Rn(s,0);return{x:()=>un(o,n,D(n,r))}}},BF={kernelName:La,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>$e(n,ne(e,1))}}},VF={kernelName:Oa,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>$e(n,de(e,"float32"))}}},WF={kernelName:bb,inputsToSave:[],outputsToSave:[!0],gradFunc:(n,t,e)=>{const[s]=t,{axis:r}=e;return{logits:()=>{const a=Bn(s);return be(n,D(ve(n,r,!0),a))}}}},GF=A({localResponseNormalizationBackprop_:function UF(n,t,e,s=5,r=1,o=1,a=.5){return E.runKernel(Qc,{x:n,y:t,dy:e},{depthRadius:s,bias:r,alpha:o,beta:a})}}),HF={kernelName:Cl,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,t,e)=>{const[s,r]=t,{depthRadius:o,bias:a,alpha:i,beta:l}=e;return{x:()=>GF(s,r,n,o,a,i,l)}}};function dv(n,t,e,s){return t.rank<e.rank&&(t=F(t,zt(t.shape,s))),n.rank<e.rank&&(n=F(n,zt(n.shape,s))),{x:()=>D(n,de(Zn(e,t),n.dtype))}}const pv={kernelName:Nl,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,t,e)=>{const s=e,{reductionIndices:r}=s,o=t[0],l=dv(n,t[1],o,je(r,o.shape));return{x:()=>l.x()}}},jF={kernelName:Pa,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t;return{a:()=>D(n,de(vr(e,s),"float32")),b:()=>D(n,de(Si(e,s),"float32"))}}},qF=A({maxPool3dGrad_:function KF(n,t,e,s,r,o,a){const i=I(n,"dy","maxPool3dGrad"),l=I(t,"input","maxPool3dGrad"),u=I(e,"output","maxPool3dGrad");let c=i,h=l,d=u,p=!1;4===l.rank&&(p=!0,c=F(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]]),h=F(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),d=F(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]])),C(5===c.rank,()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${c.rank}.`),C(5===h.rank,()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${h.rank}.`),C(5===d.rank,()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${d.rank}.`),An("maxPool3dGrad",o,a);const m=E.runKernel(eh,{dy:c,input:h,output:d},{filterSize:s,strides:r,pad:o,dimRoundingMode:a});return p?F(m,[m.shape[1],m.shape[2],m.shape[3],m.shape[4]]):m}}),XF={kernelName:kl,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,t,e)=>{const[s,r]=t,{filterSize:o,strides:a,pad:i,dimRoundingMode:l}=e;return{x:()=>qF(n,s,r,o,a,i,l)}}},YF=A({maxPoolGrad_:function ZF(n,t,e,s,r,o,a){const i=I(n,"dy","maxPoolGrad"),l=I(t,"input","maxPoolGrad"),u=I(e,"output","maxPoolGrad");return C(l.rank===i.rank,()=>`Rank of input (${l.rank}) does not match rank of dy (${i.rank})`),C(4===i.rank,()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${i.rank}.`),C(4===l.rank,()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`),An("maxPoolGrad",o,a),E.runKernel(Jc,{dy:i,input:l,output:u},{filterSize:s,strides:r,pad:o,dimRoundingMode:a})}}),fv={kernelName:Ol,inputsToSave:["x"],gradFunc:(n,t,e)=>{const s=t[0],{paddings:r}=e,o=r.map(a=>a[0]);return{x:()=>et(n,o,s.shape)}}};const mv={kernelName:Hl,gradFunc:(n,t,e)=>{const{blockShape:s,paddings:r}=e;return{x:()=>gu(n,s,r)}}},gv={kernelName:jl,gradFunc:(n,t,e)=>{const{axis:s}=e;return{x:()=>Mt(n,s)}}},KO=[lv,GD,HD,jD,KD,qD,XD,ZD,YD,QD,JD,eF,sF,aF,iF,lF,uF,cF,hF,dF,pF,fF,gF,mF,bF,wF,vF,SF,CF,NF,{kernelName:Ca,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Ve(e.shape,s.shape);return{a:()=>{const i=$e(n,de(s,"float32")),l=Kt(e.shape,r);return l.length>0?F(ve(i,l),e.shape):i},b:()=>{let i=D(n,de(e,"float32"));const l=Kt(s.shape,r);l.length>0&&(i=F(ve(i,l),s.shape));const u=gt(s);return St($e(i,de(u,"float32")))}}}},IF,kF,TF,$F,EF,AF,_F,RF,DF,FF,OF,LF,PF,MF,zF,BF,VF,WF,HF,pv,pv,jF,XF,{kernelName:Il,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,t,e)=>{const[s,r]=t,{filterSize:o,strides:a,pad:i}=e;return{x:()=>YF(n,s,r,o,a,i)}}},{kernelName:Tl,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{axis:r}=e,o=je(r,s.shape),l=q(cn(s.shape,o)[1]);return{x:()=>{const c=s.shape.slice();o.forEach(p=>{c[p]=1});const h=F(n,c);return $e(D(h,Vn(s.shape,"float32")),l)}}}},{kernelName:$l,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,t,e)=>{const s=e,{axis:r}=s,[o,a]=t,l=dv(n,a,o,je(r,o.shape));return{x:()=>l.x()}}},{kernelName:Ma,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t;return{a:()=>D(n,de(Gr(e,s),"float32")),b:()=>D(n,de(Rn(e,s),"float32"))}}},{kernelName:El,inputsToSave:["x"],gradFunc:(n,t,e)=>{const s=t[0],{paddings:r}=e,o=r.map(a=>a[0]);return{x:()=>et(n,o,s.shape)}}},{kernelName:za,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Ve(e.shape,s.shape);return{a:()=>{const i=Kt(e.shape,r);return i.length>0?F(ve(n,i),e.shape):n},b:()=>{const i=D(n,St(wi($e(e,s)))),l=Kt(s.shape,r);return l.length>0?F(ve(i,l),s.shape):i}}}},{kernelName:Ba,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Ve(e.shape,s.shape);return{a:()=>{const i=D(n,de(s,"float32")),l=Kt(e.shape,r);return l.length>0?F(ve(i,l),e.shape):i},b:()=>{const i=D(n,de(e,"float32")),l=Kt(s.shape,r);return l.length>0?F(ve(i,l),s.shape):i}}}},{kernelName:_l,gradFunc:n=>({x:()=>St(n)})},{kernelName:Dl,inputsToSave:["indices"],gradFunc:(n,t)=>{const e=t[0];return{indices:()=>qt(e.shape,"float32")}}},{kernelName:Rl,gradFunc:n=>({x:()=>Je(n)})},{kernelName:Fl,saveAllInputs:!0,gradFunc:(n,t,e)=>{const{axis:s}=e;return hs(n,s).map(o=>()=>o)}},fv,fv,{kernelName:Va,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(n,t)=>{const[e,s,r]=t,o=e,a=s,i=Ve(o.shape,a.shape);return{a:()=>{const c=de(a,"float32");let h=D(n,D(c,yr(o,be(c,_e(1)))));const d=Kt(o.shape,i);return d.length>0&&(h=ve(h,d)),F(h,o.shape)},b:()=>{const c=Rn(o,0),h=un(c,Yn(o),Je(o));let d=D(n,D(r,h));const p=Kt(a.shape,i);return p.length>0&&(d=ve(d,p)),F(d,a.shape)}}}},{kernelName:Ll,inputsToSave:["x","alpha"],gradFunc:(n,t)=>{const[e,s]=t,r=Rn(e,0);return{x:()=>un(r,n,D(n,s)),alpha:()=>{let o=un(r,Je(n),D(n,e));const a=Kt(s.shape,n.shape);return a.length>0&&(o=ve(o,a)),F(o,s.shape)}}}},{kernelName:Pl,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{axis:r}=e;let o=[];return o=null==r?s.shape.map((a,i)=>i):"number"==typeof r?[r]:r,{x:()=>function dO(n,t,e){const s=n.shape.length,r=s-e.length,o=_t(e,s);let a=n;null!=o&&(a=Qe(n,o));const i=a.shape.slice(),u=i.splice(s-e.length,e.length).reduce((d,p)=>d*p,1);i.push(u);let h=function hO(n,t,e){const s=n.shape.slice();s[e]=1;const r=F(t,s),o=xu(n,e,!0,!1),a=xu(n,e,!0,!0),i=D(o,a);return D(r,i)}(a.reshape(i),t,r);if(h=h.reshape(a.shape),null!=o){const d=Ur(o);h=Qe(h,d)}return h}(s,n,o)}}},{kernelName:Wa,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>$e(n,St(gt(e)))}}},{kernelName:Ga,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t,s=D(Gr(e,6),zo(e));return{x:()=>D(n,de(s,"float32"))}}},{kernelName:Ua,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(n,de(zo(e),"float32"))}}},{kernelName:Ml,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>F(n,e.shape)}}},{kernelName:Bl,inputsToSave:["images"],gradFunc:(n,t,e)=>{const[s]=t,r={dy:n,images:s};return{images:()=>E.runKernel(dh,r,e)}}},{kernelName:zl,inputsToSave:["images"],gradFunc:(n,t,e)=>{const[s]=t,r={dy:n,images:s};return{images:()=>E.runKernel(hh,r,e)}}},{kernelName:Vl,gradFunc:(n,t,e)=>{const{dims:s}=e,r=je(s,n.shape);return{x:()=>cs(n,r)}}},{kernelName:Ha,gradFunc:n=>({x:()=>Je(n)})},{kernelName:ja,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>St($e(n,D(yr(e,1.5),2)))}}},{kernelName:Wl,inputsToSave:["condition"],gradFunc:(n,t)=>{const[e]=t;return{condition:()=>de(Je(e),"float32"),t:()=>D(n,de(e,n.dtype)),e:()=>D(n,de(Su(e),n.dtype))}}},{kernelName:Ka,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>{const s=Rn(e,_e(0)),r=_e(Td),o=_e($d),a=D(n,o),i=D(D(n,r),Bn(de(e,"float32")));return un(s,a,i)}}}},{kernelName:Ya,outputsToSave:[!0],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(n,D(e,be(_e(1),e)))}}},{kernelName:Za,gradFunc:n=>({x:()=>Je(n)})},{kernelName:qa,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(yu(de(e,"float32")),n)}}},{kernelName:Xa,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(Yh(de(e,"float32")),n)}}},{kernelName:Ul,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{begin:r,size:o}=e,a=s.shape,[i,l]=Kh(s,r,o),u=[];for(let c=0;c<n.rank;c++)u.push([i[c],a[c]-i[c]-l[c]]);return{x:()=>Sr(n,u)}}},{kernelName:Kl,outputsToSave:[!0],gradFunc:(n,t,e)=>{const[s]=t,{dim:r}=e,a=D(n,s);return{logits:()=>be(a,D(ve(a,[r],!0),s))}}},{kernelName:Qa,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(n,As(e))}}},mv,mv,gv,gv,{kernelName:Ja,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>$e(n,D(yn(de(e,"float32")),2))}}},{kernelName:ei,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=_e(2);return{a:()=>D(n,D(r,be(e,s))),b:()=>D(n,D(r,be(s,e)))}}},{kernelName:vh,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(n,D(de(e,"float32"),2))}}},{kernelName:oi,gradFunc:n=>({x:()=>Je(n)})},{kernelName:ti,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Ve(e.shape,s.shape);return{a:()=>{let i=n;const l=Kt(e.shape,r);return l.length>0&&(i=ve(i,l)),F(i,e.shape)},b:()=>{let i=n;const l=Kt(s.shape,r);return l.length>0&&(i=ve(i,l)),F(St(i),s.shape)}}}},{kernelName:Gl,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,r=s.shape.slice(),{axis:o}=e;je(o,s.shape).forEach(u=>{r[u]=1});const i=F(n,r),l=D(i,Vn(s.shape,"float32"));return{x:()=>l}}},{kernelName:ni,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>$e(n,gt(yu(e)))}}},{kernelName:si,outputsToSave:[!0],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(be(_e(1),gt(e)),n)}}},{kernelName:ri,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{reps:r}=e;return{x:()=>{let a=Je(s);if(1===s.rank)for(let i=0;i<r[0];++i)a=ne(a,et(n,[i*s.shape[0]],[s.shape[0]]));else if(2===s.rank)for(let i=0;i<r[0];++i)for(let l=0;l<r[1];++l)a=ne(a,et(n,[i*s.shape[0],l*s.shape[1]],[s.shape[0],s.shape[1]]));else if(3===s.rank)for(let i=0;i<r[0];++i)for(let l=0;l<r[1];++l)for(let u=0;u<r[2];++u)a=ne(a,et(n,[i*s.shape[0],l*s.shape[1],u*s.shape[2]],[s.shape[0],s.shape[1],s.shape[2]]));else{if(4!==s.rank)throw new Error(`Gradient for tile operation is not implemented for rank-${s.rank} tensors yet.`);for(let i=0;i<r[0];++i)for(let l=0;l<r[1];++l)for(let u=0;u<r[2];++u)for(let c=0;c<r[3];++c)a=ne(a,et(n,[i*s.shape[0],l*s.shape[1],u*s.shape[2],c*s.shape[3]],[s.shape[0],s.shape[1],s.shape[2],s.shape[3]]))}return a}}}},{kernelName:So,gradFunc:(n,t,e)=>{const s=e,{perm:r}=s,o=Ur(r);return{x:()=>Qe(n,o)}}},{kernelName:Xl,gradFunc:(n,t,e)=>{const s=e,{axis:r}=s;return{value:()=>Dn(n,r)}}},{kernelName:Zl,inputsToSave:["segmentIds"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>function HO(n,t){const e=Qs(t,Je(t)),s=vi(n,e);let r=vr(t,_e(0,"int32"));const o=s.rank-r.rank;for(let i=0;i<o;++i)r=wn(r,i+1);r=ws(r,Vn(s.shape,"bool"));const a=Je(s);return un(r,s,a)}(n,e)}}},{kernelName:Yl,gradFunc:n=>({x:()=>Je(n)})}];for(const n of KO)wb(n);Z().prototype.abs=function(){return this.throwIfDisposed(),jt(this)},Z().prototype.acos=function(){return this.throwIfDisposed(),um(this)},Z().prototype.acosh=function(){return this.throwIfDisposed(),cm(this)},Z().prototype.add=function(n){return this.throwIfDisposed(),ne(this,n)},Z().prototype.all=function(n,t){return this.throwIfDisposed(),qh(this,n,t)},Z().prototype.any=function(n,t){return this.throwIfDisposed(),hu(this,n,t)},Z().prototype.argMax=function(n){return this.throwIfDisposed(),Ao(this,n)},Z().prototype.argMin=function(n){return this.throwIfDisposed(),hm(this,n)},Z().prototype.asScalar=function(){return this.throwIfDisposed(),C(1===this.size,()=>"The array must have only 1 element."),F(this,[])},Z().prototype.asType=function(n){return this.throwIfDisposed(),de(this,n)},Z().prototype.as1D=function(){return this.throwIfDisposed(),F(this,[this.size])},Z().prototype.as2D=function(n,t){return this.throwIfDisposed(),F(this,[n,t])},Z().prototype.as3D=function(n,t,e){return this.throwIfDisposed(),F(this,[n,t,e])},Z().prototype.as4D=function(n,t,e,s){return this.throwIfDisposed(),F(this,[n,t,e,s])},Z().prototype.as5D=function(n,t,e,s,r){return this.throwIfDisposed(),F(this,[n,t,e,s,r])},Z().prototype.asin=function(){return this.throwIfDisposed(),dm(this)},Z().prototype.asinh=function(){return this.throwIfDisposed(),pm(this)},Z().prototype.atan=function(){return this.throwIfDisposed(),fm(this)},Z().prototype.atan2=function(n){return this.throwIfDisposed(),mm(this,n)},Z().prototype.atanh=function(){return this.throwIfDisposed(),gm(this)},Z().prototype.avgPool=function(n,t,e,s){return this.throwIfDisposed(),mu(this,n,t,e,s)},Z().prototype.batchToSpaceND=function(n,t){return this.throwIfDisposed(),gu(this,n,t)},Z().prototype.batchNorm=function(n,t,e,s,r){return this.throwIfDisposed(),mi(this,n,t,e,s,r)},Z().prototype.broadcastTo=function(n){return this.throwIfDisposed(),Fo(this,n)},Z().prototype.cast=function(n){return this.throwIfDisposed(),de(this,n)},Z().prototype.ceil=function(){return this.throwIfDisposed(),Nm(this)},Z().prototype.clipByValue=function(n,t){return this.throwIfDisposed(),zn(this,n,t)},Z().prototype.concat=function(n,t){return this.throwIfDisposed(),n instanceof rt&&(n=[n]),Mt([this,...n],t)},Z().prototype.conv1d=function(n,t,e,s,r,o){return this.throwIfDisposed(),Xh(this,n,t,e,s,r,o)},Z().prototype.conv2dTranspose=function(n,t,e,s,r){return this.throwIfDisposed(),Zh(this,n,t,e,s,r)},Z().prototype.conv2d=function(n,t,e,s,r,o){return this.throwIfDisposed(),wr(this,n,t,e,s,r,o)},Z().prototype.cos=function(){return this.throwIfDisposed(),yu(this)},Z().prototype.cosh=function(){return this.throwIfDisposed(),Yh(this)},Z().prototype.cumprod=function(n,t,e){return this.throwIfDisposed(),xu(this,n,t,e)},Z().prototype.cumsum=function(n,t,e){return this.throwIfDisposed(),Qh(this,n,t,e)},Z().prototype.depthToSpace=function(n,t){return this.throwIfDisposed(),Rm(this,n,t)},Z().prototype.depthwiseConv2d=function(n,t,e,s,r,o){return this.throwIfDisposed(),gi(this,n,t,e,s,r,o)},Z().prototype.dilation2d=function(n,t,e,s,r){return this.throwIfDisposed(),Dm(this,n,t,e,s,r)},Z().prototype.divNoNan=function(n){return this.throwIfDisposed(),Fm(this,n)},Z().prototype.div=function(n){return this.throwIfDisposed(),$e(this,n)},Z().prototype.dot=function(n){return this.throwIfDisposed(),Om(this,n)},Z().prototype.elu=function(){return this.throwIfDisposed(),yi(this)},Z().prototype.equal=function(n){return this.throwIfDisposed(),Zn(this,n)},Z().prototype.erf=function(){return this.throwIfDisposed(),Lm(this)},Z().prototype.euclideanNorm=function(n,t){return this.throwIfDisposed(),Mm(this,n,t)},Z().prototype.exp=function(){return this.throwIfDisposed(),Bn(this)},Z().prototype.expandDims=function(n){return this.throwIfDisposed(),wn(this,n)},Z().prototype.expm1=function(){return this.throwIfDisposed(),zm(this)},Z().prototype.fft=function(){return this.throwIfDisposed(),Au(this)},Z().prototype.flatten=function(){return this.throwIfDisposed(),F(this,[this.size])},Z().prototype.floor=function(){return this.throwIfDisposed(),wi(this)},Z().prototype.floorDiv=function(n){return this.throwIfDisposed(),Vh(this,n)},Z().prototype.gather=function(n,t,e){return this.throwIfDisposed(),vi(this,n,t,e)},Z().prototype.greaterEqual=function(n){return this.throwIfDisposed(),vr(this,n)},Z().prototype.greater=function(n){return this.throwIfDisposed(),Rn(this,n)},Z().prototype.ifft=function(){return this.throwIfDisposed(),Ii(this)},Z().prototype.irfft=function(){return this.throwIfDisposed(),pd(this)},Z().prototype.isFinite=function(){return this.throwIfDisposed(),Bm(this)},Z().prototype.isInf=function(){return this.throwIfDisposed(),Vm(this)},Z().prototype.isNaN=function(){return this.throwIfDisposed(),Wm(this)},Z().prototype.leakyRelu=function(n){return this.throwIfDisposed(),bu(this,n)},Z().prototype.lessEqual=function(n){return this.throwIfDisposed(),Gr(this,n)},Z().prototype.less=function(n){return this.throwIfDisposed(),Si(this,n)},Z().prototype.localResponseNormalization=function(n,t,e,s){return this.throwIfDisposed(),Um(this,n,t,e,s)},Z().prototype.logSigmoid=function(){return this.throwIfDisposed(),Gm(this)},Z().prototype.logSoftmax=function(n){return this.throwIfDisposed(),td(this,n)},Z().prototype.logSumExp=function(n,t){return this.throwIfDisposed(),vu(this,n,t)},Z().prototype.log=function(){return this.throwIfDisposed(),Yn(this)},Z().prototype.log1p=function(){return this.throwIfDisposed(),wu(this)},Z().prototype.logicalAnd=function(n){return this.throwIfDisposed(),ws(this,n)},Z().prototype.logicalNot=function(){return this.throwIfDisposed(),Su(this)},Z().prototype.logicalOr=function(n){return this.throwIfDisposed(),nd(this,n)},Z().prototype.logicalXor=function(n){return this.throwIfDisposed(),Hm(this,n)},Z().prototype.matMul=function(n,t,e){return this.throwIfDisposed(),Ke(this,n,t,e)},Z().prototype.maxPool=function(n,t,e,s){return this.throwIfDisposed(),Cu(this,n,t,e,s)},Z().prototype.max=function(n,t){return this.throwIfDisposed(),ls(this,n,t)},Z().prototype.maximum=function(n){return this.throwIfDisposed(),Qs(this,n)},Z().prototype.mean=function(n,t){return this.throwIfDisposed(),At(this,n,t)},Z().prototype.min=function(n,t){return this.throwIfDisposed(),xi(this,n,t)},Z().prototype.minimum=function(n){return this.throwIfDisposed(),Hr(this,n)},Z().prototype.mirrorPad=function(n,t){return this.throwIfDisposed(),Km(this,n,t)},Z().prototype.mod=function(n){return this.throwIfDisposed(),qm(this,n)},Z().prototype.mul=function(n){return this.throwIfDisposed(),D(this,n)},Z().prototype.neg=function(){return this.throwIfDisposed(),St(this)},Z().prototype.norm=function(n,t,e){return this.throwIfDisposed(),bi(this,n,t,e)},Z().prototype.notEqual=function(n){return this.throwIfDisposed(),Po(this,n)},Z().prototype.oneHot=function(n,t=1,e=0){return this.throwIfDisposed(),di(this,n,t,e)},Z().prototype.onesLike=function(){return this.throwIfDisposed(),Qn(this)},Z().prototype.pad=function(n,t){return this.throwIfDisposed(),Sr(this,n,t)},Z().prototype.pool=function(n,t,e,s,r,o){return this.throwIfDisposed(),Xm(this,n,t,e,s,r,o)},Z().prototype.pow=function(n){return this.throwIfDisposed(),yr(this,n)},Z().prototype.prelu=function(n){return this.throwIfDisposed(),ku(this,n)},Z().prototype.prod=function(n,t){return this.throwIfDisposed(),Zm(this,n,t)},Z().prototype.reciprocal=function(){return this.throwIfDisposed(),Jm(this)},Z().prototype.relu=function(){return this.throwIfDisposed(),Rs(this)},Z().prototype.relu6=function(){return this.throwIfDisposed(),od(this)},Z().prototype.reshapeAs=function(n){return this.throwIfDisposed(),F(this,n.shape)},Z().prototype.reshape=function(n){return this.throwIfDisposed(),F(this,n)},Z().prototype.resizeBilinear=function(n,t,e){return this.throwIfDisposed(),$w(this,n,t,e)},Z().prototype.resizeNearestNeighbor=function(n,t,e){return this.throwIfDisposed(),Ew(this,n,t,e)},Z().prototype.reverse=function(n){return this.throwIfDisposed(),cs(this,n)},Z().prototype.rfft=function(){return this.throwIfDisposed(),Ru(this)},Z().prototype.round=function(){return this.throwIfDisposed(),ad(this)},Z().prototype.rsqrt=function(){return this.throwIfDisposed(),id(this)},Z().prototype.selu=function(){return this.throwIfDisposed(),ld(this)},Z().prototype.separableConv2d=function(n,t,e,s,r,o){return this.throwIfDisposed(),ud(this,n,t,e,s,r,o)},Z().prototype.sigmoid=function(){return this.throwIfDisposed(),As(this)},Z().prototype.sign=function(){return this.throwIfDisposed(),tg(this)},Z().prototype.sin=function(){return this.throwIfDisposed(),cd(this)},Z().prototype.sinh=function(){return this.throwIfDisposed(),hd(this)},Z().prototype.slice=function(n,t){return this.throwIfDisposed(),et(this,n,t)},Z().prototype.softmax=function(n){return this.throwIfDisposed(),_u(this,n)},Z().prototype.softplus=function(){return this.throwIfDisposed(),Lo(this)},Z().prototype.spaceToBatchND=function(n,t){return this.throwIfDisposed(),Iu(this,n,t)},Z().prototype.split=function(n,t){return this.throwIfDisposed(),Wn(this,n,t)},Z().prototype.sqrt=function(){return this.throwIfDisposed(),yn(this)},Z().prototype.square=function(){return this.throwIfDisposed(),gt(this)},Z().prototype.squaredDifference=function(n){return this.throwIfDisposed(),fd(this,n)},Z().prototype.squeeze=function(n){return this.throwIfDisposed(),Kr(this,n)},Z().prototype.stack=function(n,t){this.throwIfDisposed();const e=n instanceof rt?[this,n]:[this,...n];return Dn(e,t)},Z().prototype.step=function(n){return this.throwIfDisposed(),zo(this,n)},Z().prototype.stridedSlice=function(n,t,e,s,r,o,a,i){return this.throwIfDisposed(),ng(this,n,t,e,s,r,o,a,i)},Z().prototype.sub=function(n){return this.throwIfDisposed(),be(this,n)},Z().prototype.sum=function(n,t){return this.throwIfDisposed(),ve(this,n,t)},Z().prototype.tan=function(){return this.throwIfDisposed(),sg(this)},Z().prototype.tanh=function(){return this.throwIfDisposed(),Do(this)},Z().prototype.tile=function(n){return this.throwIfDisposed(),us(this,n)},Z().prototype.toBool=function(){return this.throwIfDisposed(),de(this,"bool")},Z().prototype.toFloat=function(){return this.throwIfDisposed(),de(this,"float32")},Z().prototype.toInt=function(){return this.throwIfDisposed(),de(this,"int32")},Z().prototype.topk=function(n,t){return this.throwIfDisposed(),rg(this,n,t)},Z().prototype.transpose=function(n){return this.throwIfDisposed(),Qe(this,n)},Z().prototype.unique=function(n){return this.throwIfDisposed(),og(this,n)},Z().prototype.unsortedSegmentSum=function(n,t){return this.throwIfDisposed(),gd(this,n,t)},Z().prototype.unstack=function(n){return this.throwIfDisposed(),hs(this,n)},Z().prototype.where=function(n,t){return this.throwIfDisposed(),un(n,this,t)},Z().prototype.zerosLike=function(){return this.throwIfDisposed(),Je(this)};class tr extends Error{constructor(t){super(t),Object.setPrototypeOf(this,tr.prototype)}}class vs extends Error{constructor(t){super(t),Object.setPrototypeOf(this,vs.prototype)}}class L extends Error{constructor(t){super(t),Object.setPrototypeOf(this,L.prototype)}}class Ue extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Ue.prototype)}}class Wg extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Wg.prototype)}}class xv{constructor(t){this.maxEntries=t||100,this.cache=new Map}get(t){let e;return this.cache.has(t)&&(e=this.cache.get(t),this.cache.delete(t),this.cache.set(t,e)),e}put(t,e){if(this.cache.has(t))this.cache.delete(t);else if(this.cache.size>=this.maxEntries){const s=this.cache.keys().next().value;this.cache.delete(s)}this.cache.set(t,e)}getMaxEntries(){return this.maxEntries}setMaxEntries(t){if(t<0)throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${t}.`);if(this.maxEntries>t)for(let e=0;e<this.maxEntries-t;e++){const s=this.cache.keys().next().value;this.cache.delete(s)}this.maxEntries=t}}function Vo(n,t){if(Array.isArray(n)){let e=[];for(let s=0;s<t;s++)e=e.concat(n);return e}{const e=new Array(t);return e.fill(n),e}}function ps(n,t){if(!n)throw new Wg(t)}function bv(n,t){let e=0;for(const s of n)s===t&&e++;return e}function Gn(n){return 1===n.length?n[0]:n}function dt(n){return Array.isArray(n)?n:[n]}function kr(n){const e=n.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==e[0]?e:"private"+e}function Wo(n){return n.length<=1||-1===n.indexOf("_")?n:n.replace(/[_]+(\w|$)/g,(t,e)=>e.toUpperCase())}let Ss={};function Ug(n){if(null==n)return null;const t={};return t.className=n.getClassName(),t.config=n.getConfig(),t}function Gg(n){if(null!=n&&"object"==typeof n)if(Array.isArray(n))n.forEach(t=>Gg(t));else{const t=Object.keys(n);for(const e of t){const s=n[e];null!=s&&"object"==typeof s&&(Array.isArray(s)||"ndarray"!==s.type||"number"!=typeof s.value?Gg(s):n[e]=s.value)}}}function Lu(n,t={},e={},s="object",r=!1){if("string"==typeof n){let a;if(n in e)a=e[n];else if(n in Ss)a=Ss[n];else if(a=t[n],null==a)throw new L(`Unknown ${s}: ${n}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return a}{const o=n;if(null==o.className||null==o.config)throw new L(`${s}: Improper config format: ${JSON.stringify(o)}.\n'className' and 'config' must set.`);const a=o.className;let i,l;if(a in e?[i,l]=e[a]:a in Ss?[i,l]=Ss.className:a in t&&([i,l]=t[a]),null==i)throw new L(`Unknown ${s}: ${a}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=l){const u={};for(const p of Object.keys(Ss))u[p]=Ss[p];for(const p of Object.keys(e))u[p]=e[p];o.config.customObjects=u;const h=Object.assign({},Ss);for(const p of Object.keys(e))Ss[p]=e[p];Gg(o.config);const d=l(i,o.config,e,r);return Ss=Object.assign({},h),d}{const u=Object.assign({},Ss);for(const h of Object.keys(e))Ss[h]=e[h];const c=new i(o.config);return Ss=Object.assign({},u),c}}}function Ed(n,t){return-1*function qO(n,t){return n<t?-1:n>t?1:0}(n,t)}function Xr(n){if(null==n)return n;const t=[];for(const e of n)-1===t.indexOf(e)&&t.push(e);return t}function XO(n){if(null==n)throw new L(`Invalid value in obj: ${JSON.stringify(n)}`);for(const t in n)if(n.hasOwnProperty(t))return!1;return!0}function Uo(n,t,e){if(null!=e&&n.indexOf(e)<0)throw new L(`${e} is not a valid ${t}.  Valid values are ${n} or null/undefined.`)}function Hg(n,t,e=0,s=1/0){return ps(e>=0),ps(s>=e),Array.isArray(n)&&n.length>=e&&n.length<=s&&n.every(r=>typeof r===t)}function hn(n,t){Array.isArray(n)?(C(n.length>0,()=>`${t} is unexpectedly an empty array.`),n.forEach((e,s)=>hn(e,`element ${s+1} of ${t}`))):C(Number.isInteger(n)&&n>0,()=>`Expected ${t} to be a positive integer, but got ${wv(n)}.`)}function wv(n){return null===n?"null":Array.isArray(n)?"["+n.map(t=>wv(t)).join(",")+"]":"string"==typeof n?`"${n}"`:`${n}`}function vv(n){return"relu"===n?"relu":"linear"===n?"linear":"elu"===n?"elu":null}let YO=0;function Sv(){return YO++}const _d={};function Ad(n=""){return n in _d||(_d[n]=0),_d[n]+=1,n+_d[n].toString()}const QO=["channelsFirst","channelsLast"],JO=["nearest","bilinear"],eL=["valid","same","causal"],tL=["max","avg"],nL=["sum","mul","concat","ave"],Ti=new Map;function Vt(n){Uo(QO,"DataFormat",n)}function fs(n){Uo(eL,"PaddingMode",n)}function Cv(n){Uo(tL,"PoolMode",n)}const Pu=[];function Go(n,t){Pu.push(n);try{const e=t();return Pu.pop(),e}catch(e){throw Pu.pop(),e}}function Iv(n){if(!Tv(n))throw new Error("Not a valid tensor name: '"+n+"'");return function rL(){return 0===Pu.length?"":Pu.join("/")+"/"}()+n}function kv(n){if(!Tv(n))throw new Error("Not a valid tensor name: '"+n+"'");Ti.has(n)||Ti.set(n,0);const t=Ti.get(n);if(Ti.set(n,Ti.get(n)+1),t>0){const e=`${n}_${t}`;return Ti.set(e,1),e}return n}const oL=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function Tv(n){return!!n.match(oL)}function aL(n){return n===parseInt(n.toString(),10)}function Zr(n,t,e){null==t&&(t=0),null==e&&(e=n.length);let s=1;for(let r=t;r<e;++r)s*=n[r];return s}function $i(n){if(0===n.length)return Number.NaN;let t=Number.POSITIVE_INFINITY;for(let e=0;e<n.length;e++){const s=n[e];s<t&&(t=s)}return t}function Yr(n){if(0===n.length)return Number.NaN;let t=Number.NEGATIVE_INFINITY;for(let e=0;e<n.length;e++){const s=n[e];s>t&&(t=s)}return t}function Ds(n,t){if(t<n)throw new L(`end (${t}) < begin (${n}) is forbidden.`);const e=[];for(let s=n;s<t;++s)e.push(s);return e}let Rd;function tn(){return null==Rd&&(Rd=a0().epsilon()),Rd}function nr(n,t){return de(n,t)}function Mu(n,t=-1){const e=n.shape.slice();return t<0&&(t=e.length+t+1),e.splice(t,0,1),F(n,e)}function Ho(n,t,e){return z(()=>{switch(n.rank){case 1:return $u(n,t,e);case 2:return dd(n,[t,0],[e,n.shape[1]]);case 3:return Eu(n,[t,0,0],[e,n.shape[1],n.shape[2]]);case 4:return Ni(n,[t,0,0,0],[e,n.shape[1],n.shape[2],n.shape[3]]);case 5:return et(n,[t,0,0,0,0],[e,n.shape[1],n.shape[2],n.shape[3],n.shape[4]]);case 6:return et(n,[t,0,0,0,0,0],[e,n.shape[1],n.shape[2],n.shape[3],n.shape[4],n.shape[5]]);default:throw new L(`sliceAlongFirstAxis() received an unsupported tensor rank: ${n.rank}`)}})}function jg(n,t,e){return z(()=>{switch(n.rank){case 1:return $u(n,t,e);case 2:return dd(n,[0,t],[n.shape[0],e]);case 3:return Eu(n,[0,0,t],[n.shape[0],n.shape[1],e]);case 4:return Ni(n,[0,0,0,t],[n.shape[0],n.shape[1],n.shape[2],e]);default:throw new L(`sliceAlongLastAxis() received an unsupported tensor rank: ${n.rank}`)}})}function Dd(n,t,e,s){return z(()=>{switch(n.rank){case 1:return $u(n,t,e);case 2:switch(s){case 1:return Ho(n,t,e);case 2:return jg(n,t,e);default:throw new L(`The axis is not within the rank of the tensor ${s}`)}case 3:switch(s){case 1:return Ho(n,t,e);case 2:return Eu(n,[0,t,0],[n.shape[0],e,n.shape[2]]);case 3:return jg(n,t,e);default:throw new L(`The axis is not within the rank of the tensor ${s}`)}case 4:switch(s){case 1:return Ho(n,t,e);case 2:return Ni(n,[0,t,0,0],[n.shape[0],e,n.shape[2],n.shape[3]]);case 3:return Ni(n,[0,0,t,0],[n.shape[0],n.shape[1],e,n.shape[3]]);case 4:return jg(n,t,e);default:throw new L(`The axis is not within the rank of the tensor ${s}`)}default:throw new L(`sliceAlongLastAxis() received an unsupported tensor rank: ${n.rank}`)}})}function Kg(n,t=-1){let e;return t<0&&(e=n[0].rank,t=0!==e?e:0),t===n[0].rank&&(t=-1),Mt(n,t)}function Ev(n,t){switch(n.rank){case 1:return Im([n,t]);case 2:return km([n,t],0);case 3:return Tm([n,t],0);case 4:return $m([n,t],0);default:throw new L(`concatAlongFirstAxis() received an unsupported tensor rank: ${n.rank}`)}}function qg(n,t){if(Array.isArray(t)||(t=[t]),n.rank!==t.length)throw new L(`The length of input n (${t.length}) does not match the number of dimensions in input x (${n.rank})`);return us(n,t)}function Fd(n,t=0,e=1,s,r){return Tu(n,t,e,s,r)}function sr(n,t,e,s){if(n.rank<2||t.rank<2)throw new Ue(`dot requires both inputs to be rank >= 2 but got x shape = ${n.shape} and y shape = ${t.shape}`);if(t.rank>=3&&n.shape.slice(-1)[0]!==t.shape.slice(-2)[0])throw new Ue(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${n.shape} and  y shape = ${t.shape}`);if(2===n.rank&&2===t.rank)return fg({a:n,b:t,transposeA:!1,transposeB:!1,bias:s?Xg(n.rank,s,"channelsLast"):null,activation:e});{const r=n.shape.slice(),o=r.pop();n=F(n,[-1,o]);const a=t.shape.slice(),i=a.pop(),l=a.pop(),u=[...a,i],c=Array.from({length:t.rank},(f,g)=>0===g?t.rank-2:g<=t.rank-2?g-1:g);t=F(Qe(t,c),[l,-1]);const h=[...r,...u];return F(fg({a:n,b:t,transposeA:!1,transposeB:!1,bias:s?Xg(n.rank,s,"channelsLast"):null,activation:e}),h)}}function _v(n,t,e){return z(()=>(t=Array.isArray(t)?vn(t,"int32"):de(t,"int32"),vi(n,t,e)))}function zu(n){return D(n,n)}function Xg(n,t,e){const s=t.shape;if(1!==t.rank&&t.rank!==n)throw new L(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${n}`);if(5===n){if("channelsFirst"===e)return F(t,1===s.length?[1,s[0],1,1,1]:[1,s[3],s[0],s[1],s[2]]);if("channelsLast"===e)return F(t,1===s.length?[1,1,1,1,s[0]]:[1].concat(s))}else if(4===n){if("channelsFirst"===e)return F(t,1===s.length?[1,s[0],1,1]:[1,s[2],s[0],s[1]]);if("channelsLast"===e)return F(t,1===s.length?[1,1,1,s[0]]:[1].concat(s))}else if(3===n){if("channelsFirst"===e)return F(t,1===s.length?[1,s[0],1]:[1,s[1],s[0]]);if("channelsLast"===e)return F(t,1===s.length?[1,1,s[0]]:[1].concat(s))}else if(n<3)return t;throw new L(`Unsupported input rank by biasAdd: ${t.rank}`)}function Os(n,t,e){return z(()=>(null==e&&(e="channelsLast"),Vt(e),ne(n,Xg(n.rank,t,e))))}function Av(n,t,e,s){return z(()=>cg(n,t,e,s))}function Bu(n,t,e=!1){return e?n():t()}const mL=["fanIn","fanOut","fanAvg"],gL=["normal","uniform","truncatedNormal"];class Cs extends To{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}let Rv=(()=>{class n extends Cs{apply(e,s){return qt(e,s)}}return n.className="Zeros",n})();se(Rv);let Zg=(()=>{class n extends Cs{apply(e,s){return Vn(e,s)}}return n.className="Ones",n})();se(Zg);let Dv=(()=>{class n extends Cs{constructor(e){if(super(),"object"!=typeof e)throw new L(`Expected argument of type ConstantConfig but got ${e}`);if(void 0===e.value)throw new L(`config must have value set but got ${e}`);this.value=e.value}apply(e,s){return z(()=>D(_e(this.value),Vn(e,s)))}getConfig(){return{value:this.value}}}return n.className="Constant",n})();se(Dv);let Fv=(()=>{class n extends Cs{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,s){return jr(e,this.minval,this.maxval,s,this.seed)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}return n.className="RandomUniform",n})();se(Fv);let Ov=(()=>{class n extends Cs{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,s){if("float32"!==(s=s||"float32")&&"int32"!==s)throw new Ue(`randomNormal does not support dType ${s}.`);return Fd(e,this.mean,this.stddev,s,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}return n.className="RandomNormal",n})();se(Ov);let Lv=(()=>{class n extends Cs{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,s){if("float32"!==(s=s||"float32")&&"int32"!==s)throw new Ue(`truncatedNormal does not support dType ${s}.`);return md(e,this.mean,this.stddev,s,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}return n.className="TruncatedNormal",n})();se(Lv);let Pv=(()=>{class n extends Cs{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,s){return z(()=>{if(2!==e.length||e[0]!==e[1])throw new L("Identity matrix initializer can only be used for 2D square matrices.");return D(this.gain,ed(e[0]))})}getConfig(){return{gain:this.gain}}}return n.className="Identity",n})();se(Pv);let Jn=(()=>{class n extends Cs{constructor(e){if(super(),e.scale<0)throw new L(`scale must be a positive float. Got: ${e.scale}`);this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,function yL(n){Uo(mL,"FanMode",n)}(this.mode),this.distribution=null==e.distribution?"normal":e.distribution,function xL(n){Uo(gL,"Distribution",n)}(this.distribution),this.seed=e.seed}apply(e,s){const r=function bL(n,t="channelsLast"){let e,s;if(Vt(t),2===n.length)e=n[0],s=n[1];else if(-1!==[3,4,5].indexOf(n.length)){if("channelsFirst"===t){const r=Zr(n,2);e=n[1]*r,s=n[0]*r}else if("channelsLast"===t){const r=Zr(n,0,n.length-2);e=n[n.length-2]*r,s=n[n.length-1]*r}}else{const r=Zr(n);e=Math.sqrt(r),s=Math.sqrt(r)}return[e,s]}(e),o=r[0],a=r[1];let i=this.scale;if(i/="fanIn"===this.mode?Math.max(1,o):"fanOut"===this.mode?Math.max(1,a):Math.max(1,(o+a)/2),"normal"===this.distribution){const l=Math.sqrt(i);if("float32"!==(s=s||"float32")&&"int32"!==s)throw new Ue(`${this.getClassName()} does not support dType ${s}.`);return md(e,0,l,s,this.seed)}{const l=Math.sqrt(3*i);return jr(e,-l,l,s,this.seed)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}return n.className="VarianceScaling",n})();se(Jn);let Yg=(()=>{class n extends Jn{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Jn.className}}return n.className="GlorotUniform",n})();se(Yg);let Qg=(()=>{class n extends Jn{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Jn.className}}return n.className="GlorotNormal",n})();se(Qg);let Jg=(()=>{class n extends Jn{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Jn.className}}return n.className="HeNormal",n})();se(Jg);let ey=(()=>{class n extends Jn{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Jn.className}}return n.className="HeUniform",n})();se(ey);let ty=(()=>{class n extends Jn{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Jn.className}}return n.className="LeCunNormal",n})();se(ty);let ny=(()=>{class n extends Jn{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Jn.className}}return n.className="LeCunUniform",n})();se(ny);let Mv=(()=>{class n extends Cs{constructor(e){super(),this.DEFAULT_GAIN=1,this.ELEMENTS_WARN_SLOW=2e3,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed}apply(e,s){return z(()=>{if(e.length<2)throw new Ue("Shape must be at least 2D.");if("int32"!==s&&"float32"!==s&&void 0!==s)throw new TypeError(`Unsupported data type ${s}.`);const r=q(e.slice(0,-1)),o=e[e.length-1],a=r*o;a>this.ELEMENTS_WARN_SLOW&&console.warn(`Orthogonal initializer is being called on a matrix with more than ${this.ELEMENTS_WARN_SLOW} (${a}) elements: Slowness may result.`);const l=Fd([Math.max(o,r),Math.min(o,r)],0,1,s,this.seed),u=bg.qr(l,!1);let c=u[0];const d=u[1].flatten().stridedSlice([0],[Math.min(o,r)*Math.min(o,r)],[Math.min(o,r)+1]);return c=D(c,d.sign()),r<o&&(c=c.transpose()),D(_e(this.gain),c.reshape(e))})}getConfig(){return{gain:this.gain,seed:this.seed}}}return n.className="Orthogonal",n})();se(Mv);const zv={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function Bv(n,t={}){return Lu(n,is.getMap().classNameMap,t,"initializer")}function Rt(n){return Ug(n)}function Nt(n){if("string"==typeof n){const t=n in zv?zv[n]:n;if("GlorotNormal"===t)return new Qg;if("GlorotUniform"===t)return new Yg;if("HeNormal"===t)return new Jg;if("HeUniform"===t)return new ey;if("LeCunNormal"===t)return new ty;if("LeCunUniform"===t)return new ny;{const e={};return e.className=t,e.config={},Bv(e)}}return n instanceof Cs?n:Bv(n)}function sy(n){return Array.isArray(n)&&Array.isArray(n[0])}function Od(n){return 0===n.length?[]:Array.isArray(n[0])?n:[n]}function Le(n){let t;if(Array.isArray(n)){if(1!==n.length)throw new L(`Expected Tensor length to be 1; got ${n.length}`);t=n[0]}else t=n;return t}function at(n){if(Array.isArray(n)&&Array.isArray(n[0])){if(1===n.length)return n[0];throw new L(`Expected exactly 1 Shape; got ${n.length}`)}return n}function Ld(n){let t=0;for(const e of n)t+=0===e.shape.length?1:e.shape.reduce((s,r)=>s*r);return t}const Vv="Variable";class Ls{constructor(t,e="float32",s=Vv,r=!0,o=null){this.dtype=e??"float32",this.shape=t.shape,this.id=Sv(),this.originalName=Iv(s=s??Vv),this.name=kv(this.originalName),this.trainable_=r,this.constraint=o,this.val=ag(t,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(t){return this.assertNotDisposed(),function wL(n,t){if(n.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(n.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,t),this.val.id!==t.id&&(this.val.assign(t),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(t){this.trainable_=t,this.val.trainable=t}}function ry(n){return n.map(t=>t.read())}function oy(n){n.forEach(t=>{t[0].write(t[1])})}class Xt{constructor(t){this.dtype=t.dtype,this.shape=t.shape,this.ndim=null!=t.shape?t.shape.length:t.ndim,this.maxNDim=t.maxNDim,this.minNDim=t.minNDim,this.axes=t.axes||{}}}class Ps{constructor(t,e,s,r,o,a,i){this.dtype=t,this.shape=e,this.sourceLayer=s,this.inputs=r,this.callArgs=o,this.outputTensorIndex=i,this.id=Sv(),null!=a&&(this.originalName=Iv(a),this.name=kv(this.originalName)),this.rank=e.length}}let vL=0;class Pd{constructor(t,e){this.callArgs=e,this.id=vL++,this.outboundLayer=t.outboundLayer,this.inboundLayers=t.inboundLayers,this.nodeIndices=t.nodeIndices,this.tensorIndices=t.tensorIndices,this.inputTensors=t.inputTensors,this.outputTensors=t.outputTensors,this.inputMasks=t.inputMasks,this.outputMasks=t.outputMasks,this.inputShapes=t.inputShapes,this.outputShapes=t.outputShapes;for(const s of t.inboundLayers)s?.outboundNodes.push(this);t.outboundLayer.inboundNodes.push(this)}getConfig(){const t=[];for(const e of this.inboundLayers)t.push(null!=e?e.name:null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:t,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let SL=0;class qe extends To{constructor(t={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=SL++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let e=t.name;if(!e){const s=this.getClassName();e=kr(s)+"_"+Ad(s)}if(this.name=e,this.trainable_=null==t.trainable||t.trainable,null!=t.inputShape||null!=t.batchInputShape){let s;if(null!=t.batchInputShape)s=t.batchInputShape;else if(null!=t.inputShape){let o=null;null!=t.batchSize&&(o=t.batchSize),s=[o].concat(t.inputShape)}this.batchInputShape=s;let r=t.dtype;null==r&&(r=t.inputDType),null==r&&(r="float32"),this.dtype=r}this.initialWeights=null!=t.weights?t.weights:null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(t,e){return t.name+"_ib-"+e.toString()}getNodeAtIndex(t,e){if(0===this.inboundNodes.length)throw new vs(`The layer has never been called and thus has no defined ${e}.`);if(this.inboundNodes.length<=t)throw new L(`Asked to get ${e} at node ${t}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[t]}getInputAt(t){return Gn(this.getNodeAtIndex(t,"input").inputTensors)}getOutputAt(t){return Gn(this.getNodeAtIndex(t,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new tr(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new tr(`Layer ${this.name} is not connected, no input to return.`);return Gn(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new tr(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new tr(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return Gn(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map(t=>t())}get updates(){return this._updates}get built(){return this._built}set built(t){this._built=t}get trainable(){return this.trainable_}set trainable(t){this._trainableWeights.forEach(e=>e.trainable=t),this.trainable_=t}get trainableWeights(){return this.trainable_?this._trainableWeights.filter(t=>t.trainable):[]}set trainableWeights(t){this._trainableWeights=t}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter(t=>!t.trainable).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(t){this._nonTrainableWeights=t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(t){const e=dt(t);if(null==this.inputSpec||0===this.inputSpec.length)return;const s=dt(this.inputSpec);if(e.length!==s.length)throw new L(`Layer ${this.name} expects ${s.length} inputs, but it received ${e.length} input tensors. Input received: ${t}`);for(let r=0;r<e.length;r++){const o=e[r],a=s[r];if(null==a)continue;const i=o.rank;if(null!=a.ndim&&i!==a.ndim)throw new L(`Input ${r} is incompatible with layer ${this.name}: expected ndim=${a.ndim}, found ndim=${i}`);if(null!=a.maxNDim&&i>a.maxNDim)throw new L(`Input ${r} is incompatible with layer ${this.name}: expected max_ndim=${a.maxNDim}, found ndim=${i}`);if(null!=a.minNDim&&i<a.minNDim)throw new L(`Input ${r} is incompatible with layer ${this.name}: expected min_ndim=${a.minNDim}, found ndim=${i}.`);if(null!=a.dtype&&o.dtype!==a.dtype)throw new L(`Input ${r} is incompatible with layer ${this.name} : expected dtype=${a.dtype}, found dtype=${o.dtype}.`);if(a.axes){const l=o.shape;for(const u in a.axes){const c=Number(u),h=a.axes[u];if(null!=h&&-1===[h,null].indexOf(c>=0?l[c]:l[l.length+c]))throw new L(`Input ${r} is incompatible with layer ${this.name}: expected axis ${c} of input shape to have value ${h} but got shape ${l}.`)}}if(null!=a.shape)for(let l=0;l<a.shape.length;++l){const u=a.shape[l],c=o.shape[l];if(null!=u&&null!=c&&u!==c)throw new L(`Input ${r} is incompatible with layer ${this.name}: expected shape=${a.shape}, found shape=${o.shape}.`)}}}call(t,e){return t}invokeCallHook(t,e){null!=this._callHook&&this._callHook(t,e)}setCallHook(t){this._callHook=t}clearCallHook(){this._callHook=null}apply(t,e){e=e||{},this.assertNotDisposed();const s=dt(t),r=function IL(n){let t=!0;for(const e of dt(n))if(!(e instanceof Ps)){t=!1;break}return t}(t),o=function kL(n){let t=!0;for(const e of dt(n))if(e instanceof Ps){t=!1;break}return t}(t);if(r===o)throw new L("Arguments to apply() must be all SymbolicTensors or all Tensors");return Go(this.name,()=>{if(!this.built){this.assertInputCompatibility(t);const a=[];for(const i of dt(t))a.push(i.shape);this.build(Gn(a)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&o&&(this._refCount=1)}if(this.assertInputCompatibility(t),o){let a=this.call(t,e);this.supportsMasking&&this.setMaskMetadata(t,a);const i=dt(a),l=[];for(let u of i)-1!==s.indexOf(u)&&(u=u.clone()),l.push(u);if(a=Gn(l),null!=this.activityRegularizer)throw new Ue("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return a}{const a=function CL(n){n=dt(n);const t=[];for(const e of n)t.push(e.shape);return Gn(t)}(t),i=this.computeOutputShape(a);let l;const u="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(t)?a[0]:a),l=null!=i&&i.length>0&&Array.isArray(i[0])?i.map((c,h)=>new Ps(u,c,this,dt(t),e,this.name,h)):new Ps(u,i,this,dt(t),e,this.name),this.addInboundNode(t,l,null,null,a,i,e),this._refCount++,null!=this.activityRegularizer)throw new Ue("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return l}})}warnOnIncompatibleInputShape(t){if(null!=this.batchInputShape)if(t.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(t)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let e=!1;this.batchInputShape.forEach((s,r)=>{null!=s&&null!=t[r]&&t[r]!==s&&(e=!0)}),e&&console.warn(`The shape of the input tensor (${JSON.stringify(t)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new tr(`The layer ${this.name} has never been called and thus has no defined output shape.`);const t=[];for(const e of this.inboundNodes){const s=JSON.stringify(e.outputShapes);-1===t.indexOf(s)&&t.push(s)}if(1===t.length){const e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new tr(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new vs(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return Ld(this.weights)}build(t){this.built=!0}getWeights(t=!1){return ry(t?this.trainableWeights:this.weights)}setWeights(t){z(()=>{const e=this.weights;if(e.length!==t.length)throw new L(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${t.length}, but the layer was expecting ${e.length} weights. Provided weights: ${t}...`);if(0===e.length)return;const s=[],r=ry(e);for(let o=0;o<r.length;++o){const a=r[o],i=e[o],l=t[o];if(!Ye(a.shape,l.shape))throw new L(`Layer weight shape ${a.shape} not compatible with provided weight shape ${l.shape}`);s.push([i,l])}oy(s)})}addWeight(t,e,s,r,o,a,i,l){if(-1!==this._addedWeightNames.indexOf(t))throw new L(`Duplicate weight name ${t} for layer ${this.name}`);this._addedWeightNames.push(t),null==s&&(s="float32"),this.fastWeightInitDuringBuild&&(r=null!=l?l():Nt("zeros"));const u=r.apply(e,s),c=new Ls(u,s,t,a,i);return u.dispose(),null!=o&&this.addLoss(()=>o.apply(c.read())),null==a&&(a=!0),a?this._trainableWeights.push(c):this._nonTrainableWeights.push(c),c}setFastWeightInitDuringBuild(t){this.fastWeightInitDuringBuild=t}addLoss(t){null==t||Array.isArray(t)&&0===t.length||(t=dt(t),null!=this._losses&&this.losses.push(...t))}computeOutputShape(t){return t}computeMask(t,e){if(!this.supportsMasking){if(null!=e){if(!Array.isArray(e))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);e.forEach(s=>{if(null!=s)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)})}return null}return e}setMaskMetadata(t,e,s){if(!this.supportsMasking)return;const r=this.computeMask(t,s),o=dt(e),a=dt(r);if(o.length!==a.length)throw new Error(`${this.name} outputs ${o.length} tensors but ${o.length} masks for those tensors`);for(let i=0;i<o.length;i++)o[i].kerasMask=a[i]}addInboundNode(t,e,s,r,o,a,i=null){const l=dt(t);e=dt(e),s=dt(s),r=dt(r),o=Od(o),a=Od(a);const u=[],c=[],h=[];for(const d of l)u.push(d.sourceLayer),c.push(d.nodeIndex),h.push(d.tensorIndex);new Pd({outboundLayer:this,inboundLayers:u,nodeIndices:c,tensorIndices:h,inputTensors:l,outputTensors:e,inputMasks:s,outputMasks:r,inputShapes:o,outputShapes:a},i);for(let d=0;d<e.length;d++)e[d].sourceLayer=this,e[d].nodeIndex=this.inboundNodes.length-1,e[d].tensorIndex=d}getConfig(){const t={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(t.batchInputShape=this.batchInputShape),null!=this.dtype&&(t.dtype=this.dtype),t}disposeWeights(){return this.weights.forEach(t=>t.dispose()),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let t=0;return 0==--this._refCount&&(t=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:t}}}function Wv(n,t,e){if((null==t||null!=e&&e>0)&&(t=n.sourceLayer,e=n.nodeIndex),0===t.inboundNodes.length)return[n];{const s=t.inboundNodes[e];if(0===s.inboundLayers.length)return s.inputTensors;{const r=[];for(let o=0;o<s.inboundLayers.length;o++){const u=Wv(s.inputTensors[o],s.inboundLayers[o],s.nodeIndices[o]);for(const c of u)-1===r.indexOf(c)&&r.push(c)}return r}}}let Vu=(()=>{class n extends qe{constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:Ad("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new L("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let s=e.batchInputShape;if(null==s){if(null==e.inputShape)throw new L("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");s=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new L("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const r=e.dtype||"float32";this.batchInputShape=s,this.dtype=r,this.inputSpec=[{shape:s}];const o=new Ps(this.dtype,this.batchInputShape,this,[],{},this.name);o.nodeIndex=0,o.tensorIndex=0,new Pd({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[o],outputTensors:[o],inputMasks:[null],outputMasks:[null],inputShapes:[s],outputShapes:[s]})}apply(e,s){throw new L(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}return n.className="InputLayer",n})();function Uv(n){if(null==n.batchShape&&null==n.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=n.batchShape&&null!=n.shape)throw new L("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=n.batchShape;null!=n.shape&&null==t&&(t=[null].concat(n.shape));let e=n.dtype;return null==e&&(e="float32"),new Vu({batchInputShape:t,name:n.name,dtype:e,sparse:n.sparse}).inboundNodes[0].outputTensors[0]}se(Vu);class Qr{constructor(t){if(this.id2Value={},this.id2Mask={},this.name2Id={},t instanceof Qr)for(const e in t.id2Value)this.id2Value[e]=t.id2Value[e],e in t.id2Mask&&(this.id2Mask[e]=t.id2Mask[e]);else{if(null==t)return;for(const e of t)this.add(e.key,e.value)}}add(t,e,s){if(null!=this.id2Value[t.id])throw new L(`Duplicate key: name=${t.name}, id=${t.id}`);return this.id2Value[t.id]=function TL(n,t){if(null==n.dtype||n.dtype===t.dtype)return t;try{return de(t,n.dtype)}catch{throw new L(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${n.name}' (${n.dtype}).`)}}(t,e),this.name2Id[t.name]=t.id,null!=s&&(this.id2Mask[t.id]=s),this}addFeed(t){this.add(t.key,t.value)}hasKey(t){return null!=this.id2Value[t.id]}names(){return Object.keys(this.name2Id)}getValue(t){if(t instanceof Ps){if(null==this.id2Value[t.id])throw new L(`Nonexistent key: ${t.name}`);return this.id2Value[t.id]}{const e=this.name2Id[t];if(null==e)throw new L(`Feed dict has no SymbolicTensor name: ${t}`);return this.id2Value[e]}}getMask(t){if(t instanceof Ps){if(null==this.id2Value[t.id])throw new L(`Nonexistent key: ${t.name}`);return this.id2Mask[t.id]}{const e=this.name2Id[t];if(null==e)throw new L(`Feed dict has no SymbolicTensor name: ${t}`);return this.id2Mask[e]}}disposeMasks(){null!=this.id2Mask&&Be(this.id2Mask)}}const Md=new xv,zd=new xv;function Wu(n,t,e,s){const r=null!=e&&e.training,o=Array.isArray(n),a=o?n:[n],i=a.map(f=>f.name),l=[],u=t.names();for(const f of i)-1!==u.indexOf(f)?l.push(t.getValue(f)):l.push(null);null!=s&&(s.maxNumTensors=-1/0,s.minNumTensors=1/0);const c=i.join(",")+"|"+t.names().sort().join(",");let d,h=Md.get(c);if(null==h){const f=function EL(n,t){C(null!=n&&n.length>0,()=>"Expected at least one fetch, got none");let e=[],s={};if(1===n.length){const r=Gv(n[0],t);e=r.sorted,s=r.recipientMap}else{const r=new Set;for(const o of n){const{sorted:a,recipientMap:i}=Gv(o,t);for(const l of a)r.has(l.name)||(e.push(l),r.add(l.name));for(const l in i)null==s[l]&&(s[l]=new Set),i[l].forEach(u=>s[l].add(u))}}return{sorted:e,recipientCounts:_L(s)}}(a,t);h=f.sorted,d=f.recipientCounts,Md.put(c,h),zd.put(c,d)}d={},r||Object.assign(d,zd.get(c));const p=new Qr(t);for(let f=0;f<h.length;++f){if(null!=s){const $=Bh().numTensors;$>s.maxNumTensors&&(s.maxNumTensors=$),$<s.minNumTensors&&(s.minNumTensors=$)}const g=h[f],m=g.sourceLayer;if(m instanceof Vu)continue;const y=[],x=[],b=[];let w=!1;for(const $ of g.inputs){const R=p.getValue($),M=p.getMask($);y.push(R),x.push(M),null!=M&&(w=!0),r||(d[$.name]--,0===d[$.name]&&!t.hasKey($)&&-1===i.indexOf($.name)&&!R.isDisposed&&!0!==$.sourceLayer.stateful&&b.push(R))}w&&((e=e||{}).mask=x[0]);const S=dt(m.apply(y,e));let N=null;m.supportsMasking&&(N=m.computeMask(y,x));const k=AL(g),T=Array.isArray(k)?k:[k];for(let $=0;$<T.length;++$){p.hasKey(T[$])||p.add(T[$],S[$],Array.isArray(N)?N[0]:N);const R=i.indexOf(T[$].name);-1!==R&&(l[R]=S[$])}r||Be(b)}return p.disposeMasks(),o?l:l[0]}function _L(n){const t={};for(const e in n)t[e]=n[e].size;return t}function Gv(n,t){const e=new Set,s=[],r={};for(const i of t.names())e.add(i);const o=[],a=[];for(o.push(n);o.length>0;){const i=o[o.length-1];if(e.has(i.name)){o.pop();continue}const l=a[a.length-1]===o.length-1;if(0===i.inputs.length||l)o.pop(),s.push(i),e.add(i.name),l&&a.pop();else{a.push(o.length-1);for(const u of i.inputs)null==r[u.name]&&(r[u.name]=new Set),r[u.name].add(i.name),!e.has(u.name)&&o.push(u)}}return{sorted:s,recipientMap:r}}function AL(n){let t;if(1===n.sourceLayer.inboundNodes.length)t=n.sourceLayer.output;else{let e=null;for(let s=0;s<n.sourceLayer.inboundNodes.length;++s)for(const r of n.sourceLayer.inboundNodes[s].outputTensors)if(r.id===n.id){e=s;break}t=n.sourceLayer.getOutputAt(e)}return t}function ay(n,t){return z(()=>yn(ve(D(n,n),t,!0)))}B().registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES",()=>100,function $L(n){Md?.setMaxEntries(n),zd?.setMaxEntries(n)});class Uu extends To{getConfig(){return{}}}let Hv=(()=>{class n extends Uu{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return z(()=>{const s=ay(e,this.axis),r=zn(s,0,this.maxValue);return D(e,$e(r,ne(tn(),s)))})}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}return n.className="MaxNorm",n})();se(Hv);let jv=(()=>{class n extends Uu{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return z(()=>$e(e,ne(tn(),ay(e,this.axis))))}getConfig(){return{axis:this.axis}}}return n.className="UnitNorm",n})();se(jv);let Kv=(()=>{class n extends Uu{apply(e){return Rs(e)}}return n.className="NonNeg",n})();se(Kv);let qv=(()=>{class n extends Uu{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return z(()=>{const s=ay(e,this.axis),r=ne(D(this.rate,zn(s,this.minValue,this.maxValue)),D(1-this.rate,s));return D(e,$e(r,ne(tn(),s)))})}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}return n.className="MinMaxNorm",n})();se(qv);const Xv={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function nn(n){return Ug(n)}function Zv(n,t={}){return Lu(n,is.getMap().classNameMap,t,"constraint")}function sn(n){return null==n?null:"string"==typeof n?Zv({className:n in Xv?Xv[n]:n,config:{}}):n instanceof Uu?n:Zv(n)}function RL(n){return new Hv(n)}function DL(n){return new jv(n)}function FL(){return new Kv}function OL(n){return new qv(n)}function LL(){return new Rv}function PL(){return new Zg}function ML(n){return new Dv(n)}function zL(n){return new Fv(n)}function BL(n){return new Ov(n)}function VL(n){return new Lv(n)}function WL(n){return new Pv(n)}function UL(n){return new Jn(n)}function GL(n){return new Yg(n)}function HL(n){return new Qg(n)}function jL(n){return new Jg(n)}function KL(n){return new ey(n)}function qL(n){return new ty(n)}function XL(n){return new ny(n)}function ZL(n){return new Mv(n)}function Jr(n){return iy.apply(this,arguments)}function iy(){return(iy=(0,O.Z)(function*(n){if(null==n)return;const t=[],e=[],s=[];for(const r in n){const o=n[r];if("number"!=typeof o){const a=o;t.push(a.data()),e.push(r),s.push(a)}}if(t.length>0){const r=yield Promise.all(t);for(let o=0;o<r.length;++o)n[e[o]]=r[o][0];Be(s)}})).apply(this,arguments)}function Yv(n){if(null!=n)for(const t in n){const e=n[t];"number"!=typeof e&&e.dispose()}}class Ei{constructor(){this.validationData=null}setParams(t){this.params=t}onEpochBegin(t,e){return(0,O.Z)(function*(){})()}onEpochEnd(t,e){return(0,O.Z)(function*(){})()}onBatchBegin(t,e){return(0,O.Z)(function*(){})()}onBatchEnd(t,e){return(0,O.Z)(function*(){})()}onTrainBegin(t){return(0,O.Z)(function*(){})()}onTrainEnd(t){return(0,O.Z)(function*(){})()}setModel(t){}}class Qv{constructor(t,e=10){null==t&&(t=[]),this.callbacks=t,this.queueLength=e}append(t){this.callbacks.push(t)}setParams(t){for(const e of this.callbacks)e.setParams(t)}setModel(t){for(const e of this.callbacks)e.setModel(t)}onEpochBegin(t,e){var s=this;return(0,O.Z)(function*(){null==e&&(e={});for(const r of s.callbacks)yield r.onEpochBegin(t,e)})()}onEpochEnd(t,e){var s=this;return(0,O.Z)(function*(){null==e&&(e={});for(const r of s.callbacks)yield r.onEpochEnd(t,e)})()}onBatchBegin(t,e){var s=this;return(0,O.Z)(function*(){null==e&&(e={});for(const r of s.callbacks)yield r.onBatchBegin(t,e)})()}onBatchEnd(t,e){var s=this;return(0,O.Z)(function*(){null==e&&(e={});for(const r of s.callbacks)yield r.onBatchEnd(t,e)})()}onTrainBegin(t){var e=this;return(0,O.Z)(function*(){null==t&&(t={});for(const s of e.callbacks)yield s.onTrainBegin(t)})()}onTrainEnd(t){var e=this;return(0,O.Z)(function*(){null==t&&(t={});for(const s of e.callbacks)yield s.onTrainEnd(t)})()}}class JL extends Ei{constructor(){super()}onEpochBegin(t){var e=this;return(0,O.Z)(function*(){e.seen=0,e.totals={}})()}onBatchEnd(t,e){var s=this;return(0,O.Z)(function*(){null==e&&(e={});const r=null==e.size?0:e.size;s.seen+=r;for(const o in e){const a=e[o];if("number"==typeof a)s.totals.hasOwnProperty(o)||(s.totals[o]=0),s.totals[o]=s.totals[o]+a*r;else{let i;o in s.totals?i=s.totals[o]:s.totals[o]=0;const l=z(()=>ne(s.totals[o],D(a,r)));s.totals[o]=l,i?.dispose()}}})()}onEpochEnd(t,e){var s=this;return(0,O.Z)(function*(){if(null!=e)for(const r of s.params.metrics)null!=s.totals[r]&&("number"==typeof s.totals[r]?e[r]=s.totals[r]/s.seen:z(()=>{const o=D($e(1,s.seen),s.totals[r]);e[r]=o,s.totals[r].dispose(),en(e[r])}))})()}}class Jv extends Ei{onTrainBegin(t){var e=this;return(0,O.Z)(function*(){e.epoch=[],e.history={}})()}onEpochEnd(t,e){var s=this;return(0,O.Z)(function*(){null==e&&(e={}),s.epoch.push(t);for(const r in e)null==s.history[r]&&(s.history[r]=[]),s.history[r].push(e[r])})()}syncData(){var t=this;return(0,O.Z)(function*(){const e=[],s=[],r=[];for(const a in t.history){const i=t.history[a];for(let l=0;l<i.length;++l)"number"!=typeof i[l]&&(e.push(i[l].data()),s.push(a),r.push(l))}const o=yield Promise.all(e);for(let a=0;a<o.length;++a)t.history[s[a]][r[a]].dispose(),t.history[s[a]][r[a]]=o[a][0]})()}}class e1 extends Ei{constructor(t,e){if(super(),this.currentEpoch=0,this.nowFunc=t.nowFunc,this.nextFrameFunc=t.nextFrameFunc||wg,this.yieldEvery=e||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=t.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");wc(this.yieldEvery)&&(this.maybeWait=function ZO(n,t,e){let r,s=null!=e?e():gn();return(...a)=>{const i=null!=e?e():gn();return i-s<t||(s=i,r=n(...a)),r}}(this.maybeWait.bind(this),this.yieldEvery,this.nowFunc)),this.trainBegin=t.onTrainBegin,this.trainEnd=t.onTrainEnd,this.epochBegin=t.onEpochBegin,this.epochEnd=t.onEpochEnd,this.batchBegin=t.onBatchBegin,this.batchEnd=t.onBatchEnd,this.yield=t.onYield}maybeWait(t,e,s){var r=this;return(0,O.Z)(function*(){const o=[];null!=r.yield&&(yield Jr(s),o.push(r.yield(t,e,s))),o.push(r.nextFrameFunc()),yield Promise.all(o)})()}onEpochBegin(t,e){var s=this;return(0,O.Z)(function*(){s.currentEpoch=t,null!=s.epochBegin&&(yield Jr(e),yield s.epochBegin(t,e))})()}onEpochEnd(t,e){var s=this;return(0,O.Z)(function*(){const r=[];null!=s.epochEnd&&(yield Jr(e),r.push(s.epochEnd(t,e))),"epoch"===s.yieldEvery&&r.push(s.nextFrameFunc()),yield Promise.all(r)})()}onBatchBegin(t,e){var s=this;return(0,O.Z)(function*(){null!=s.batchBegin&&(yield Jr(e),yield s.batchBegin(t,e))})()}onBatchEnd(t,e){var s=this;return(0,O.Z)(function*(){const r=[];null!=s.batchEnd&&(yield Jr(e),r.push(s.batchEnd(t,e))),"batch"===s.yieldEvery?r.push(s.nextFrameFunc()):wc(s.yieldEvery)&&r.push(s.maybeWait(s.currentEpoch,t,e)),yield Promise.all(r)})()}onTrainBegin(t){var e=this;return(0,O.Z)(function*(){null!=e.trainBegin&&(yield Jr(t),yield e.trainBegin(t))})()}onTrainEnd(t){var e=this;return(0,O.Z)(function*(){null!=e.trainEnd&&(yield Jr(t),yield e.trainEnd(t))})()}}function t1(n,t){return null==n&&(n={}),n instanceof Ei?[n]:Array.isArray(n)&&n[0]instanceof Ei?n:dt(n).map(s=>new e1(s,t))}let n1=(()=>{class n{constructor(){}static registerCallbackConstructor(e,s){C(e>=0&&Number.isInteger(e),()=>`Verbosity level is expected to be an integer >= 0, but got ${e}`),n.checkForDuplicate(s),null==n.constructors[e]&&(n.constructors[e]=[]),n.constructors[e].push(s)}static checkForDuplicate(e){for(const s in n.constructors)n.constructors[+s].forEach(o=>{if(o===e)throw new L("Duplicate callback constructor.")})}static clear(){n.constructors={}}static createCallbacks(e){const s=[];for(const r in n.constructors){const o=+r;e>=o&&s.push(...n.constructors[o])}return s.map(r=>new r)}}return n.constructors={},n})();function s1(n,t,e,s,r,o,a,i,l){const u=new Jv,c=[new JL,...n1.createCallbacks(t)];null!=n&&c.push(...n),c.push(u);const h=new Qv(c);return h.setParams({epochs:e,initialEpoch:s,samples:r,steps:o,batchSize:a,verbose:t,doValidation:i,metrics:l}),{callbackList:h,history:u}}function Ms(n,t={},e=!1){return Lu(n,is.getMap().classNameMap,t,"layer",e)}function Bd(n,t){return z(()=>{"float32"!==n.dtype&&(n=de(n,"float32"));const e=ve(zu(n),t,!0),s=$o(e.shape,tn()),r=yn(Qs(e,s));return $e(n,r)})}function jo(n,t){return z(()=>At(zu(be(t,n)),-1))}function Vd(n,t){return z(()=>At(jt(be(t,n)),-1))}function _i(n,t){return z(()=>{const e=be(n,t),s=zn(jt(n),tn(),Number.MAX_VALUE),r=jt($e(e,s));return D(100,At(r,-1))})}function Gu(n,t,e=!1){return z(()=>{if(e)t=_u(t);else{const s=ve(t,t.shape.length-1,!0);t=$e(t,s)}return t=zn(t,tn(),1-tn()),St(ve(D(de(n,"float32"),Yn(t)),t.shape.length-1))})}function Wd(n,t,e=!1){return z(()=>{const s=de(wi(function cL(n){const t=[Zr(n.shape)];return F(n,t)}(n)),"int32"),r=(t=zn(t,tn(),1-tn())).shape;return Gu(F(di(s,r[r.length-1]),r),t,e)})}function Ud(n,t){return z(()=>{let e;return e=zn(t,tn(),1-tn()),e=Yn($e(e,be(1,e))),At(function oP(n,t){if(!Ye(n.shape,t.shape))throw new L(`logits and labels must have the same shape, but got shapes ${JSON.stringify(n.shape)} and ${JSON.stringify(t.shape)}`);return z(()=>{const e=Rs(t),s=St(jt(t));return ne(be(e,D(t,n)),wu(Bn(s)))})}(n,e),-1)})}function ly(n,t){return z(()=>{const e=Bd(n,-1),s=Bd(t,-1),r=D(e,s);return St(ve(r,-1))})}const Gd={meanSquaredError:jo,meanAbsoluteError:Vd,meanAbsolutePercentageError:_i,meanSquaredLogarithmicError:function eP(n,t){return z(()=>{const e=zn(t,tn(),Number.MAX_VALUE),s=Yn(ne(1,e)),r=zn(n,tn(),Number.MAX_VALUE),o=Yn(ne(1,r));return At(zu(be(s,o)),-1)})},squaredHinge:function tP(n,t){return z(()=>{const e=Qs(0,be(1,D(n,t)));return At(zu(e),-1)})},hinge:function nP(n,t){return z(()=>{const e=Qs(0,be(1,D(n,t)));return At(e,-1)})},categoricalHinge:function sP(n,t){return z(()=>{const e=ve(D(n,t),-1),s=ls(D(be(1,n),t),-1);return Qs(0,ne(1,be(s,e)))})},logcosh:function rP(n,t){return z(()=>{const e=Math.log(2),s=be(t,n),r=be(ne(s,Lo(D(-2,s))),e);return At(r,-1)})},categoricalCrossentropy:Gu,sparseCategoricalCrossentropy:Wd,binaryCrossentropy:Ud,kullbackLeiblerDivergence:function aP(n,t){return z(()=>{const e=zn(n,tn(),1),s=zn(t,tn(),1);return ve(D(n,Yn($e(e,s))),-1)})},poisson:function iP(n,t){return z(()=>{const e=Yn(ne(tn(),t));return At(be(t,D(n,e)),-1)})},cosineProximity:ly};function uy(n){if("string"==typeof n){if(n in Gd)return Gd[n];let t=`Unknown loss ${n}`;throw n.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${n}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new L(t)}return n}function cy(n,t){return z(()=>{const e=D(.5,Qn(t)),s=nr(Rn(t,e),n.dtype);return At(Zn(n,s),-1)})}function hy(n,t){return z(()=>nr(Zn(Ao(n,-1),Ao(t,-1)),"float32"))}function r1(n,t){return z(()=>de(ve(ws(Zn(n,1),Zn(t,1))),"float32"))}function o1(n,t){return z(()=>{const e=r1(n,t),s=function uP(n,t){return z(()=>de(ve(ws(Zn(n,0),Zn(t,1))),"float32"))}(n,t),r=ne(e,s);return de(un(Rn(r,0),$e(e,r),0),"float32")})}function a1(n,t){return Ud(n,t)}function i1(n,t){return n.rank===t.rank&&(n=Kr(n,[n.rank-1])),(t=Ao(t,-1)).dtype!==n.dtype&&(t=de(t,n.dtype)),de(Zn(n,t),"float32")}const dy=Gu,l1=Wd,Hd={binaryAccuracy:cy,categoricalAccuracy:hy,precision:o1,categoricalCrossentropy:dy,sparseCategoricalCrossentropy:l1,mse:jo,MSE:jo,mae:Vd,MAE:Vd,mape:_i,MAPE:_i,cosine:ly};function xP(n){if("string"==typeof n&&n in Hd)return Hd[n];if("string"!=typeof n&&null!=n)return n;throw new L(`Unknown metric ${n}`)}function jd(n){if(ps(null!==n,`Unknown LossOrMetricFn ${n}`),"string"==typeof n)return n;{let t;for(const e of Object.keys(Gd))if(Gd[e]===n){t=e;break}if(void 0!==t)return t;for(const e of Object.keys(Hd))if(Hd[e]===n){t=e;break}return void 0!==t?t:n.name}}function c1(n,t,e=!1){if(null==n||"object"!=typeof n||Object.getPrototypeOf(n)!==Object.prototype||!py(n))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(e){const s=JSON.stringify(n);s.length>1048576&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${s.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function py(n){if(null===n)return!0;if("object"==typeof n){if(Object.getPrototypeOf(n)===Object.prototype){const t=Object.keys(n);for(const e of t)if("string"!=typeof e||!py(n[e]))return!1;return!0}if(Array.isArray(n)){for(const t of n)if(!py(t))return!1;return!0}return!1}{const t=typeof n;return"string"===t||"number"===t||"boolean"===t}}function Kd(n,t,e=console.log){let s="";for(let r=0;r<n.length;++r)r>0&&(s=s.slice(0,s.length-1)+" "),s+=n[r],s=s.slice(0,t[r]),s+=" ".repeat(t[r]-s.length);e(s)}function CP(n,t,e){let s,r;try{r=n.inboundNodes.map(l=>JSON.stringify(l.inputShapes)).join(",")}catch{r="multiple"}try{s=JSON.stringify(n.outputShape)}catch{s="multiple"}Kd([`${n.name} (${n.getClassName()})`,r,s,n.countParams().toString()],t,e)}function NP(n,t,e,s){let r,o;try{o=n.inboundNodes.map(h=>JSON.stringify(h.inputShapes)).join(",")}catch{o="multiple"}try{r=JSON.stringify(n.outputShape)}catch{r="multiple"}const a=[];for(const h of n.inboundNodes)if(!(null!=e&&e.length>0&&-1===e.indexOf(h)))for(let d=0;d<h.inboundLayers.length;++d)a.push(`${h.inboundLayers[d].name}[${h.nodeIndices[d]}][${h.tensorIndices[d]}]`);const i=n.name,l=n.getClassName(),u=0===a.length?"":a[0];Kd([`${i} (${l})`,o,r,n.countParams().toString(),u],t,s);for(let h=1;h<a.length;++h)Kd(["","","","",a[h]],t,s)}function h1(n,t,e){return("inboundNodes"===n||"outputLayers"===n||"inputLayers"===n)&&0===t&&"string"==typeof e}function Hu(n,t){if(null===n)return null;if("string"==typeof n)return Wo(n);if("number"==typeof n||"boolean"==typeof n)return n;if(n instanceof Array){const e=[],s=n.length;for(let r=0;r<s;++r){const o=n[r];h1(t,r,o)?e.push(o):e.push(Hu(o,t))}return e}{const e={};for(const s of Object.keys(n)){const r=n[s];if("name"===s&&"string"==typeof r)e[s]=r;else{const o=Wo(s);e[o]=Hu(r,o)}}return e}}function fy(n,t){if(null==n)return null;if("string"==typeof n)return kr(n);if("number"==typeof n||"boolean"==typeof n)return n;if(n instanceof Array){const e=[],s=n.length;for(let r=0;r<s;++r){const o=n[r];h1(t,r,o)?e.push(o):e.push(fy(o,t))}return e}{const e={};for(const s of Object.keys(n)){const r=n[s];e[kr(s)]="name"!==s&&"className"!==s||"string"!=typeof r?fy(r,s):r}return e}}const qd="4.13.0";class zs extends qe{constructor(t){if(super({}),this.containerNodes=new Set,this.name=t.name,null==this.name){const x=this.getClassName().toLowerCase();this.name=Ad(x)}if(this.supportsMasking=!1,this.trainable_=!0,this.inputs=Array.isArray(t.inputs)?t.inputs.slice():[t.inputs],this.outputs=Array.isArray(t.outputs)?t.outputs.slice():[t.outputs],Xr(this.inputs).length!==this.inputs.length)throw new L(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map(x=>x.name)}`);Xr(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map(x=>x.name)}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const x of this.outputs){const w=x.nodeIndex,S=x.tensorIndex;this.outputLayers.push(x.sourceLayer),this.outputLayersNodeIndices.push(w),this.outputLayersTensorIndices.push(S)}for(const x of this.inputs){const b=x.sourceLayer,w=x.nodeIndex,S=x.tensorIndex;ps(0===w,"input layer has >1 nodes"),ps(0===S,"input layer has >1 tensors"),this.inputLayers.push(b),this.inputLayersNodeIndices.push(w),this.inputLayersTensorIndices.push(S)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let x=0;x<this.inputLayers.length;x++){const b=this.inputLayers[x];if(!(b instanceof Vu))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${t.inputs}. Input ${x} (0-based) originates from layer type ${b.getClassName()}.`);this.inputNames.push(b.name),this.feedInputShapes.push(b.batchInputShape),this.feedInputNames.push(b.name)}for(const x of this.outputLayers)this.outputNames.push(x.name);this.internalInputShapes=this.inputs.map(x=>x.shape),this.internalOutputShapes=this.outputs.map(x=>x.shape);const e={},s={},r={},o={},a={},i=[],l=(x,b,w,S,N,k)=>{(null==S||null==N||null==k)&&(S=x.sourceLayer,N=x.nodeIndex,k=x.tensorIndex);const T=S.inboundNodes[N];if(-1!==w.indexOf(T))throw new vs(`The tensor ${x.name} at layer "${S.name}" is part of a cycle.`);if(-1!==b.indexOf(T))return;this.containerNodes.add(zs.nodeKey(S,N)),S.id in a||(a[S.id]=Object.keys(a).length),-1===w.indexOf(T)&&w.push(T);const $=T.inboundLayers.length;for(let R=0;R<$;R++)l(T.inputTensors[R],b,w,T.inboundLayers[R],T.nodeIndices[R],T.tensorIndices[R]);for(b.push(T);w.indexOf(T)>=0;)w.splice(w.indexOf(T),1);i.push(T)},u=[],c=[];for(const x of this.outputs)l(x,u,c);const h=i.slice().reverse();for(const x of h){s[x.id]=x,x.id in e||(e[x.id]=0);let b=e[x.id];b=Math.max(b,null==r[x.outboundLayer.id]?0:r[x.outboundLayer.id]),r[x.outboundLayer.id]=b,o[x.outboundLayer.id]=x.outboundLayer,e[x.id]=b;for(let S=0;S<x.inboundLayers.length;S++){const T=x.inboundLayers[S].inboundNodes[x.nodeIndices[S]];e[T.id]=Math.max(b+1,null==e[T.id]?0:e[T.id]),s[T.id]=T}}const d={};for(const x in e){const b=e[x];b in d||(d[b]=[]),d[b].push(s[x])}const p={};for(const x in r){const b=r[x];b in p||(p[b]=[]),p[b].push(o[x])}let f=Object.keys(p).map(x=>parseInt(x,10)).sort(Ed);this.layers=[];for(const x of f){const b=p[x];b.sort((w,S)=>{const N=a[w.id],k=a[S.id];return N<k?-1:N>k?1:0});for(const w of b)w instanceof zs&&this.internalContainerRefs.push(w),this.layers.push(w)}this.layersByDepth=p,f=Object.keys(d).map(x=>parseInt(x,10)).sort(Ed);const g=this.inputs.slice(),m=[];for(const x of f)for(const b of d[x]){const w=b.outboundLayer;if(null!=w){for(const S of b.inputTensors)if(-1===g.indexOf(S))throw new vs(`Graph disconnected: cannot obtain value for tensor ${S} at layer "${w.name}". The following previous layers were accessed without issue: ${m}`);for(const S of b.outputTensors)g.push(S);m.push(w.name)}}this.nodesByDepth=d;const y=this.layers.map(x=>x.name);for(const x of y){const b=y.filter(w=>w===x).length;if(1!==b)throw new vs(`The name "${x}" is used ${b} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(y))}this.outboundNodes=[],this.inboundNodes=[],new Pd({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map(x=>null),outputMasks:this.outputs.map(x=>null),inputShapes:this.inputs.map(x=>x.shape),outputShapes:this.outputs.map(x=>x.shape)}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const t={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const e of this.layers)t.numDisposedVariables+=e.dispose().numDisposedVariables;for(const e of this.internalContainerRefs)t.numDisposedVariables+=e.dispose().numDisposedVariables}return t.refCountAfterDispose=this._refCount,t}get trainable(){return this.trainable_}set trainable(t){this.layers.forEach(e=>{e._trainableWeights.forEach(s=>s.trainable=t)}),this.trainable_=t}get trainableWeights(){if(this._trainableWeights.length>0)throw new L("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let t=[];for(const e of this.layers)t=t.concat(e.trainableWeights);return t}get nonTrainableWeights(){const t=[];for(const e of this.layers)t.push(...e.nonTrainableWeights);if(!this.trainable){const e=[];for(const s of this.layers)e.push(...s.trainableWeights);return e.concat(t)}return t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(t,e=!0){const s={};let r=0;const o=(n=>{const t=Object.keys(n);if(0===t.length)return!1;const e=t[0].split("/");return!isNaN(parseInt(e[e.length-1],10))})(t);o&&this.parseWeights(t);for(const i of this.layers)for(const[l,u]of i.weights.entries()){const c=o?`${u.name.split("/").slice(0,-1).join("/")+"/"}${l}`:u.originalName;if(null!=s[c])throw new L(`Duplicate weight name: ${c}`);s[c]=u,r++}const a=[];for(const i in t){let l=i;if(null==s[i]){const u=i.split("/");l=u.slice(0,-2).concat([u[u.length-1]]).join("/")}if(null!=s[l])a.push([s[l],t[i]]);else if(e)throw new L(`Provided weight data has no target variable: ${i}`);delete s[l]}if(e){const i=[];for(const l in s)i.push(l);if(i.length>0)throw new L(`${i.length} of ${r} weights are not set: ${i}`)}oy(a)}parseWeights(t){for(const e in Object.keys(t)){const s=e.split("/"),r=["vars","layer_checkpoint_dependencies"],o=s.map(a=>a.startsWith("_")?a.slice(1):a).filter(a=>!r.includes(a)).join("/");o!==e&&(t[o]=t[e],delete t[e])}}updatedConfig(){const t=this.getConfig(),e={};return e.className=this.getClassName(),e.config=t,e.kerasVersion=`tfjs-layers ${qd}`,e.backend="TensorFlow.js",e}toJSON(t,e=!0){const s=fy(this.updatedConfig());return e?JSON.stringify(s):s}call(t,e){return z(()=>{t=dt(t);const s=new Qr;for(let r=0;r<this.inputs.length;++r)s.add(this.inputs[r],t[r]);return Wu(this.outputs,s,e)})}computeMask(t,e){return z(()=>{let s;return t=dt(t),s=null==e?Vo(null,t.length):dt(e),this.runInternalGraph(t,s)[1]})}computeOutputShape(t){const e=Od(t);if(e.length!==this.inputLayers.length)throw new L(`Invalid inputShape argument ${t}: model has ${this.inputLayers.length} tensor inputs.`);const s={};for(let i=0;i<e.length;i++)s[this.inputLayers[i].name+"_0_0"]=e[i];const r=Object.keys(this.nodesByDepth).map(i=>parseInt(i,10)).sort(Ed);if(r.length>1)for(const i of r){const l=this.nodesByDepth[i];for(const u of l){const c=u.outboundLayer;if(-1!==this.inputLayers.map(g=>g.id).indexOf(c.id))continue;const h=[];for(let g=0;g<u.inboundLayers.length;g++)h.push(s[`${u.inboundLayers[g].name}_${u.nodeIndices[g]}_${u.tensorIndices[g]}`]);const p=Od(c.computeOutputShape(Gn(h))),f=c.inboundNodes.indexOf(u);for(let g=0;g<p.length;g++)s[`${c.name}_${f}_${g}`]=p[g]}}const o=[],a=[];for(let i=0;i<this.outputLayers.length;i++)a.push(`${this.outputLayers[i].name}_${this.outputLayersNodeIndices[i]}_${this.outputLayersTensorIndices[i]}`);for(let i=0;i<a.length;i++){const l=a[i];ps(l in s),o.push(s[l])}return Gn(o)}runInternalGraph(t,e){null==e&&(e=Vo(null,t.length));const s={};for(let l=0;l<this.inputs.length;++l)s[this.inputs[l].id]=[t[l],e[l]];const r=Object.keys(this.nodesByDepth).map(l=>parseInt(l,10)).sort(Ed);for(const l of r){const u=this.nodesByDepth[l];for(const c of u){const h=c.outboundLayer,d=c.inputTensors,p=c.outputTensors,f=new Array;for(const g of d)g.id in s&&f.push(s[g.id]);if(f.length===d.length){let m,y,x,b,g={};if(null!=c.callArgs&&(g=c.callArgs),1===f.length){const[w,S]=f[0];null==g.mask&&(g.mask=S),x=dt(h.call(w,g)),b=dt(h.computeMask(w,S)),m=[w],y=[S]}else m=f.map(w=>w[0]),y=f.map(w=>w[1]),null==g.mask&&(g.mask=y),x=dt(h.call(m,g)),b=dt(h.computeMask(m,y));if(h.activityRegularizer)throw new Ue("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let w=0;w<p.length;++w)s[p[w].id]=[x[w],b[w]]}}}const o=[],a=[],i=[];for(const l of this.outputs){ps(l.id in s,`Could not compute output ${l.name} : ${l.id}`);const[u,c]=s[l.id];i.push(u.shape),o.push(u),a.push(c)}return[o,a,i]}buildNodeConversionMap(t){const e={};let s;for(const r of this.layers){s=r instanceof zs?1:0;for(let o=0;o<r.inboundNodes.length;o++){const a=zs.nodeKey(r,o);this.containerNodes.has(a)&&(e[a]=s,s+=1)}}return e}getLayer(t,e){if(null!=e)return this.findLayer(e);if(null==t)throw new L("Provide either a layer name or layer index");if("number"==typeof t)return this.findLayer(t);for(const s of this.layers)if(s.name===t)return s;throw new L(`No such layer: ${t}`)}findLayer(t){if(this.layers.length<=t)throw new L(`Was asked to retrieve layer at index ${t}, but model only has ${this.layers.length} layer(s).`);return this.layers[t]}calculateLosses(){return z(()=>{const t=[];for(const e of this.layers)for(let s=0;s<e.inboundNodes.length;++s){const r=zs.nodeKey(e,s);this.containerNodes.has(r)&&t.push(...e.calculateLosses())}return t})}getConfig(){const t={name:this.name},e=this.buildNodeConversionMap(this.layers),s=[];for(const a of this.layers){const i=a.getClassName(),l=a.getConfig(),u=[];for(let h=0;h<a.inboundNodes.length;h++){const d=a.inboundNodes[h],p=zs.nodeKey(a,h);let f={};if(this.containerNodes.has(p)){if(d.callArgs)try{JSON.stringify(d.callArgs),f=d.callArgs}catch{console.warn(`Layer ${a.name} was passed non-serializable keyword arguments: ${d.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),f={}}if(d.inboundLayers.length>0){const g=[];for(let m=0;m<d.inboundLayers.length;m++){const y=d.inboundLayers[m],b=d.tensorIndices[m];let S=e[zs.nodeKey(y,d.nodeIndices[m])];null==S&&(S=0),g.push([y.name,S,b,f])}u.push(g)}}}const c={};c.name=a.name,c.className=i,c.config=l,c.inboundNodes=u,s.push(c)}t.layers=s;const r=[];for(let a=0;a<this.inputLayers.length;a++){const i=this.inputLayers[a],u=zs.nodeKey(i,this.inputLayersNodeIndices[a]);if(!this.containerNodes.has(u))continue;let c=e[u];null==c&&(c=0),r.push([i.name,c,this.inputLayersTensorIndices[a]])}t.inputLayers=r;const o=[];for(let a=0;a<this.outputLayers.length;a++){const i=this.outputLayers[a],u=zs.nodeKey(i,this.outputLayersNodeIndices[a]);if(!this.containerNodes.has(u))continue;let c=e[u];null==c&&(c=0),o.push([i.name,c,this.outputLayersTensorIndices[a]])}return t.outputLayers=o,t}static fromConfig(t,e,s={},r=!1){const o={},a={};function i(m,y){m.name in a?a[m.name].push(y):a[m.name]=[y]}function l(m,y){const x=[];let b;for(const w of y){const S=w[0],N=w[1],k=w[2];if(b=null==w[3]?{}:w[3],!(S in o))return void i(m,y);const T=o[S];if(T.inboundNodes.length<=N)return void i(m,y);x.push(T.inboundNodes[N].outputTensors[k])}x.length>0&&m.apply(Gn(x),b)}function u(m){const y=m.name,x=Ms(m,null!=e.customObjects?e.customObjects:{});x.setFastWeightInitDuringBuild(r),o[y]=x,m.inboundNodes.forEach(w=>{if(!(w instanceof Array))throw new L(`Corrupted configuration, expected array for nodeData: ${w}`);i(x,w)})}const c=e.name,h=e.layers;for(const m of h)u(m);for(;!XO(a);)for(const m of h){const y=o[m.name];if(y.name in a){const x=a[y.name];delete a[y.name];for(const b of x)l(y,b)}}const d=[],p=[],f=e.inputLayers;for(const m of f){const y=m[0],x=m[1],b=m[2];ps(y in o),d.push(o[y].inboundNodes[x].outputTensors[b])}const g=e.outputLayers;for(const m of g){const y=m[0],x=m[1],b=m[2];ps(y in o),p.push(o[y].inboundNodes[x].outputTensors[b])}return new t({inputs:d,outputs:p,name:c})}get stateful(){if(this._stateful)throw new L("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const t of this.layers)if(t.stateful)return!0;return!1}resetStates(){z(()=>{this.layers.forEach(t=>{t.stateful&&t.resetStates()})})}}function p1(n,t){return function d1(n,t,e){const s=t.length;if(null==n||Array.isArray(n)&&0===n.length)return t.map(r=>null);if(1===s)return Array.isArray(n)&&1===n.length?n:"object"==typeof n&&t[0]in n?[n[t[0]]]:[n];if(Array.isArray(n)){if(n.length!==s)throw new Error(`Provided ${e} is an array of ${n.length} element(s), but the model has ${s} outputs. Make sure a set of weights is provided for each model output.`);return n}if("object"==typeof n&&Object.keys(n).length>0&&"object"==typeof n[Object.keys(n)[0]]){const r=[];return t.forEach(o=>{r.push(o in n?n[o]:null)}),r}throw new Error(`The model has multiple (${s}) outputs, so ${e} must be either an array with ${s} elements or an object with ${t} keys. Provided ${e} not understood: ${JSON.stringify(n)}`)}(n,t,"classWeight")}function f1(n,t,e,s){return my.apply(this,arguments)}function my(){return(my=(0,O.Z)(function*(n,t,e,s){if(null!=t||null!=s)throw new Error("Support sampleWeight is not implemented yet");if(null!=e){const r=z(()=>{if(1===n.shape.length)return Zs(n);if(2===n.shape.length){if(n.shape[1]>1)return Ao(n,1);if(1===n.shape[1])return F(n,[n.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${n.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${n.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)}),o=Array.from(yield r.data());Be(r);const a=[];return o.forEach(i=>{if(null==e[i])throw new Error(`classWeight must contain all classes in the training data. The class ${i} exists in the data but not in classWeight`);a.push(e[i])}),vn(a,"float32")}return null})).apply(this,arguments)}function kP(n,t){return D(n,t)}function m1(n,t){let e,s;e=t.xs,s=t.ys,C(null!=e&&null!=s,()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`);const o=g1("input",n.inputNames,e),a=g1("output",n.outputNames,s),i=o[0].shape[0];C(o.length===n.inputs.length,()=>`LayersModel has ${n.inputs.length} inputs, but the dataset provides ${o.length} inputs.  (Expected input keys: ${JSON.stringify(n.inputNames)})`),C(a.length===n.outputs.length,()=>`LayersModel has ${n.outputs.length} outputs, but the dataset provides ${a.length} outputs.  (Expected output keys: ${JSON.stringify(n.outputNames)})`);for(let l=0;l<o.length;l++)C(o[l].shape[0]===i,()=>`Batch size mismatch: input ${n.inputNames[l]} has ${o[l].shape[0]}; expected  ${i} based on input ${n.inputNames[0]}.`);for(let l=0;l<a.length;l++)C(a[l].shape[0]===i,()=>`Batch size mismatch: output ${n.outputNames[l]} has ${a[l].shape[0]}; expected  ${i} based on input ${n.inputNames[0]}.`);return{xs:o,ys:a}}function g1(n,t,e){if(e instanceof rt)return[e];if(Array.isArray(e))return C(e.length===t.length,()=>`Received an array of ${e.length} Tensors, but expected ${t.length} to match the ${n} keys ${t}.`),e;{const s=[];for(const r of t){if(null==e[r])throw new L(`The feature data generated by the dataset lacks the required ${n} key '${r}'.`);s.push(e[r])}return s}}function gy(){return(gy=(0,O.Z)(function*(n,t,e){const s=null!=e.batchesPerEpoch;if(C(null!=n.optimizer,()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."),C(null!=e,()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."),C(null!=e.epochs&&e.epochs>0&&Number.isInteger(e.epochs),()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${e.epochs}`),C(!s||e.batchesPerEpoch>0&&Number.isInteger(e.batchesPerEpoch),()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${e.batchesPerEpoch}`),C(null==e.validationSplit,()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead."),n.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");n.isTraining=!0;try{const r=null!=e.validationData;let o,a;if(r)if(y1(e.validationData))C(null==e.validationBatches||e.validationBatches>0&&Number.isInteger(e.validationBatches),()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${e.validationBatches}`);else{const m=function $P(n){if(3===n.length)throw new Ue("Validation with sample weights is not implemented yet.");return{xs:n[0],ys:n[1]}}(e.validationData);o=m.xs,a=m.ys}const i=n.makeTrainFunction(),l=n.getDedupedMetricsNames();let u;u=r?l.slice().concat(l.map(m=>"val_"+m)):l.slice();const c=t1(e.callbacks,e.yieldEvery),h=null==e.verbose?1:e.verbose,{callbackList:d,history:p}=s1(c,h,e.epochs,null,null,function _P(n,t){let e=null;return null!=t.batchesPerEpoch?e=t.batchesPerEpoch:Number.isFinite(n.size)&&(e=n.size),e}(t,e),null,r,u);d.setModel(n),n.history=p,yield d.onTrainBegin(),n.stopTraining_=!1;let f=null==e.initialEpoch?0:e.initialEpoch,g=yield t.iterator();for(;f<e.epochs;){const m={};yield d.onEpochBegin(f);let y=0,x=0;for(s||(g=yield t.iterator());!s||y<e.batchesPerEpoch;){const b=yield g.next();if(s&&b.done){console.warn(`You provided \`batchesPerEpoch\` as ${e.batchesPerEpoch}, but your dataset iterator ran out of data after ${y} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, ${e.batchesPerEpoch*e.epochs} batches). You may need to use the repeat() function when building your dataset.`);break}if(null!=b.value){const{xs:w,ys:S}=m1(n,b.value),N={};N.batch=x,N.size=w[0].shape[0],yield d.onBatchBegin(x,N);const k=[];if(null!=e.classWeight){const R=p1(e.classWeight,n.outputNames);for(let M=0;M<R.length;++M)k.push(yield f1(S[M],null,R[M]))}const T=w.concat(S).concat(k),$=i(T);Be(T);for(let R=0;R<l.length;++R){const V=$[R];N[l[R]]=V,en(V)}yield d.onBatchEnd(x,N),Yv(N),x++,y++}if(s?y>=e.batchesPerEpoch:b.done){if(r){let w;w=y1(e.validationData)?dt(yield n.evaluateDataset(e.validationData,{batches:e.validationBatches})):dt(n.evaluate(o,a,{batchSize:null==e.validationBatchSize?32:e.validationBatchSize,verbose:0}));for(let S=0;S<n.metricsNames.length;++S)m[`val_${n.metricsNames[S]}`]=w[S]}break}if(n.stopTraining_)break}if(yield d.onEpochEnd(f,m),f++,n.stopTraining_)break}return yield d.onTrainEnd(),yield n.history.syncData(),n.history}finally{n.isTraining=!1}})).apply(this,arguments)}function y1(n){return"function"==typeof n.iterator}function yy(){return(yy=(0,O.Z)(function*(n,t,e){const s=null!=(e=e||{}).batches,r=n.testFunction;let o=[];if(e.verbose>0)throw new Ue("Verbose mode is not implemented yet.");C(!s||e.batches>0&&Number.isInteger(e.batches),()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(e.batches)}`);const a=function AP(n){return"function"==typeof n.next}(t)?t:yield t.iterator();let i=0,l=0;for(;!s||l<e.batches;){const u=yield a.next();if(o=z(()=>{if(u.value){const{xs:c,ys:h}=m1(n,u.value),d=c.concat(h),p=z(()=>r(d));if(Be(d),0===l)for(let g=0;g<p.length;++g)o.push(_e(0));const f=d[0].shape[0];for(let g=0;g<p.length;++g){const m=p[g],y=o[g];o[g]=z(()=>ne(o[g],D(f,m))),l>0&&Be(y)}Be(p),i+=f,++l}return o}),u.done){s&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${e.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let u=0;u<o.length;++u){const c=o[u];o[u]=$e(o[u],i),Be(c)}return Gn(o)})).apply(this,arguments)}function xy(n){C(n>0&&Number.isInteger(n),()=>`batchSize is required to be a positive integer, but got ${n}`)}function ju(n,t,e){return null==n?[null]:Array.isArray(n)?n.map(s=>Ho(s,t,e-t)):Ho(n,t,e-t)}function by(n,t){return z(()=>null==n?null:Array.isArray(n)?n.map(e=>by(e,t)):_v(n,"int32"===t.dtype?t:de(t,"int32")))}function wy(n,t){const e=[];let s=0,r=null;for(;s<n;)r=s+t,r>=n&&(r=n),e.push([s,r]),s=r;return e}function x1(n){const t=[];n instanceof rt&&(n=[n]);for(let e=0;e<n.length;++e){const s=n[e];if(1===s.rank)t.push(Mu(s,1));else{if(0===s.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(s)}}return t}function Bs(n,t){if(null==n)return;const e=[];if(t instanceof rt)e.push(t.id);else if(Array.isArray(t))t.forEach(r=>e.push(r.id));else if(null!=t)for(const r in t)e.push(t[r].id);const s=[];if(n instanceof rt)-1===e.indexOf(n.id)&&s.push(n);else if(Array.isArray(n))n.forEach(r=>{-1===e.indexOf(r.id)&&s.push(r)});else if(null!=n)for(const r in n){const o=n[r];-1===e.indexOf(o.id)&&s.push(o)}s.forEach(r=>{r.isDisposed||r.dispose()})}function vy(n){return Array.isArray(n)}function b1(n){return!function DP(n){return n instanceof rt}(n)&&!vy(n)}function w1(n,t,e,s=!0,r=""){if(null==t||0===t.length){if(null!=n){let a=!1;if(vy(n)&&n.length>0)a=!0;else if(b1(n)){for(const i in n)if(n.hasOwnProperty(i)){a=!0;break}}else a=!0;if(a)throw new L(`Error when checking model ${r} expected no data, but got ${n}`)}return[]}if(null==n)return t.map(a=>null);let o;if(b1(n)){o=[];for(const a of t){if(null==n[a])throw new L(`No data provided for "${a}". Need data for each key in: ${t}`);o.push(n[a])}}else if(vy(n)){if(n.length!==t.length)throw new L(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${n}`);o=n}else{if(t.length>1)throw new L(`The model ${r} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${n.shape}`);o=[n]}if(o=x1(o),null!=e)for(let a=0;a<t.length;++a){if(null==e[a])continue;const i=o[a];if(i.shape.length!==e[a].length)throw new L(`Error when checking ${r}: expected ${t[a]} to have ${e[a].length} dimension(s). but got array with shape ${i.shape}`);for(let l=0;l<e[a].length;++l){if(0===l&&!s)continue;const c=e[a][l];if(null!=c&&c>=0&&i.shape[l]!==c)throw new L(`${r} expected a batch of elements where each example has shape [${e[a].slice(1,e[a].length)}] (i.e.,tensor shape [*,${e[a].slice(1,e[a].length)}]) but the ${r} received an input with ${i.shape[0]} examples, each with shape [${i.shape.slice(1,i.shape.length)}] (tensor shape [${i.shape}])`)}}return o}function v1(n,t,e,s=!0,r=""){let o;if(Array.isArray(n)){if(n.length!==t.length)throw new L(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${n.length} Tensors(s).`);o=n}else{if(t.length>1)throw new L(`The model expects ${t.length} ${r} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(n.shape)}.`);o=[n]}if(null!=e)for(let a=0;a<t.length;++a){if(null==e[a])continue;const i=o[a];if(i.shape.length!==e[a].length)throw new L(`Error when checking ${r}: expected ${t[a]} to have ${e[a].length} dimension(s), but got array with shape ${JSON.stringify(i.shape)}`);for(let l=0;l<e[a].length;++l){if(0===l&&!s)continue;const c=e[a][l];if(null!=c&&c!==i.shape[l])throw new L(`Error when checking ${r}: expected ${t[a]} to have shape ${JSON.stringify(e[a])} but got array with shape ${JSON.stringify(i.shape)}.`)}}}let eo=(()=>{class n extends zs{constructor(e){super(e),this.isTraining=!1}summary(e,s,r=console.log){if(!this.built)throw new L("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");!function wP(n,t,e,s=console.log){const r=function SP(n){let t=!0;const e=[],s=[];for(const r in n.nodesByDepth)e.push(n.nodesByDepth[r]);for(const r of e){if(r.length>1||1===r.length&&r[0].inboundLayers.length>1){t=!1;break}s.push(...r)}if(t)for(const r of n.layers){let o=!1;for(const a of r.inboundNodes)if(-1!==s.indexOf(a)){if(o){t=!1;break}o=!0}if(!t)break}return t}(n),o=["Layer (type)","Input Shape","Output shape","Param #"];let a;if(r?(t=t||90,e=e||[.32,.61,.89,1]):(t=t||115,e=e||[.24,.48,.7,.8,1]),e[e.length-1]<=1&&(e=e.map(c=>Math.floor(t*c))),!r){o.push("Receives inputs"),a=[];for(const c in n.nodesByDepth)a.push(...n.nodesByDepth[c])}s("_".repeat(t)),Kd(o,e,s),s("=".repeat(t));const i=n.layers;for(let c=0;c<i.length;++c)r?CP(i[c],e,s):NP(i[c],e,a,s),s((c===i.length-1?"=":"_").repeat(t));n.checkTrainableWeightsConsistency();const l=function vP(n){let t;return t=Ld(null!=n.collectedTrainableWeights?n.collectedTrainableWeights:n.trainableWeights),t}(n),u=Ld(n.nonTrainableWeights);s(`Total params: ${l+u}`),s(`Trainable params: ${l}`),s(`Non-trainable params: ${u}`),s("_".repeat(t))}(this,e,s,r)}compile(e){if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"==typeof e.optimizer)this.optimizer_=function bP(n){const t={Adagrad:()=>Bo.adagrad(.01),Adadelta:()=>Bo.adadelta(1,.95,tn()),Adam:()=>Bo.adam(.001,.9,.999,tn()),Adamax:()=>Bo.adamax(.002,.9,.999,tn(),0),RMSProp:()=>Bo.rmsprop(.001,.9,0,tn()),SGD:()=>Bo.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,n in t)return t[n]();throw new L(`Unknown Optimizer ${n}`)}(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof gr))throw new L("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let s=[];if(Array.isArray(e.loss)||"string"==typeof e.loss||"function"==typeof e.loss)if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new L(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);s=e.loss.map(l=>uy(l))}else{const i=uy(e.loss);this.outputs.forEach(l=>{s.push(i)})}else{e.loss=e.loss;for(const i in e.loss)if(-1===this.outputNames.indexOf(i))throw new L(`Unknown entry in loss dictionary: "${i}". Only expected the following keys: ${this.outputNames}`);for(const i of this.outputNames)null==e.loss[i]&&console.warn(`Output "${i}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${i} during training`),s.push(uy(e.loss[i]))}this.lossFunctions=s,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let i=0;i<this.outputs.length;++i){const l=this.internalOutputShapes[i];this.feedOutputNames.push(this.outputNames[i]),this.feedOutputShapes.push(l),this.feedLossFns.push(this.lossFunctions[i])}const r=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],Go("loss",()=>{for(let i=0;i<this.outputs.length;++i)-1===r.indexOf(i)&&this.outputs.length>1&&(this.metricsTensors.push([this.lossFunctions[i],i]),this.metricsNames.push(this.outputNames[i]+"_loss"))});const o=function LP(n,t){if(null==n||Array.isArray(n)&&0===n.length)return t.map(s=>[]);let e;if("string"==typeof n||"function"==typeof n)e=[n];else{if(!Array.isArray(n)&&"object"!=typeof n)throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${n}`);e=n}if(Array.isArray(e))return t.map(s=>e);{const s=[];for(const r of t){let o=e.hasOwnProperty(r)?e[r]:[];Array.isArray(o)||(o=[o]),s.push(o)}return s}}(e.metrics,this.outputNames),a=(i,l,u)=>{this.outputNames.length>1&&(l=this.outputNames[i]+"_"+l),this.metricsNames.push(l),this.metricsTensors.push([u,i])};Go("metric",()=>{for(let i=0;i<this.outputs.length;++i)-1===r.indexOf(i)&&(c=>{let d,p,f;for(const g of c){if("string"==typeof g&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(g)){const y=this.internalOutputShapes[i];let x;1===y[y.length-1]||this.lossFunctions[i]===Ud?-1!==["accuracy","acc"].indexOf(g)?p=cy:-1!==["crossentropy","ce"].indexOf(g)&&(p=a1):this.lossFunctions[i]===Wd?-1!==["accuracy","acc"].indexOf(g)?p=i1:-1!==["crossentropy","ce"].indexOf(g)&&(p=l1):-1!==["accuracy","acc"].indexOf(g)?p=hy:-1!==["crossentropy","ce"].indexOf(g)&&(p=dy),-1!==["accuracy","acc"].indexOf(g)?x="acc":-1!==["crossentropy","ce"].indexOf(g)&&(x="ce"),f=p,d=""+x}else f=xP(g),d=""+jd(g);let m;Go(d,()=>{m=f}),a(i,d,m)}})(o[i])}),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,s,r={}){const o=null==r.batchSize?32:r.batchSize;xy(o);const i=this.standardizeUserDataXY(e,s,!0,o);try{const l=i[0].concat(i[1]);return this.makeTestFunction(),Gn(this.testLoop(this.testFunction,l,o,r.verbose,r.steps))}finally{Bs(i[0],e),Bs(i[1],s)}}evaluateDataset(e,s){var r=this;return(0,O.Z)(function*(){return r.makeTestFunction(),function RP(n,t,e){return yy.apply(this,arguments)}(r,e,s)})()}checkNumSamples(e,s,r,o="steps"){let a;if(null!=r){if(a=null,null!=s)throw new L(`If ${o} is set, batchSize must be null or undefined.Got batchSize = ${s}`)}else{if(null==e)throw new L(`Either the input data should have a defined shape, or ${o} shoud be specified.`);a=Array.isArray(e)?e[0].shape[0]:e.shape[0]}return a}execute(e,s){if(Array.isArray(s)&&0===s.length)throw new L("`outputs` is an empty Array, which is not allowed.");const r=Array.isArray(s),a=this.retrieveSymbolicTensors(r?s:[s]),i=new Qr;if(e instanceof rt&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new L(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let u=0;u<this.inputs.length;++u)i.add(this.inputs[u],e[u])}else for(const u of this.inputs){const c=e[u.name];if(null==c)throw new L(`No value is provided for the model's input ${u.name}`);i.add(u,c)}const l=Wu(a,i);return r?l:l[0]}retrieveSymbolicTensors(e){const s=Vo(null,e.length);let r=e.length;for(const o of this.layers){const a=Array.isArray(o.output)?o.output:[o.output],i=a.map(l=>l.name);for(let l=0;l<e.length;++l){const u=i.indexOf(e[l]);if(-1!==u&&(s[l]=a[u],r--),0===r)break}if(0===r)break}if(r>0){const o=[];throw s.forEach((a,i)=>{null==a&&o.push(e[i])}),new L(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(o)}`)}return s}predictLoop(e,s=32,r=!1){return z(()=>{const o=this.checkNumSamples(e);if(r)throw new Ue("Verbose predictLoop() is not implemented yet.");const a=wy(o,s),i=this.outputs.map(l=>[]);for(let l=0;l<a.length;++l)z(()=>{const d=ju(e,a[l][0],a[l][1]),p=[];if(Array.isArray(d))for(let g=0;g<d.length;++g)p.push({key:this.inputs[g],value:d[g]});else p.push({key:this.inputs[0],value:d});const f=new Qr(p);return Wu(this.outputs,f)}).forEach((c,h)=>i[h].push(c));return Gn(i.map(l=>Mt(l,0)))})}predict(e,s={}){const r=x1(e);v1(r,this.inputNames,this.feedInputShapes,!1);try{const o=null==s.batchSize?32:s.batchSize;return xy(o),this.predictLoop(r,o)}finally{Bs(r,e)}}predictOnBatch(e){v1(e,this.inputNames,this.feedInputShapes,!0);const s=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,s)}standardizeUserDataXY(e,s,r=!0,o){if(null==this.optimizer_)throw new vs("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const a=[];for(let i=0;i<this.feedOutputShapes.length;++i){const l=this.feedOutputShapes[i];a.push(this.feedLossFns[i]===Wd?l.slice(0,l.length-1).concat([1]):l)}if(function FP(n,t,e){const s=Xr(n.map(o=>o.shape[0]));s.sort();const r=Xr(t.map(o=>o.shape[0]));if(r.sort(),s.length>1)throw new L(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(n.map(o=>o.shape))}`);if(r.length>1)throw new L(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map(o=>o.shape))}`);if(s.length>0&&r.length>0&&!Ye(s,r))throw new L(`Input Tensors should have the same number of samples as target Tensors. Found ${s[0]} input sample(s) and ${r[0]} target sample(s).`)}(e=w1(e,this.feedInputNames,this.feedInputShapes,!1,"input"),s=w1(s,this.feedOutputNames,a,!1,"target")),function OP(n,t,e){const s=[jo,Ud,Gu];for(let r=0;r<n.length;++r){const o=n[r],a=t[r],i=e[r];if(null!=a){if(a===Gu&&1===o.shape[o.shape.length-1])throw new L(`You are passing a target array of shape ${o.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==s.indexOf(a)){const l=o.shape.slice(1),u=i.slice(1);for(let c=0;c<l.length;++c){const d=u[c];if(null!=d&&l[c]!==d)throw new L(`A target Tensor with shape ${o.shape} was passed for an output of shape ${i}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(s,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=o&&o>0&&e[0].shape[0]%o!=0)throw new L(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${o}. Found: ${e[0].shape[0]} sample(s).`);return[e,s]}standardizeUserData(e,s,r,o,a=!0,i){var l=this;return(0,O.Z)(function*(){const[u,c]=l.standardizeUserDataXY(e,s,a,i);if(null!=r)throw new Error("sample weight is not supported yet.");let h=null;if(null!=o){const d=p1(o,l.outputNames);h=[];for(let p=0;p<d.length;++p)h.push(yield f1(c[p],null,d[p]))}return[u,c,h]})()}testLoop(e,s,r,o=0,a){return z(()=>{const i=this.checkNumSamples(s,r,a,"steps"),l=[];if(o>0)throw new Ue("Verbose mode is not implemented yet.");if(null!=a)throw new Ue("steps mode in testLoop() is not implemented yet");{const u=wy(i,r),c=vn(Ds(0,i));for(let h=0;h<u.length;++h){const d=u[h][0],p=u[h][1],f=Ho(c,d,p-d),g=by(s,f),m=e(g);if(0===h)for(let y=0;y<m.length;++y)l.push(_e(0));for(let y=0;y<m.length;++y)l[y]=ne(l[y],D(p-d,m[y]))}for(let h=0;h<l.length;++h)l[h]=$e(l[h],i)}return l})}getDedupedMetricsNames(){const e=this.metricsNames,s=[];for(let r=0;r<e.length;++r){const o=e[r];let a=o;bv(e,o)>1&&(a+=`_${bv(e.slice(0,r),o)}`),s.push(a)}return s}makeTrainFunction(){return e=>{const s=[],r=e.slice(0,this.inputs.length),o=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),i=[],u=this.collectedTrainableWeights.map(d=>d.read());return[this.optimizer_.minimize(()=>{const d=[];for(let m=0;m<this.inputs.length;++m)d.push({key:this.inputs[m],value:r[m]});const p=new Qr(d),f=Wu(this.outputs,p,{training:!0});let g;for(let m=0;m<this.lossFunctions.length;++m){let x=(0,this.lossFunctions[m])(o[m],f[m]);null!=a[m]&&(x=kP(x,a[m]));const b=At(x);s.push(b),g=0===m?x:ne(g,x)}for(let m=0;m<this.metricsTensors.length;++m){let y;if(this.outputs.length>1&&m<this.outputs.length)y=s[m];else{const b=this.metricsTensors[m][1];y=At((0,this.metricsTensors[m][0])(o[b],f[b]))}en(y),i.push(y)}return g=At(g),this.calculateLosses().forEach(m=>{g=ne(g,m)}),g},!0,u)].concat(i)}}makeTestFunction(){this.testFunction=e=>z(()=>{const s=[];let r;const o=e.slice(0,this.inputs.length),a=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),i=[];for(let c=0;c<this.inputs.length;++c)i.push({key:this.inputs[c],value:o[c]});const l=new Qr(i),u=Wu(this.outputs,l);for(let c=0;c<this.lossFunctions.length;++c){const d=At((0,this.lossFunctions[c])(a[c],u[c]));r=0===c?d:ne(r,d),s.push(r)}for(let c=0;c<this.metricsTensors.length;++c){const d=this.metricsTensors[c][1],p=At((0,this.metricsTensors[c][0])(a[d],u[d]));s.push(p)}return s})}fit(e,s,r={}){var o=this;return(0,O.Z)(function*(){if(o.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let a,i,l,u,c,h,d,p,f;o.isTraining=!0;try{const g=null==r.batchSize?32:r.batchSize;xy(g);const m=!1,y=yield o.standardizeUserData(e,s,r.sampleWeight,r.classWeight,m,g);a=y[0],i=y[1],f=y[2];let b,x=!1;if(null!=r.validationData&&r.validationData.length>0){if(x=!0,2!==r.validationData.length)throw 3===r.validationData.length?new Ue("validationData including sample weights is not supported yet."):new L(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${r.validationData} is invalid.`);c=r.validationData[0],h=r.validationData[1];const M=!0,V=yield o.standardizeUserData(c,h,null,null,M,g);d=V[0],p=V[1],b=d.concat(p)}else if(null!=r.validationSplit&&r.validationSplit>0&&r.validationSplit<1){x=!0;const M=Math.floor(a[0].shape[0]*(1-r.validationSplit)),V=a[0].shape[0];d=ju(a,M,V),l=a,a=ju(a,0,M),p=ju(i,M,V),u=i,i=ju(i,0,M),b=d.concat(p)}else null!=r.validationSteps&&(x=!0);const w=a.concat(i).concat(f);o.checkTrainableWeightsConsistency();const S=o.makeTrainFunction(),N=o.getDedupedMetricsNames();let k,T;x?(o.makeTestFunction(),k=o.testFunction,T=N.slice().concat(N.map(M=>"val_"+M))):(k=null,b=[],T=N.slice());const $=t1(r.callbacks,r.yieldEvery);return yield o.fitLoop(S,w,N,g,r.epochs,r.verbose,$,k,b,r.shuffle,T,r.initialEpoch,null,null)}finally{o.isTraining=!1,Bs(a,e),Bs(i,s),Bs(l,e),Bs(u,s),Bs(d,c),Bs(p,h),null!=f&&Be(f)}})()}fitLoop(e,s,r,o,a,i,l,u,c,h,d,p,f,g){var m=this;return(0,O.Z)(function*(){null==o&&(o=32),null==a&&(a=1),null==h&&(h=!0),null==p&&(p=0);let y=!1;if(null!=u&&null!=c&&(y=!0),null!=g&&(y=!0,null==f))throw new L("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");const x=m.checkNumSamples(s,o,f,"steps_per_epoch");let b;null!=x&&(b=Ds(0,x)),null==i&&(i=1);const{callbackList:w,history:S}=s1(l,i,a,p,x,f,o,y,d);w.setModel(m),m.history=S,yield w.onTrainBegin(),m.stopTraining_=!1;for(let N=p;N<a;++N){yield w.onEpochBegin(N);const k={};if(null!=f)throw new Ue("stepsPerEpoch mode is not implemented yet.");{if("batch"===h)throw new Ue("batch shuffling is not implemneted yet");h&&Zp(b);const T=vn(b),$=wy(x,o);for(let R=0;R<$.length;++R){const M={};if(yield w.onBatchBegin(R,M),z(()=>{const V=$[R][0],W=$[R][1],H=Ho(T,V,W-V);M.batch=R,M.size=W-V;const K=by(s,H),U=e(K);for(let Y=0;Y<r.length;++Y){const Q=U[Y];M[r[Y]]=Q,en(Q)}if(R===$.length-1&&y){const Y=m.testLoop(u,c,o);for(let X=0;X<r.length;++X){const Q=r[X],re=Y[X];en(re),k["val_"+Q]=re}}}),yield w.onBatchEnd(R,M),Yv(M),m.stopTraining_)break}T.dispose()}if(yield w.onEpochEnd(N,k),m.stopTraining_)break}return yield w.onTrainEnd(),yield m.history.syncData(),m.history})()}fitDataset(e,s){var r=this;return(0,O.Z)(function*(){return function EP(n,t,e){return gy.apply(this,arguments)}(r,e,s)})()}trainOnBatch(e,s){var r=this;return(0,O.Z)(function*(){const o=yield r.standardizeUserData(e,s),a=o[0],i=o[1],u=r.makeTrainFunction()(a.concat(i)),c=[];for(const h of u){const d=yield h.data();c.push(d[0])}return Be(u),Bs(o[0],e),Bs(o[1],s),Gn(c)})()}getNamedWeights(e){const s=[],r=null!=e&&e.trainableOnly,o=r?this.trainableWeights:this.weights,a=this.getWeights(r);for(let i=0;i<o.length;++i)r&&!o[i].trainable||s.push({name:o[i].originalName,tensor:a[i]});return s}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){const e=super.dispose();if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const s=Bh().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=s-Bh().numTensors}return e}getLossIdentifiers(){let e;if("string"==typeof this.loss)e=kr(this.loss);else if(Array.isArray(this.loss)){for(const s of this.loss)if("string"!=typeof s)throw new Error("Serialization of non-string loss is not supported.");e=this.loss.map(s=>kr(s))}else{const s=Object.keys(this.loss);e={};const r=this.loss;for(const o of s){if("string"!=typeof r[o])throw new Error("Serialization of non-string loss is not supported.");e[o]=kr(r[o])}}return e}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[kr(jd(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map(e=>kr(jd(e)));{const e={};for(const s in this.metrics)e[s]=kr(jd(this.metrics[s]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){if(null!=e.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const r=Ms(Hu(e.optimizer_config));let o,a;if("string"==typeof e.loss)o=Wo(e.loss);else if(Array.isArray(e.loss))o=e.loss.map(i=>Wo(i));else if(null!=e.loss){o={};for(const i in e.loss)o[i]=Wo(e.loss[i])}if(Array.isArray(e.metrics))a=e.metrics.map(i=>Wo(i));else if(null!=e.metrics){a={};for(const i in e.metrics)a[i]=Wo(e.metrics[i])}this.compile({loss:o,metrics:a,optimizer:r})}save(e,s){var r=this;return(0,O.Z)(function*(){if("string"==typeof e){const h=qb(e);if(0===h.length)throw new L(`Cannot find any save handlers for URL '${e}'`);if(h.length>1)throw new L(`Found more than one (${h.length}) save handlers for URL '${e}'`);e=h[0]}if(null==e.save)throw new L("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const o=yield gf(r.getNamedWeights(s)),u={modelTopology:r.toJSON(null,!1),format:"layers-model",generatedBy:`TensorFlow.js tfjs-layers v${qd}`,convertedBy:null};if(null!=s&&s.includeOptimizer&&null!=r.optimizer){u.trainingConfig=r.getTrainingConfig();const h="optimizer",{data:d,specs:p}=yield gf(yield r.optimizer.getWeights(),h);o.specs.push(...p),o.data=Hb([o.data,d])}return null!=r.userDefinedMetadata&&(c1(r.userDefinedMetadata,r.name,!0),u.userDefinedMetadata=r.userDefinedMetadata),u.weightData=o.data,u.weightSpecs=o.specs,e.save(u)})()}setUserDefinedMetadata(e){c1(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}return n.className="Model",n})();function MP(n,t){return Sy.apply(this,arguments)}function Sy(){return(Sy=(0,O.Z)(function*(n,t){"modelTopology"in n||(n={modelTopology:n});let e=n.modelTopology;null!=e.model_config&&(e=e.model_config);const r=Ms(Hu(e),t);if(null!=n.weightsManifest){const o=yield h0(n.weightsManifest,n.pathPrefix,r.weights.map(i=>i.originalName)),a={};for(const i of r.weights)a[i.originalName]=o[i.originalName];r.loadWeights(a),Be(o)}return r})).apply(this,arguments)}function Xd(n,t){return Cy.apply(this,arguments)}function Cy(){return Cy=(0,O.Z)(function*(n,t){if(null==t&&(t={}),"string"==typeof n){const e=Xb(n,t);if(0===e.length)e.push(m0(n,t));else if(e.length>1)throw new L(`Found more than one (${e.length}) load handlers for URL '${n}'`);n=e[0]}return function zP(n,t,e){return Ny.apply(this,arguments)}(n,void 0,t)}),Cy.apply(this,arguments)}function Ny(){return(Ny=(0,O.Z)(function*(n,t,e){if(null==e&&(e={}),null==n.load)throw new L("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const s=yield n.load();let r=s.modelTopology;null!=r.model_config&&(r=r.model_config);const o=null==e.strict||e.strict,a=null!=s.weightData&&null!=s.weightSpecs&&o,i=Ms(Hu(r),t,a),l=s.trainingConfig;if(null!=l&&i.loadTrainingConfig(l),null!=s.userDefinedMetadata&&i.setUserDefinedMetadata(s.userDefinedMetadata),null!=s.weightData){if(null==s.weightSpecs)throw new L("LayersModel artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.");const{modelWeights:u,optimizerWeights:c}=function BP(n,t){const e=xf(n,t),s={},r=[];return t.forEach(o=>{"optimizer"===o.group?r.push({name:o.name,tensor:e[o.name]}):s[o.name]=e[o.name]}),{modelWeights:s,optimizerWeights:r}}(s.weightData,s.weightSpecs);i.loadWeights(u,o),null!=i.optimizer&&c.length>0&&(yield i.optimizer.setWeights(c)),Be(u),Be(c.map(h=>h.tensor))}return i})).apply(this,arguments)}se(eo),se((()=>{class n extends eo{}return n.className="Functional",n})());let Iy=(()=>{class n extends eo{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=null!=e.name?e.name:Ad("sequential_"),null!=e.layers)for(const s of e.layers)this.add(s)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some(r=>r<0))throw new L(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){const s=e instanceof n||e instanceof eo;let r;if(s){if(r=e,1!==r.outputs.length)throw new L("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==r.inputs.length)throw new L("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new L("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const o=Uv({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(o)}if(s)this.outputs=r.outputs,this.inputs=r.inputs;else{if(1!==e.inboundNodes.length)throw new L(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(1!==e.inboundNodes[0].outputTensors.length)throw new L("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=Wv(this.outputs[0])}this.inboundNodes=[],new Pd({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:Vo(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map(o=>o.shape),outputShapes:this.outputs[0].shape})}else{const o=e.apply(this.outputs[0]);if(Array.isArray(o))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[o],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,s){return null==this.model&&this.build(),this.model.call(e,s)}build(e){if(at(e),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new eo({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,s,r=console.log){this.built||this.build(),super.summary(e,s,r)}setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}evaluate(e,s,r={}){if(!this.built)throw new vs("The model needs to be compiled before being used.");return this.model.evaluate(e,s,r)}evaluateDataset(e,s){var r=this;return(0,O.Z)(function*(){if(!r.built)throw new vs("The model needs to be compiled before being used.");return r.model.evaluateDataset(e,s)})()}predict(e,s={}){return null==this.model&&this.build(),this.model.predict(e,s)}predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}fit(e,s,r={}){var o=this;return(0,O.Z)(function*(){if(!o.built)throw new vs("The model needs to be compiled before being used.");return o.model.fit(e,s,r)})()}fitDataset(e,s){var r=this;return(0,O.Z)(function*(){if(!r.built)throw new vs("The model needs to be compiled before being used.");return r.model.fitDataset(e,s)})()}trainOnBatch(e,s){var r=this;return(0,O.Z)(function*(){return r.model.trainOnBatch(e,s)})()}static fromConfig(e,s,r={},o=!1){let a,i={};if(s instanceof Array){if(null==s[0].className||"Merge"===s[0].className)throw new L("Legacy serialization format not supported yet.");a=s}else C(null!=s.layers,()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."),a=s.layers,delete s.layers,i=s;const l=new e(i);if(!(l instanceof n))throw new Ue(`Sequential.fromConfig called on non-Sequential input: ${l}`);for(const u of a){const h=Ms(u,void 0,o);o&&h.setFastWeightInitDuringBuild(!0),l.add(h)}return l}set stopTraining(e){if(null==this.model)throw new L("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new L("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const e=[];for(const s of this.layers){const r={};r.className=s.getClassName(),r.config=s.getConfig(),e.push(r)}return{name:this.name,layers:e}}}return n.className="Sequential",n})();function VP(n){return new eo(n)}function WP(n){return new Iy(n)}function S1(n){return Uv(n)}function UP(n,t){n1.registerCallbackConstructor(n,t)}se(Iy);class Hn extends To{getConfig(){return{}}}se((()=>{class n extends Hn{apply(e,s=1){return function dL(n,t=1){if(1!==t)throw new Ue(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return yi(n)}(e,s)}}return n.className="elu",n})()),se((()=>{class n extends Hn{apply(e){return ld(e)}}return n.className="selu",n})()),se((()=>{class n extends Hn{apply(e){return Rs(e)}}return n.className="relu",n})()),se((()=>{class n extends Hn{apply(e){return z(()=>Hr(6,Rs(e)))}}return n.className="relu6",n})()),se((()=>{class n extends Hn{apply(e){return e}}return n.className="linear",n})()),se((()=>{class n extends Hn{apply(e){return As(e)}}return n.className="sigmoid",n})()),se((()=>{class n extends Hn{apply(e){return function fL(n){return z(()=>{const t=ne(.5,D(.2,n));return zn(t,0,1)})}(e)}}return n.className="hardSigmoid",n})()),se((()=>{class n extends Hn{apply(e){return Lo(e)}}return n.className="softplus",n})()),se((()=>{class n extends Hn{apply(e){return function pL(n){return z(()=>$e(n,ne(jt(n),1)))}(e)}}return n.className="softsign",n})()),se((()=>{class n extends Hn{apply(e){return Do(e)}}return n.className="tanh",n})());let C1=(()=>{class n extends Hn{apply(e,s=-1){return _u(e,s)}}return n.className="softmax",n})();function to(n){return n.getClassName()}function ky(n,t={}){return Lu(n,is.getMap().classNameMap,t,"activation")}function no(n){if(null==n){return ky({className:"linear",config:{}})}if("string"==typeof n){const t={};return t.className=n,t.config={},ky(t)}return n instanceof Hn?n:ky(n)}function Ty(n){if(null!=n&&"object"!=typeof n)throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${n}`)}se(C1),se((()=>{class n extends Hn{apply(e,s=-1){return td(e,s)}}return n.className="logSoftmax",n})()),se((()=>{class n extends Hn{apply(e,s=1){return z(()=>D(As(D(e,s)),e))}}return n.className="swish",n})()),se((()=>{class n extends Hn{apply(e){return z(()=>D(e,Do(Lo(e))))}}return n.className="mish",n})());class N1 extends To{}let Zd=(()=>{class n extends N1{constructor(e){super(),Ty(e),this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(e){return z(()=>{let s=qt([1]);return this.hasL1&&(s=ne(s,ve(D(this.l1,jt(e))))),this.hasL2&&(s=ne(s,ve(D(this.l2,zu(e))))),F(s,[])})}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,s){return new e({l1:s.l1,l2:s.l2})}}return n.className="L1L2",n})();se(Zd);const I1={l1l2:"L1L2"};function bt(n){return Ug(n)}function k1(n,t={}){return Lu(n,is.getMap().classNameMap,t,"regularizer")}function It(n){return null==n?null:"string"==typeof n?k1({className:n in I1?I1[n]:n,config:{}}):n instanceof N1?n:k1(n)}let T1=(()=>{class n extends qe{constructor(e){super(e??{}),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(e,s){e=Le(e);let r=Rs(e);return null!=this.maxValue&&(r=zn(r,0,this.maxValue)),r}computeOutputShape(e){return e}getConfig(){const e={maxValue:this.maxValue},s=super.getConfig();return Object.assign(e,s),e}}return n.className="ReLU",n})();se(T1);let $1=(()=>{class n extends qe{constructor(e){super(e??{}),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,s){const r=Le(e);return bu(r,this.alpha)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},s=super.getConfig();return Object.assign(e,s),e}}return n.className="LeakyReLU",n})();se($1);let E1=(()=>{class n extends qe{constructor(e){if(super(e??{}),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=Nt(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=It(e.alphaRegularizer),this.alphaConstraint=sn(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else{if("number"!=typeof e.sharedAxes)throw new L(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`);this.sharedAxes=[e.sharedAxes]}}build(e){const s=(e=at(e)).slice(1);if(null!=this.sharedAxes)for(const o of this.sharedAxes)s[o-1]=1;this.alpha=this.addWeight("alpha",s,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const r={};if(null!=this.sharedAxes)for(let o=1;o<e.length;++o)r[o]=e[o];this.inputSpec=[new Xt({ndim:e.length,axes:r})],this.built=!0}call(e,s){return e=Le(e),ku(e,this.alpha.read())}getConfig(){const e={alphaInitializer:Rt(this.alphaInitializer),alphaRegularizer:bt(this.alphaRegularizer),alphaConstraint:nn(this.alphaConstraint),sharedAxes:this.sharedAxes},s=super.getConfig();return Object.assign(e,s),e}}return n.className="PReLU",n})();se(E1);let _1=(()=>{class n extends qe{constructor(e){if(super(e??{}),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new Ue(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,s){const r=Le(e);return yi(r)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},s=super.getConfig();return Object.assign(e,s),e}}return n.className="ELU",n})();se(_1);let A1=(()=>{class n extends qe{constructor(e){super(e??{}),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=null==e.theta?this.DEFAULT_THETA:e.theta}call(e,s){const r=Le(e);return D(r,de(Rn(r,this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){const e={theta:this.theta},s=super.getConfig();return Object.assign(e,s),e}}return n.className="ThresholdedReLU",n})();se(A1);let R1=(()=>{class n extends qe{constructor(e){super(e??{}),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=(new C1).apply,this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis}call(e,s){return z(()=>{let r=Le(e);const o=s.mask;if(null!=o){const a=D(be(Vn(r.shape),de(o,r.dtype)),_e(-1e9));r=ne(r,a)}return this.axis instanceof Array?this.axis.length>1?Bn(be(r,vu(r,this.axis,!0))):this.softmax(r,this.axis[0]):this.softmax(r,this.axis)})}computeOutputShape(e){return e}getConfig(){const e={axis:this.axis},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Softmax",n})();function Ai(n,t,e){if("number"==typeof n)return Vo(n,t);if(n.length!==t)throw new L(`The ${e} argument must be an integer or tuple of ${t} integers. Received: ${n.length} elements.`);for(let s=0;s<t;++s){const r=n[s];if(!aL(r))throw new L(`The ${e} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(n)} including a non-integer number ${r}`)}return n}function Vs(n,t,e,s,r=1){if(null==n)return n;let a;return a="same"===e?n:n-(t+(t-1)*(r-1))+1,Math.floor((a+s-1)/s)}function rr(n,t,e,s){if(null==n)return null;if("valid"===s)n=n*t+Yr([e-t,0]);else{if("same"!==s)throw new L(`Unsupport padding mode: ${s}.`);n*=t}return n}function $y(n,t){return z(()=>(Vt(t),"channelsFirst"===t?Qe(n,[0,2,3,1]):n))}function D1(n,t){return z(()=>(Vt(t),"channelsFirst"===t?Qe(n,[0,2,3,4,1]):n))}function Ey(n,t,e,s=[1,1],r="valid",o,a,i=null){return z(()=>{if(null==o&&(o="channelsLast"),Vt(o),3!==n.rank&&4!==n.rank)throw new L(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${n.rank}.`);if(3!==t.rank&&4!==t.rank)throw new L(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${n.rank}.`);let l=$y(n,o);if("causal"===r)throw new Ue("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=Sw({x:l,filter:t,strides:s,pad:"same"===r?"same":"valid",dilations:a,dataFormat:"NHWC",bias:e,activation:i}),"channelsFirst"===o&&(l=Qe(l,[0,3,1,2])),l})}se(R1);class Yd extends qe{constructor(t,e){if(super(e),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",Yd.verifyArgs(e),this.rank=t,hn(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new Ue(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=Ai(e.kernelSize,t,"kernelSize"),this.strides=Ai(null==e.strides?1:e.strides,t,"strides"),this.padding=null==e.padding?"valid":e.padding,fs(this.padding),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Vt(this.dataFormat),this.activation=no(e.activation),this.useBias=null==e.useBias||e.useBias,this.biasInitializer=Nt(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=sn(e.biasConstraint),this.biasRegularizer=It(e.biasRegularizer),this.activityRegularizer=It(e.activityRegularizer),this.dilationRate=Ai(null==e.dilationRate?1:e.dilationRate,t,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new L(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new L(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new L(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}static verifyArgs(t){if(ps("kernelSize"in t,"required key 'kernelSize' not in config"),"number"!=typeof t.kernelSize&&!Hg(t.kernelSize,"number",1,3))throw new L(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(t.kernelSize)}.`)}getConfig(){const t={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:to(this.activation),useBias:this.useBias,biasInitializer:Rt(this.biasInitializer),biasRegularizer:bt(this.biasRegularizer),activityRegularizer:bt(this.activityRegularizer),biasConstraint:nn(this.biasConstraint)},e=super.getConfig();return Object.assign(t,e),t}}class Ri extends Yd{constructor(t,e){super(t,e),this.kernel=null,Ri.verifyArgs(e),this.filters=e.filters,hn(this.filters,"filters"),this.kernelInitializer=Nt(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=sn(e.kernelConstraint),this.kernelRegularizer=It(e.kernelRegularizer)}build(t){t=at(t);const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e])throw new L(`The channel dimension of the input should be defined. Found ${t[e]}`);const s=t[e],r=this.kernelSize.concat([s,this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[e]:s}}],this.built=!0}call(t,e){return z(()=>{let s;t=Le(t);const r=null==this.bias?null:this.bias.read(),o=vv(this.activation.getClassName());if(null!=o&&2===this.rank)s=Ey(t,this.kernel.read(),r,this.strides,this.padding,this.dataFormat,this.dilationRate,o);else{if(1===this.rank)s=function F1(n,t,e,s=1,r="valid",o,a=1){return z(()=>{if(null==o&&(o="channelsLast"),Vt(o),3!==n.shape.length)throw new L(`The input of a conv1dWithBias operation should be 3, but is ${n.shape.length} instead.`);if(3!==t.shape.length)throw new L(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);if(null!=e&&1!==e.shape.length)throw new L(`The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`);if("channelsFirst"===o&&(n=Qe(n,[0,2,1])),"causal"===r)throw new Ue("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let i=Xh(n,t,s,"same"===r?"same":"valid","NWC",a);return null!=e&&(i=Os(i,e)),i})}(t,this.kernel.read(),r,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)s=Ey(t,this.kernel.read(),r,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new Ue("convolutions greater than 3D are not implemented yet.");s=function O1(n,t,e,s=[1,1,1],r="valid",o,a){return z(()=>{if(null==o&&(o="channelsLast"),Vt(o),4!==n.rank&&5!==n.rank)throw new L(`conv3dWithBias expects input to be of rank 4 or 5, but received ${n.rank}.`);if(4!==t.rank&&5!==t.rank)throw new L(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${n.rank}.`);let i=D1(n,o);if("causal"===r)throw new Ue("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return i=_m(i,t,s,"same"===r?"same":"valid","NDHWC",a),null!=e&&(i=Os(i,e)),"channelsFirst"===o&&(i=Qe(i,[0,4,1,2,3])),i})}(t,this.kernel.read(),r,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(s=this.activation.apply(s))}return s})}computeOutputShape(t){t=at(t);const e=[],s="channelsLast"===this.dataFormat?t.slice(1,t.length-1):t.slice(2);for(let o=0;o<s.length;++o){const a=Vs(s[o],this.kernelSize[o],this.padding,this.strides[o],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[o]);e.push(a)}let r=[t[0]];return"channelsLast"===this.dataFormat?(r=r.concat(e),r.push(this.filters)):(r.push(this.filters),r=r.concat(e)),r}getConfig(){const t={filters:this.filters,kernelInitializer:Rt(this.kernelInitializer),kernelRegularizer:bt(this.kernelRegularizer),kernelConstraint:nn(this.kernelConstraint)},e=super.getConfig();return Object.assign(t,e),t}static verifyArgs(t){if(!("filters"in t)||"number"!=typeof t.filters||t.filters<1)throw new L(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(t.filters)}`)}}let _y=(()=>{class n extends Ri{constructor(e){super(2,e),n.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!Hg(e.kernelSize,"number",1,2))throw new L(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}return n.className="Conv2D",n})();se(_y);let Ay=(()=>{class n extends Ri{constructor(e){super(3,e),n.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&(!Array.isArray(e.kernelSize)||1!==e.kernelSize.length&&3!==e.kernelSize.length))throw new L(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}return n.className="Conv3D",n})();se(Ay);let L1=(()=>{class n extends _y{constructor(e){if(super(e),this.inputSpec=[new Xt({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new L(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(4!==(e=at(e)).length)throw new L("Input should have rank 4; Received input shape: "+JSON.stringify(e));const s="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[s])throw new L("The channel dimension of the inputs should be defined. Found `None`.");const r=e[s],o=this.kernelSize.concat([this.filters,r]);this.kernel=this.addWeight("kernel",o,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new Xt({ndim:4,axes:{[s]:r}})],this.built=!0}call(e,s){return z(()=>{let r=Le(e);if(4!==r.shape.length)throw new L(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${r.shape.length}`);const o=r.shape;let i,l;"channelsFirst"===this.dataFormat?(i=2,l=3):(i=1,l=2);const c=o[l],d=this.kernelSize[1],f=this.strides[1],y=[o[0],rr(o[i],this.strides[0],this.kernelSize[0],this.padding),rr(c,f,d,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(r=Qe(r,[0,2,3,1]));let x=Zh(r,this.kernel.read(),y,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(x=Qe(x,[0,3,1,2])),null!=this.bias&&(x=Os(x,this.bias.read(),this.dataFormat)),null!=this.activation&&(x=this.activation.apply(x)),x})}computeOutputShape(e){const s=(e=at(e)).slice();let r,o,a;"channelsFirst"===this.dataFormat?(r=1,o=2,a=3):(r=3,o=1,a=2);const i=this.kernelSize[0],l=this.kernelSize[1],u=this.strides[0],c=this.strides[1];return s[r]=this.filters,s[o]=rr(s[o],u,i,this.padding),s[a]=rr(s[a],c,l,this.padding),s}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}return n.className="Conv2DTranspose",n})();se(L1);let P1=(()=>{class n extends Ay{constructor(e){if(super(e),this.inputSpec=[new Xt({ndim:5})],"same"!==this.padding&&"valid"!==this.padding)throw new L(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(5!==(e=at(e)).length)throw new L("Input should have rank 5; Received input shape: "+JSON.stringify(e));const s="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[s])throw new L("The channel dimension of the inputs should be defined. Found `None`.");const r=e[s],o=this.kernelSize.concat([this.filters,r]);this.kernel=this.addWeight("kernel",o,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new Xt({ndim:5,axes:{[s]:r}})],this.built=!0}call(e,s){return z(()=>{let r=Le(e);if(5!==r.shape.length)throw new L(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${r.shape.length}`);const o=r.shape;let i,l,u;"channelsFirst"===this.dataFormat?(u=2,i=3,l=4):(u=1,i=2,l=3);const h=o[i],d=o[l],f=this.kernelSize[1],g=this.kernelSize[2],y=this.strides[1],x=this.strides[2],N=[o[0],rr(o[u],this.strides[0],this.kernelSize[0],this.padding),rr(h,y,f,this.padding),rr(d,x,g,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(r=Qe(r,[0,2,3,4,1]));let k=Am(r,this.kernel.read(),N,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(k=Qe(k,[0,4,1,2,3])),null!==this.bias&&(k=Os(k,this.bias.read(),this.dataFormat)),null!==this.activation&&(k=this.activation.apply(k)),k})}computeOutputShape(e){const s=(e=at(e)).slice();let r,o,a,i;"channelsFirst"===this.dataFormat?(r=1,o=2,a=3,i=4):(r=4,o=1,a=2,i=3);const l=this.kernelSize[0],u=this.kernelSize[1],c=this.kernelSize[2],h=this.strides[0],d=this.strides[1],p=this.strides[2];return s[r]=this.filters,s[o]=rr(s[o],h,l,this.padding),s[a]=rr(s[a],d,u,this.padding),s[i]=rr(s[i],p,c,this.padding),s}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}return n.className="Conv3DTranspose",n})();se(P1);let jP=(()=>{class n extends Ri{constructor(e,s){if(super(e,s),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==s.filters)throw new L("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=s.kernelInitializer||null!=s.kernelRegularizer||null!=s.kernelConstraint)throw new L("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=s.padding&&"same"!==s.padding&&"valid"!==s.padding)throw new L(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(s.padding)}`);this.depthMultiplier=null==s.depthMultiplier?1:s.depthMultiplier,this.depthwiseInitializer=Nt(s.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=It(s.depthwiseRegularizer),this.depthwiseConstraint=sn(s.depthwiseConstraint),this.pointwiseInitializer=Nt(s.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=It(s.pointwiseRegularizer),this.pointwiseConstraint=sn(s.pointwiseConstraint)}build(e){if((e=at(e)).length<this.rank+2)throw new L(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(e)}`);const s="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[s]||e[s]<0)throw new L(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[s])}`);const r=e[s],o=this.kernelSize.concat([r,this.depthMultiplier]),a=[];for(let l=0;l<this.rank;++l)a.push(1);a.push(r*this.depthMultiplier,this.filters);const i=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",o,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,i,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",a,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,i,this.pointwiseConstraint),this.bias=this.useBias?this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,i,this.biasConstraint):null,this.inputSpec=[new Xt({ndim:this.rank+2,axes:{[s]:r}})],this.built=!0}call(e,s){return z(()=>{let r;if(e=Le(e),1===this.rank)throw new Ue("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(e=Qe(e,[0,2,3,1])),r=ud(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(r=Os(r,this.bias.read(),this.dataFormat)),null!=this.activation&&(r=this.activation.apply(r)),"channelsFirst"===this.dataFormat&&(r=Qe(r,[0,3,1,2])),r})}getConfig(){const e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=Rt(this.depthwiseInitializer),e.pointwiseInitializer=Rt(this.pointwiseInitializer),e.depthwiseRegularizer=bt(this.depthwiseRegularizer),e.pointwiseRegularizer=bt(this.pointwiseRegularizer),e.depthwiseConstraint=nn(this.depthwiseConstraint),e.pointwiseConstraint=nn(this.pointwiseConstraint),e}}return n.className="SeparableConv",n})(),M1=(()=>{class n extends jP{constructor(e){super(2,e)}}return n.className="SeparableConv2D",n})();se(M1);let z1=(()=>{class n extends Ri{constructor(e){super(1,e),n.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){const e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!Hg(e.kernelSize,"number",1,1))throw new L(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}return n.className="Conv1D",n})();se(z1);let B1=(()=>{class n extends qe{constructor(e){super(e),this.cropping="number"==typeof e.cropping?[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:e.cropping,this.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,s){return z(()=>{if(e=Le(e),"channelsLast"===this.dataFormat){const r=Dd(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return Dd(r,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const r=Dd(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return Dd(r,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}})}getConfig(){const e={cropping:this.cropping,dataFormat:this.dataFormat},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Cropping2D",n})();se(B1);let V1=(()=>{class n extends qe{constructor(e){super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==e.size?this.DEFAULT_SIZE:e.size,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Vt(this.dataFormat),this.interpolation=null==e.interpolation?"nearest":e.interpolation,function sL(n){Uo(JO,"InterpolationFormat",n)}(this.interpolation)}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],null==e[2]?null:this.size[0]*e[2],null==e[3]?null:this.size[1]*e[3]]:[e[0],null==e[1]?null:this.size[0]*e[1],null==e[2]?null:this.size[1]*e[2],e[3]]}call(e,s){return z(()=>{let r=Le(e);const o=r.shape;if("channelsFirst"===this.dataFormat){r=Qe(r,[0,2,3,1]);const a=this.size[0]*o[2],i=this.size[1]*o[3],l="nearest"===this.interpolation?ds.resizeNearestNeighbor(r,[a,i]):ds.resizeBilinear(r,[a,i]);return Qe(l,[0,3,1,2])}{const a=this.size[0]*o[1],i=this.size[1]*o[2];return"nearest"===this.interpolation?ds.resizeNearestNeighbor(r,[a,i]):ds.resizeBilinear(r,[a,i])}})}getConfig(){const e={size:this.size,dataFormat:this.dataFormat,interpolation:this.interpolation},s=super.getConfig();return Object.assign(e,s),e}}return n.className="UpSampling2D",n})();se(V1);let W1=(()=>{class n extends Yd{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=Nt(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=sn(e.depthwiseConstraint),this.depthwiseRegularizer=It(e.depthwiseRegularizer)}build(e){if((e=at(e)).length<4)throw new L(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);const s="channelsFirst"===this.dataFormat?1:3;if(null==e[s]||e[s]<0)throw new L(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[s]}).`);const r=e[s];this.depthwiseKernel=this.addWeight("depthwise_kernel",[this.kernelSize[0],this.kernelSize[1],r,this.depthMultiplier],null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.bias=this.useBias?this.addWeight("bias",[r*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.built=!0}call(e,s){return z(()=>{let r=function KP(n,t,e=[1,1],s="valid",r,o){return z(()=>{null==r&&(r="channelsLast"),Vt(r);let a=$y(n,r);if(4!==n.rank)throw new L(`Input for depthwiseConv2d is required to be 4-D, but is instead ${n.rank}-D`);if(4!==t.rank)throw new L(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);return a=gi(a,t,e,"same"===s?"same":"valid","NHWC",o),"channelsFirst"===r&&(a=Qe(a,[0,3,1,2])),a})}(e=Le(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(r=Os(r,this.bias.read(),this.dataFormat)),null!=this.activation&&(r=this.activation.apply(r)),r})}computeOutputShape(e){e=at(e);const r="channelsFirst"===this.dataFormat?e[3]:e[2],o="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,a=Vs("channelsFirst"===this.dataFormat?e[2]:e[1],this.kernelSize[0],this.padding,this.strides[0]),i=Vs(r,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],o,a,i]:[e[0],a,i,o]}getConfig(){const e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=Rt(this.depthwiseInitializer),e.depthwiseRegularizer=bt(this.depthwiseRegularizer),e.depthwiseConstraint=nn(this.depthwiseRegularizer),e}}return n.className="DepthwiseConv2D",n})();function U1(n,t,e,s){if(Array.isArray(n)){if(null!=t||null!=e)throw new L("When inputs is an array, neither initialState or constants should be provided");null!=s&&(e=n.slice(n.length-s,n.length),n=n.slice(0,n.length-s)),n.length>1&&(t=n.slice(1,n.length)),n=n[0]}function r(o){return null==o||Array.isArray(o)?o:[o]}return{inputs:n,initialState:t=r(t),constants:e=r(e)}}function G1(n,t,e,s=!1,r,o,a=!1,i=!1){return z(()=>{const l=t.shape.length;if(l<3)throw new L(`Input should be at least 3D, but is ${l}D.`);const u=[1,0].concat(Ds(2,l));if(t=Qe(t,u),null!=o)throw new Ue("The rnn() functoin of the deeplearn.js backend does not support constants yet.");a&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=r&&((r=de(de(r,"bool"),"float32")).rank===l-1&&(r=wn(r,-1)),r=Qe(r,u)),s&&(t=cs(t,0),null!=r&&(r=cs(r,0)));const c=[];let h,d=e;const p=t.shape[0],f=hs(t);let g,m;null!=r&&(g=hs(r));for(let y=0;y<p;++y){const x=f[y],b=z(()=>n(x,d));if(null==r)h=b[0],d=b[1];else{const w=z(()=>{const S=g[y],N=be(Qn(S),S);return{output:ne(D(b[0],S),D(d[0],N)),newStates:d.map(($,R)=>ne(D(b[1][R],S),D($,N)))}});h=w.output,d=w.newStates}i&&c.push(h)}return i&&(m=Dn(c,1)),[h,m,d]})}se(W1);let so=(()=>{class n extends qe{constructor(e){let s;if(super(e),null==e.cell)throw new L("cell property is missing for the constructor of RNN.");if(s=Array.isArray(e.cell)?new Fy({cells:e.cell}):e.cell,null==s.stateSize)throw new L("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=s,this.returnSequences=null!=e.returnSequences&&e.returnSequences,this.returnState=null!=e.returnState&&e.returnState,this.goBackwards=null!=e.goBackwards&&e.goBackwards,this._stateful=null!=e.stateful&&e.stateful,this.unroll=null!=e.unroll&&e.unroll,this.supportsMasking=!0,this.inputSpec=[new Xt({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){return null==this.states_?Ds(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map(s=>null):this.states_}setStates(e){this.states_=e}computeOutputShape(e){sy(e)&&(e=e[0]);let s=this.cell.stateSize;Array.isArray(s)||(s=[s]);const r=s[0];let o;if(o=this.returnSequences?[e[0],e[1],r]:[e[0],r],this.returnState){const a=[];for(const i of s)a.push([e[0],i]);return[o].concat(a)}return o}computeMask(e,s){return z(()=>{Array.isArray(s)&&(s=s[0]);const r=this.returnSequences?s:null;if(this.returnState){const o=this.states.map(a=>null);return[r].concat(o)}return r})}get states(){if(null==this.states_){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,s=[];for(let r=0;r<e;++r)s.push(null);return s}return this.states_}set states(e){this.states_=e}build(e){if(null!=this.numConstants)throw new Ue("Constants support is not implemented in RNN yet.");sy(e)&&(e=e[0]);const r=this.stateful?e[0]:null,o=e.slice(2);this.inputSpec[0]=new Xt({shape:[r,null,...o]});const a=[e[0]].concat(e.slice(2));let i;if(this.cell.build(a),i=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!Ye(this.stateSpec.map(l=>l.shape[l.shape.length-1]),i))throw new L(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=i.map(l=>new Xt({shape:[null,l]}));this.stateful&&this.resetStates()}resetStates(e,s=!1){z(()=>{if(!this.stateful)throw new tr("Cannot call resetStates() on an RNN Layer that is not stateful.");const r=this.inputSpec[0].shape[0];if(null==r)throw new L("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)this.states_=Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(o=>qt([r,o])):[qt([r,this.cell.stateSize])];else if(null==e)Be(this.states_),null!=this.keptStates&&(Be(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(o=>qt([r,o])):this.states_[0]=qt([r,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new L(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);!0===s?this.keptStates.push(this.states_.slice()):Be(this.states_);for(let o=0;o<this.states_.length;++o){const a=e[o],i=Array.isArray(this.cell.stateSize)?this.cell.stateSize[o]:this.cell.stateSize,l=[r,i];if(!Ye(a.shape,l))throw new L(`State ${o} is incompatible with layer ${this.name}: expected shape=${l}, received shape=${a.shape}`);this.states_[o]=a}}this.states_=this.states_.map(o=>en(o.clone()))})}apply(e,s){let r=null==s?null:s.initialState,o=null==s?null:s.constants;null==s&&(s={});const a=U1(e,r,o,this.numConstants);e=a.inputs,r=a.initialState,o=a.constants;let i=[],l=[];if(null!=r){s.initialState=r,i=i.concat(r),this.stateSpec=[];for(const c of r)this.stateSpec.push(new Xt({shape:c.shape}));l=l.concat(this.stateSpec)}if(null!=o&&(s.constants=o,i=i.concat(o),this.numConstants=o.length),i[0]instanceof Ps){const c=[e].concat(i),h=this.inputSpec.concat(l),d=this.inputSpec;this.inputSpec=h;const p=super.apply(c,s);return this.inputSpec=d,p}return super.apply(e,s)}call(e,s){return z(()=>{const r=null==s?null:s.mask,o=null==s?null:s.training;let a=null==s?null:s.initialState;e=Le(e),null==a&&(a=this.stateful?this.states_:this.getInitialState(e));const i=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(a.length!==i)throw new L(`RNN Layer has ${i} state(s) but was passed ${a.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const l={training:o},c=G1((g,m)=>{const y=this.cell.call([g].concat(m),l);return[y[0],y.slice(1)]},e,a,this.goBackwards,r,null,this.unroll,this.returnSequences),h=c[0],d=c[1],p=c[2];this.stateful&&this.resetStates(p,o);const f=this.returnSequences?d:h;return this.returnState?[f].concat(p):f})}getInitialState(e){return z(()=>{let s=qt(e.shape);return s=ve(s,[1,2]),s=Mu(s),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(r=>r>1?qg(s,[1,r]):s):this.cell.stateSize>1?[qg(s,[1,this.cell.stateSize])]:[s]})}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){const e=super.getConfig(),s={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(s.numConstants=this.numConstants);const r=this.cell.getConfig();return this.getClassName()===n.className&&(s.cell={className:this.cell.getClassName(),config:r}),Object.assign(Object.assign(Object.assign({},r),e),s)}static fromConfig(e,s,r={}){const a=Ms(s.cell,r);return new e(Object.assign(s,{cell:a}))}}return n.className="RNN",n})();se(so);class Ku extends qe{}let Ry=(()=>{class n extends Ku{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,hn(this.units,"units"),this.activation=no(null==e.activation?this.DEFAULT_ACTIVATION:e.activation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=Nt(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Nt(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Nt(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=It(e.kernelRegularizer),this.recurrentRegularizer=It(e.recurrentRegularizer),this.biasRegularizer=It(e.biasRegularizer),this.kernelConstraint=sn(e.kernelConstraint),this.recurrentConstraint=sn(e.recurrentConstraint),this.biasConstraint=sn(e.biasConstraint),this.dropout=$i([1,Yr([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=$i([1,Yr([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=at(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.bias=this.useBias?this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.built=!0}call(e,s){return z(()=>{if(2!==e.length)throw new L(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let r=e[1];e=e[0];const o=null!=s.training&&s.training;let a;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=ro({ones:()=>Qn(e),rate:this.dropout,training:o,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=ro({ones:()=>Qn(r),rate:this.recurrentDropout,training:o,dropoutFunc:this.dropoutFunc}));const i=this.dropoutMask,l=this.recurrentDropoutMask;a=sr(null!=i?D(e,i):e,this.kernel.read()),null!=this.bias&&(a=Os(a,this.bias.read())),null!=l&&(r=D(r,l));let u=ne(a,sr(r,this.recurrentKernel.read()));return null!=this.activation&&(u=this.activation.apply(u)),[u,u]})}getConfig(){const e=super.getConfig(),s={units:this.units,activation:to(this.activation),useBias:this.useBias,kernelInitializer:Rt(this.kernelInitializer),recurrentInitializer:Rt(this.recurrentInitializer),biasInitializer:Rt(this.biasInitializer),kernelRegularizer:bt(this.kernelRegularizer),recurrentRegularizer:bt(this.recurrentRegularizer),biasRegularizer:bt(this.biasRegularizer),activityRegularizer:bt(this.activityRegularizer),kernelConstraint:nn(this.kernelConstraint),recurrentConstraint:nn(this.recurrentConstraint),biasConstraint:nn(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign(Object.assign({},e),s)}}return n.className="SimpleRNNCell",n})();se(Ry);let H1=(()=>{class n extends so{constructor(e){e.cell=new Ry(e),super(e)}call(e,s){return z(()=>(null!=this.cell.dropoutMask&&(Be(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Be(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),super.call(e,{mask:null==s?null:s.mask,training:null==s?null:s.training,initialState:null==s?null:s.initialState})))}static fromConfig(e,s){return new e(s)}}return n.className="SimpleRNN",n})();se(H1);let Dy=(()=>{class n extends Ku{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new L("GRUCell does not support reset_after parameter set to true.");this.units=e.units,hn(this.units,"units"),this.activation=no(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=no(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=Nt(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Nt(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Nt(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=It(e.kernelRegularizer),this.recurrentRegularizer=It(e.recurrentRegularizer),this.biasRegularizer=It(e.biasRegularizer),this.kernelConstraint=sn(e.kernelConstraint),this.recurrentConstraint=sn(e.recurrentConstraint),this.biasConstraint=sn(e.biasConstraint),this.dropout=$i([1,Yr([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=$i([1,Yr([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=at(e),this.kernel=this.addWeight("kernel",[e[e.length-1],3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.bias=this.useBias?this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.built=!0}call(e,s){return z(()=>{if(2!==e.length)throw new L(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);const r=null!=s.training&&s.training;let o=e[1];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=ro({ones:()=>Qn(e),rate:this.dropout,training:r,count:3,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=ro({ones:()=>Qn(o),rate:this.recurrentDropout,training:r,count:3,dropoutFunc:this.dropoutFunc}));const i=this.recurrentDropoutMask;let l,u,c;0<this.dropout&&this.dropout<1&&(e=D(e,this.dropoutMask[0]));let h=sr(e,this.kernel.read());this.useBias&&(h=Os(h,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(o=D(o,i[0]));const d=this.recurrentKernel.read(),[p,f]=Wn(d,[2*this.units,this.units],d.rank-1),g=sr(o,p),[m,y,x]=Wn(h,3,h.rank-1),[b,w]=Wn(g,2,g.rank-1);l=this.recurrentActivation.apply(ne(m,b)),u=this.recurrentActivation.apply(ne(y,w));const S=sr(D(u,o),f);c=this.activation.apply(ne(x,S));const N=ne(D(l,o),D(ne(1,St(l)),c));return[N,N]})}getConfig(){const e=super.getConfig(),s={units:this.units,activation:to(this.activation),recurrentActivation:to(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Rt(this.kernelInitializer),recurrentInitializer:Rt(this.recurrentInitializer),biasInitializer:Rt(this.biasInitializer),kernelRegularizer:bt(this.kernelRegularizer),recurrentRegularizer:bt(this.recurrentRegularizer),biasRegularizer:bt(this.biasRegularizer),activityRegularizer:bt(this.activityRegularizer),kernelConstraint:nn(this.kernelConstraint),recurrentConstraint:nn(this.recurrentConstraint),biasConstraint:nn(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign(Object.assign({},e),s)}}return n.className="GRUCell",n})();se(Dy);let j1=(()=>{class n extends so{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new Dy(e),super(e)}call(e,s){return z(()=>(null!=this.cell.dropoutMask&&(Be(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Be(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),super.call(e,{mask:null==s?null:s.mask,training:null==s?null:s.training,initialState:null==s?null:s.initialState})))}static fromConfig(e,s){return 0===s.implmentation&&(s.implementation=1),new e(s)}}return n.className="GRU",n})();se(j1);let Qd=(()=>{class n extends Ku{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,hn(this.units,"units"),this.activation=no(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=no(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=Nt(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Nt(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Nt(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=It(e.kernelRegularizer),this.recurrentRegularizer=It(e.recurrentRegularizer),this.biasRegularizer=It(e.biasRegularizer),this.kernelConstraint=sn(e.kernelConstraint),this.recurrentConstraint=sn(e.recurrentConstraint),this.biasConstraint=sn(e.biasConstraint),this.dropout=$i([1,Yr([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=$i([1,Yr([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var s;let o;if(e=at(e),this.kernel=this.addWeight("kernel",[e[e.length-1],4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const a=this.biasInitializer,i=this.units;o=new((s=class extends Cs{apply(u,c){const h=a.apply([i]),d=(new Zg).apply([i]),p=a.apply([2*i]);return Ev(Ev(h,d),p)}}).className="CustomInit",s)}else o=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,o,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,s){return z(()=>{const r=null!=s.training&&s.training;if(3!==e.length)throw new L(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let o=e[1];const a=e[2];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=ro({ones:()=>Qn(e),rate:this.dropout,training:r,count:4,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=ro({ones:()=>Qn(o),rate:this.recurrentDropout,training:r,count:4,dropoutFunc:this.dropoutFunc}));const l=this.recurrentDropoutMask;let u,c,h,d;0<this.dropout&&this.dropout<1&&(e=D(e,this.dropoutMask[0]));let p=sr(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(o=D(o,l[0])),p=ne(p,sr(o,this.recurrentKernel.read())),this.useBias&&(p=Os(p,this.bias.read()));const[f,g,m,y]=Wn(p,4,p.rank-1);u=this.recurrentActivation.apply(f),c=this.recurrentActivation.apply(g),h=ne(D(c,a),D(u,this.activation.apply(m))),d=this.recurrentActivation.apply(y);const x=D(d,this.activation.apply(h));return[x,x,h]})}getConfig(){const e=super.getConfig(),s={units:this.units,activation:to(this.activation),recurrentActivation:to(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Rt(this.kernelInitializer),recurrentInitializer:Rt(this.recurrentInitializer),biasInitializer:Rt(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:bt(this.kernelRegularizer),recurrentRegularizer:bt(this.recurrentRegularizer),biasRegularizer:bt(this.biasRegularizer),activityRegularizer:bt(this.activityRegularizer),kernelConstraint:nn(this.kernelConstraint),recurrentConstraint:nn(this.recurrentConstraint),biasConstraint:nn(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign(Object.assign({},e),s)}}return n.className="LSTMCell",n})();se(Qd);let K1=(()=>{class n extends so{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new Qd(e),super(e)}call(e,s){return z(()=>(null!=this.cell.dropoutMask&&(Be(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Be(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),super.call(e,{mask:null==s?null:s.mask,training:null==s?null:s.training,initialState:null==s?null:s.initialState})))}static fromConfig(e,s){return 0===s.implmentation&&(s.implementation=1),new e(s)}}return n.className="LSTM",n})();se(K1);let Fy=(()=>{class n extends Ku{constructor(e){super(e),this.cells=e.cells}get stateSize(){const e=[];for(const s of this.cells.slice().reverse())Array.isArray(s.stateSize)?e.push(...s.stateSize):e.push(s.stateSize);return e}call(e,s){return z(()=>{let r=e.slice(1);const o=[];for(const l of this.cells.slice().reverse())Array.isArray(l.stateSize)?o.push(r.splice(0,l.stateSize.length)):o.push(r.splice(0,1));o.reverse();const a=[];let i;for(let l=0;l<this.cells.length;++l){const u=this.cells[l];r=o[l],i=0===l?[e[0]].concat(r):[i[0]].concat(r),i=u.call(i,s),a.push(i.slice(1))}r=[];for(const l of a.slice().reverse())r.push(...l);return[i[0]].concat(r)})}build(e){let s;sy(e)&&(e=e[0]),this.cells.forEach((r,o)=>{Go(`RNNCell_${o}`,()=>{r.build(e),s=Array.isArray(r.stateSize)?r.stateSize[0]:r.stateSize,e=[e[0],s]})}),this.built=!0}getConfig(){const e=super.getConfig(),o={cells:this.cells.map(a=>({className:a.getClassName(),config:a.getConfig()}))};return Object.assign(Object.assign({},e),o)}static fromConfig(e,s,r={}){const o=[];for(const a of s.cells)o.push(Ms(a,r));return new e({cells:o})}get trainableWeights(){if(!this.trainable)return[];const e=[];for(const s of this.cells)e.push(...s.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const s of this.cells)e.push(...s.nonTrainableWeights);if(!this.trainable){const s=[];for(const r of this.cells)s.push(...r.trainableWeights);return s.concat(e)}return e}getWeights(){const e=[];for(const s of this.cells)e.push(...s.weights);return ry(e)}setWeights(e){const s=[];for(const r of this.cells){const a=e.splice(r.weights.length);for(let i=0;i<r.weights.length;++i)s.push([r.weights[i],a[i]])}oy(s)}}return n.className="StackedRNNCells",n})();function ro(n){const{ones:t,rate:e,training:s=!1,count:r=1,dropoutFunc:o}=n,a=()=>null!=o?o(t(),e):Av(t(),e),i=()=>Bu(a,t,s);return!r||r<=1?en(i().clone()):Array(r).fill(void 0).map(i).map(u=>en(u.clone()))}se(Fy);let XP=(()=>{class n extends so{constructor(e){if(e.unroll)throw new Ue("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new Ue("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new Xt({ndim:5})]}call(e,s){return z(()=>{if(null!=this.cell.dropoutMask&&(Be(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Be(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),s&&s.constants)throw new L("ConvRNN2D cell does not support constants");return super.call(e,{mask:null==s?null:s.mask,training:null==s?null:s.training,initialState:null==s?null:s.initialState})})}computeOutputShape(e){let s=this.computeSingleOutputShape(e);return this.returnSequences||(s=[s[0],...s.slice(2)]),this.returnState&&(s=[s,...Array(2).fill([e[0],...s.slice(-3)])]),s}getInitialState(e){return z(()=>{const{stateSize:s}=this.cell,o=this.computeSingleOutputShape(e.shape),i=qt([o[0],...o.slice(2)]);return Array.isArray(s)?Array(s.length).fill(i):[i]})}resetStates(e,s=!1){z(()=>{if(!this.stateful)throw new tr("Cannot call resetStates() on an RNN Layer that is not stateful.");const r=this.inputSpec[0].shape,o=this.computeSingleOutputShape(r),a=[o[0],...o.slice(2)];if(null==r[0])throw new L("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())this.states_=Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(()=>qt(a)):[qt(a)];else if(null==e)Be(this.states_),null!=this.keptStates&&(Be(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>qt(a)):this.states_[0]=qt(a);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new L(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);s?this.keptStates.push(this.states_.slice()):Be(this.states_);for(let l=0;l<this.states_.length;++l){const u=e[l],c=a;if(!Ye(u.shape,c))throw new L(`State ${l} is incompatible with layer ${this.name}: expected shape=${c}, received shape=${u.shape}`);this.states_[l]=u}}this.states_=this.states_.map(l=>en(l.clone()))})}computeSingleOutputShape(e){const{dataFormat:s,filters:r,kernelSize:o,padding:a,strides:i,dilationRate:l}=this.cell,u="channelsFirst"===s,h=e[u?4:3],d=Vs(e[u?3:2],o[0],a,i[0],l[0]),p=Vs(h,o[1],a,i[1],l[1]);return[...e.slice(0,2),...u?[r,d,p]:[d,p,r]]}}return n.className="ConvRNN2D",n})(),Oy=(()=>{class n extends Qd{constructor(e){const{filters:s,kernelSize:r,strides:o,padding:a,dataFormat:i,dilationRate:l}=e;super(Object.assign(Object.assign({},e),{units:s})),this.filters=s,hn(this.filters,"filters"),this.kernelSize=Ai(r,2,"kernelSize"),this.kernelSize.forEach(u=>hn(u,"kernelSize")),this.strides=Ai(o||1,2,"strides"),this.strides.forEach(u=>hn(u,"strides")),this.padding=a||"valid",fs(this.padding),this.dataFormat=i||"channelsLast",Vt(this.dataFormat),this.dilationRate=Ai(l||1,2,"dilationRate"),this.dilationRate.forEach(u=>hn(u,"dilationRate"))}build(e){var s;e=at(e);const r="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[r])throw new L(`The channel dimension of the input should be defined. Found ${e[r]}`);const i=this.kernelSize.concat([e[r],4*this.filters]);this.kernel=this.addWeight("kernel",i,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const l=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",l,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let u;if(this.unitForgetBias){const c=this.biasInitializer,h=this.filters;u=new((s=class extends Cs{apply(p,f){return Kg([c.apply([h]),Vn([h]),c.apply([2*h])])}}).className="CustomInit",s)}else u=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,u,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,s){return z(()=>{if(3!==e.length)throw new L(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);const r=s.training||!1,o=e[0],a=e[1],i=e[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=ro({ones:()=>Qn(o),rate:this.dropout,training:r,count:4,dropoutFunc:this.dropoutFunc}));const u=this.dropoutMask,c=(ae,j,J)=>j&&j[J]?D(j[J],ae):ae;let h=c(o,u,0),d=c(o,u,1),p=c(o,u,2),f=c(o,u,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=ro({ones:()=>Qn(a),rate:this.recurrentDropout,training:r,count:4,dropoutFunc:this.dropoutFunc}));const g=this.recurrentDropoutMask;let m=c(a,g,0),y=c(a,g,1),x=c(a,g,2),b=c(a,g,3);const[S,N,k,T]=Wn(this.kernel.read(),4,3),[$,R,M,V]=this.useBias?Wn(this.bias.read(),4):[null,null,null,null];h=this.inputConv(h,S,$,this.padding),d=this.inputConv(d,N,R,this.padding),p=this.inputConv(p,k,M,this.padding),f=this.inputConv(f,T,V,this.padding);const[W,H,K,U]=Wn(this.recurrentKernel.read(),4,3);m=this.recurrentConv(m,W),y=this.recurrentConv(y,H),x=this.recurrentConv(x,K),b=this.recurrentConv(b,U);const Y=this.recurrentActivation.apply(ne(h,m)),X=this.recurrentActivation.apply(ne(d,y)),Q=ne(D(X,i),D(Y,this.activation.apply(ne(p,x)))),re=D(this.recurrentActivation.apply(ne(f,b)),this.activation.apply(Q));return[re,re,Q]})}getConfig(){const r=function(n,t){var e={};for(var s in n)Object.prototype.hasOwnProperty.call(n,s)&&t.indexOf(s)<0&&(e[s]=n[s]);if(null!=n&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(s=Object.getOwnPropertySymbols(n);r<s.length;r++)t.indexOf(s[r])<0&&Object.prototype.propertyIsEnumerable.call(n,s[r])&&(e[s[r]]=n[s[r]])}return e}(super.getConfig(),["units"]),o={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign(Object.assign({},r),o)}inputConv(e,s,r,o){const a=wr(e,s,this.strides,o||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return r?Os(a,r,this.dataFormat):a}recurrentConv(e,s){return wr(e,s,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}return n.className="ConvLSTM2DCell",n})();se(Oy);let q1=(()=>{class n extends XP{constructor(e){const s=new Oy(e);super(Object.assign(Object.assign({},e),{cell:s}))}static fromConfig(e,s){return new e(s)}}return n.className="ConvLSTM2D",n})();se(q1);let Ly=(()=>{class n extends qe{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(null==this.noiseShape)return this.noiseShape;const s=e.shape,r=[];for(let o=0;o<this.noiseShape.length;++o)r.push(null==this.noiseShape[o]?s[o]:this.noiseShape[o]);return r}call(e,s){return z(()=>{this.invokeCallHook(e,s);const r=Le(e);if(0<this.rate&&this.rate<1){const o=null!=s.training&&s.training,a=this.getNoiseShape(r);return Bu(()=>Av(r,this.rate,a,this.seed),()=>r,o)}return e})}getConfig(){const e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},s=super.getConfig();return Object.assign(e,s),e}dispose(){return super.dispose()}}return n.className="Dropout",n})();se(Ly);let X1=(()=>{class n extends Ly{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){const s=e.shape;return[s[0],1,s[2]]}}return n.className="SpatialDropout1D",n})();se(X1);let Z1=(()=>{class n extends qe{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){let s=null;null!=e.batchSize&&(s=e.batchSize),this.batchInputShape=[s,e.inputDim]}this.units=e.units,hn(this.units,"units"),this.activation=no(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=Nt(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=Nt(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=sn(e.kernelConstraint),this.biasConstraint=sn(e.biasConstraint),this.kernelRegularizer=It(e.kernelRegularizer),this.biasRegularizer=It(e.biasRegularizer),this.activityRegularizer=It(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){const s=(e=at(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[s,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:s}}],this.built=!0}computeOutputShape(e){const s=(e=at(e)).slice();return s[s.length-1]=this.units,s}call(e,s){return z(()=>{this.invokeCallHook(e,s);const r=Le(e),o=vv(this.activation.getClassName());let a;return null!=o?a=sr(r,this.kernel.read(),o,this.bias?this.bias.read():null):(a=sr(r,this.kernel.read()),null!=this.bias&&(a=Os(a,this.bias.read())),null!=this.activation&&(a=this.activation.apply(a))),a})}getConfig(){const e={units:this.units,activation:to(this.activation),useBias:this.useBias,kernelInitializer:Rt(this.kernelInitializer),biasInitializer:Rt(this.biasInitializer),kernelRegularizer:bt(this.kernelRegularizer),biasRegularizer:bt(this.biasRegularizer),activityRegularizer:bt(this.activityRegularizer),kernelConstraint:nn(this.kernelConstraint),biasConstraint:nn(this.biasConstraint)},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Dense",n})();se(Z1);let Y1=(()=>{class n extends qe{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=at(e);for(const s of e.slice(1))if(null==s)throw new L(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],Zr(e,1)]}call(e,s){return z(()=>{this.invokeCallHook(e,s);let r=Le(e);if("channelsFirst"===this.dataFormat&&r.rank>1){const o=[0];for(let a=2;a<r.rank;++a)o.push(a);o.push(1),r=Qe(r,o)}return function hL(n){if(n.rank<=1)throw new L(`batchFlatten requires a minimum rank of 2. Got rank: ${n.rank}.`);const t=[n.shape[0],Zr(n.shape,1)];return F(n,t)}(r)})}getConfig(){const e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);const s=super.getConfig();return Object.assign(e,s),e}}return n.className="Flatten",n})();se(Y1);let Q1=(()=>{class n extends qe{constructor(e){super(e),this.supportsMasking=!0,this.activation=no(e.activation)}call(e,s){return z(()=>{this.invokeCallHook(e,s);const r=Le(e);return this.activation.apply(r)})}getConfig(){const e={activation:to(this.activation)},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Activation",n})();se(Q1);let J1=(()=>{class n extends qe{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,s){return z(()=>function uL(n,t){return z(()=>{if(2!==n.shape.length)throw new L(`repeat() expects a rank-2 tensor, but received a rank-${n.shape.length} tensor.`);return qg(Mu(n,1),[1,t,1])})}(e=Le(e),this.n))}getConfig(){const e={n:this.n},s=super.getConfig();return Object.assign(e,s),e}}return n.className="RepeatVector",n})();se(J1);let eS=(()=>{class n extends qe{constructor(e){super(e),this.targetShape=e.targetShape;for(let s=0;s<this.targetShape.length;++s)this.isUnknown(this.targetShape[s])&&(this.targetShape[s]=null)}isUnknown(e){return e<0||null==e}fixUnknownDimension(e,s){const r="Total size of new array must be unchanged.",o=s.slice();let a=1,i=null;for(let u=0;u<o.length;++u){const c=o[u];if(this.isUnknown(c)){if(null!==i)throw new L("Can only specifiy one unknown dimension.");i=u}else a*=c}const l=Zr(e);if(null!==i){if(0===a||l%a!=0)throw new L(r);o[i]=l/a}else if(l!==a)throw new L(r);return o}computeOutputShape(e){let s=!1;for(let r=0;r<e.length;++r)if(this.isUnknown(e[r])){s=!0;break}return s?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,s){return z(()=>{this.invokeCallHook(e,s);const r=Le(e),o=r.shape,a=o.slice(0,1).concat(this.fixUnknownDimension(o.slice(1),this.targetShape));return F(r,a)})}getConfig(){const e={targetShape:this.targetShape},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Reshape",n})();se(eS);let tS=(()=>{class n extends qe{constructor(e){if(super(e),null==e.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);const s=Ds(1,e.dims.length+1);if(!Ye(e.dims.slice().sort(),s))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new Xt({ndim:this.dims.length+1})]}computeOutputShape(e){const s=(e=at(e)).slice();return this.dims.forEach((r,o)=>{s[o+1]=e[r]}),s}call(e,s){return Qe(Le(e),this.dimsIncludingBatch)}getConfig(){const e={dims:this.dims},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Permute",n})();se(tS);let nS=(()=>{class n extends qe{constructor(e){super(e??{}),this.supportsMasking=!0,this.maskValue=null!=e?null==e.maskValue?0:e.maskValue:0}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),s={maskValue:this.maskValue};return Object.assign(s,e),s}computeMask(e,s){const r=Le(e);return hu(Po(r,this.maskValue),-1)}call(e,s){return z(()=>{this.invokeCallHook(e,s);const r=Le(e),i=hu(Po(r,this.maskValue),-1,!0);return D(r,de(i,r.dtype))})}}return n.className="Masking",n})();se(nS);let sS=(()=>{class n extends qe{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){let s=null;null!=e.batchSize&&(s=e.batchSize),this.batchInputShape=null==e.inputLength?[s,null]:[s].concat(dt(e.inputLength))}this.inputDim=e.inputDim,hn(this.inputDim,"inputDim"),this.outputDim=e.outputDim,hn(this.outputDim,"outputDim"),this.embeddingsInitializer=Nt(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=It(e.embeddingsRegularizer),this.activityRegularizer=It(e.activityRegularizer),this.embeddingsConstraint=sn(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,s){return z(()=>this.maskZero?(e=Le(e),Po(e,Je(e))):null)}computeOutputShape(e){if(e=at(e),null==this.inputLength)return[...e,this.outputDim];const s=dt(this.inputLength);if(s.length!==e.length-1)throw new L(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let r=0;for(let o=0;o<s.length;++o){const a=s[o],i=e[o+1];if(null!=a&&null!=i&&a!==i)throw new L(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);null==a&&(s[r]=i),r++}}return[e[0],...s,this.outputDim]}call(e,s){return z(()=>{this.invokeCallHook(e,s);let r=Le(e);"int32"!==r.dtype&&(r=nr(r,"int32"));const o=_v(this.embeddings.read(),F(r,[r.size]));return F(o,at(this.computeOutputShape(r.shape)))})}getConfig(){const e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:Rt(this.embeddingsInitializer),embeddingsRegularizer:bt(this.embeddingsRegularizer),activityRegularizer:bt(this.activityRegularizer),embeddingsConstraint:nn(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Embedding",n})();se(sS);class Ko extends qe{constructor(t){super(t||{}),this.supportsMasking=!0}mergeFunction(t){throw new Ue}computeElementwiseOpOutputShape(t,e){if(null==t||null==e)return null;if(t.length<e.length)return this.computeElementwiseOpOutputShape(e,t);if(0===e.length)return t;const s=t.slice(0,t.length-e.length);for(let r=0;r<e.length;++r){const o=t[t.length-e.length+r],a=e[r];if(null==o||null==a||o<0||a<0)s.push(null);else if(1===o)s.push(a);else if(1===a)s.push(o);else{if(o!==a)throw new L("Operands could not be broadcast together with shapes "+JSON.stringify(t)+" "+JSON.stringify(e));s.push(o)}}return s}build(t){if(Array.isArray(t)&&!Array.isArray(t[0])&&(t=[at(t)]),t.length<2)throw new L(`A merge layer should be called on an Array of at least 2 inputs. Got ${t.length} input(s).`);let e=[];for(const o of t)null!=o&&null!==o[0]&&e.push(o[0]);if(e=Xr(e),e.length>1)throw new L(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(t)}.`);let s=null==t[0]?null:t[0].slice(1);for(let o=1;o<t.length;++o){const a=null==t[o]?null:t[o].slice(1);s=this.computeElementwiseOpOutputShape(s,a)}const r=t.map(o=>o.length);this.reshapeRequired=-1!==t.indexOf(null)||1!==Xr(r).length}call(t,e){return z(()=>{if(this.reshapeRequired){const s=[],r=t.map(o=>o.rank);if(-1===r.indexOf(null)){const o=Yr(r);for(let a of t){const i=a.rank;for(let l=0;l<o-i;++l)a=Mu(a,1);s.push(a)}return this.mergeFunction(s)}{let o=!1;for(const l of t){const u=l.rank;if(null==u){const c=l.shape,h=c[0],d=c.slice(1).concat([h]);let p=F(l,[h].concat(Zr(c.slice(1))));p=Qe(p,[1,0]),p=F(p,d),s.push(p),o=!0}else if(u>1){const c=Ds(1,u).concat([0]);s.push(Qe(l,c)),o=!0}else s.push(l)}let a=this.mergeFunction(s);const i=a.rank;if(o)if(null==i){const l=a.shape,c=l[l.length-1],h=[c].concat(l.slice(0,l.length-1));a=F(Qe(F(a,[-1,c]),[1,0]),h)}else if(i>1){const l=[i-1].concat(Ds(0,i-1));a=Qe(a,l)}return a}}return this.mergeFunction(t)})}computeOutputShape(t){let e;e=null==t[0]?null:t[0].slice(1);for(let r=1;r<t.length;++r){const o=null==t[r]?null:t[r].slice(1);e=this.computeElementwiseOpOutputShape(e,o)}let s=[];for(const r of t)null!=r&&null!==r[0]&&s.push(r[0]);return s=Xr(s),e=1===s.length?s.concat(e):[null].concat(e),e}computeMask(t,e){return z(()=>{if(null==e)return null;if(!Array.isArray(e))throw new L("`mask` should be an Array");if(!Array.isArray(t))throw new L("`inputs` should be an Array");if(e.length!==t.length)throw new L(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${t.length} vs ${e.length})`);if(e.every(r=>null==r))return null;let s=(e=e.map(r=>null==r?r:wn(r,0)))[0];for(let r=1;r<e.length-1;++r)s=ws(s,e[r]);return s})}}let Jd=(()=>{class n extends Ko{constructor(e){super(e)}mergeFunction(e){return z(()=>{let s=e[0].clone();for(let r=1;r<e.length;++r)s=ne(s,e[r]);return s})}}return n.className="Add",n})();se(Jd);let ep=(()=>{class n extends Ko{constructor(e){super(e)}mergeFunction(e){return z(()=>{let s=e[0].clone();for(let r=1;r<e.length;++r)s=D(s,e[r]);return s})}}return n.className="Multiply",n})();se(ep);let tp=(()=>{class n extends Ko{constructor(e){super(e)}mergeFunction(e){return z(()=>{let s=e[0].clone();for(let r=1;r<e.length;++r)s=ne(s,e[r]);return D(1/e.length,s)})}}return n.className="Average",n})();se(tp);let np=(()=>{class n extends Ko{constructor(e){super(e)}mergeFunction(e){return z(()=>{let s=e[0];for(let r=1;r<e.length;++r)s=Qs(s,e[r]);return s})}}return n.className="Maximum",n})();se(np);let sp=(()=>{class n extends Ko{constructor(e){super(e)}mergeFunction(e){return z(()=>{let s=e[0];for(let r=1;r<e.length;++r)s=Hr(s,e[r]);return s})}}return n.className="Minimum",n})();se(sp);let rp=(()=>{class n extends Ko{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!Array.isArray(e)||!Array.isArray(e[0])||1===e.length)throw new L("A `Concatenate` layer should be called on a list of at least 2 inputs");let s=!0;for(const o of e)if(null!=o){s=!1;break}if(s)return;const r=[];for(let o=0;o<e.length;++o){const a=e[o].slice();a.splice(this.axis,1);let i=!1;for(const l of r)if(Ye(l,a)){i=!0;break}i||r.push(a)}if(r.length>1)throw new L("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return z(()=>Kg(e,this.axis))}computeOutputShape(e){if(!Array.isArray(e)||!Array.isArray(e[0]))throw new L("A `Concatenate` layer should be called on a list of inputs.");const s=e,r=s[0].slice(),o=this.axis<0?r.length+this.axis:this.axis;for(const a of s.slice(1)){if(null==r[o]||null==a[o]){r[o]=null;break}r[o]+=a[o]}return r}computeMask(e,s){if(null==s)return null;if(!Array.isArray(s))throw new L("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new L("`inputs` should be an array for Concatenate");if(s.length!==e.length)throw new L(`Mismatch in the length of mask (${s.length}) and the legnth of inputs (${e.length})`);return z(()=>{let r=!0;if(s.forEach(i=>{null==i||(r=!1)}),r)return null;const o=[];for(let i=0;i<e.length;++i)o.push(null==s[i]?de(Qn(e[i]),"bool"):s[i].rank<e[i].rank?wn(s[i],-1):s[i]);const a=Mt(o,this.axis);return qh(a,-1,!1)})}getConfig(){const e={axis:this.axis},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Concatenate",n})();function qu(n,t){for(;n<0;)n+=t;return n}se(rp);let rS=(()=>{class n extends Ko{constructor(e){super(e),this.axes=e.axes,this.normalize=null!=e.normalize&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){C(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const s=e[0],r=e[1];if(s.length>3||r.length>3)throw new Ue("Dot layer does not support tensors of 4D or higher rank yet.");const o=this.interpretAxes(s,r);if(s[o[0]]!==r[o[1]])throw new L(`Dimension incompatibility: ${s[o[0]]} !== ${r[o[1]]}`)}mergeFunction(e){if(2!==e.length)throw new L(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let o,s=e[0],r=e[1];return o=Array.isArray(this.axes)?this.axes.map((a,i)=>qu(a,e[i].shape.length)):[qu(this.axes,s.shape.length),qu(this.axes,r.shape.length)],this.normalize&&(s=Bd(s,o[0]),r=Bd(r,o[1])),function ZP(n,t,e){if(n.shape.length>3||t.shape.length>3)throw new Ue("batchDot is not implemented for tensors of 4D or higher rank yet");if(C(n.shape.length>=2,()=>`batchDot requires the rank of x to be >= 2, but got ${n.shape.length}`),C(n.shape.length>=2,()=>`batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`),"number"==typeof e&&(e=[e,e]),"complex64"===n.dtype||"complex64"===t.dtype)throw new Ue("batchDot is not implemented for complex64-type Tensors yet.");const s=n.shape.length,r=t.shape.length;null==e&&(e=[s-1,r-2]);const o=e;return z(()=>{let a,i;if(s>r){a=s-r;const l=[];for(let u=0;u<a;++u)l.push(1);t=F(t,t.shape.concat(l))}else if(r>s){a=r-s;const l=[];for(let u=0;u<a;++u)l.push(1);n=F(n,n.shape.concat(l))}else a=0;if(i=2===n.shape.length&&2===t.shape.length?o[0]===o[1]?ve(D(n,t),o[0]):ve(D(Qe(n,[1,0]),t),o[1]):Ke(n,t,o[0]!==n.shape.length-1,o[1]===t.shape.length-1),a>0){let l;l=s>r?s+r-3:s-1;const u=[];for(let c=l;c<l+a;++c)u.push(c);i=Kr(i,u)}return 1===i.shape.length&&(i=wn(i,1)),i})}(s,r,o)}interpretAxes(e,s){let r;return r=Array.isArray(this.axes)?this.axes:[qu(this.axes,e.length),qu(this.axes,s.length)],r}computeOutputShape(e){C(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const s=e[0].slice(),r=e[1].slice();if(s.length>3||r.length>3)throw new Ue("Dot layer does not support tensors of 4D or higher rank yet.");const o=this.interpretAxes(s,r);s.splice(o[0],1),r.splice(o[1],1),r.splice(0,1);const a=s.concat(r);return 1===a.length&&a.push(1),a}computeMask(e,s){return null}getConfig(){const e={axes:this.axes,normalize:this.normalize},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Dot",n})();se(rS);let oS=(()=>{class n extends qe{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),s={stddev:this.stddev};return Object.assign(s,e),s}call(e,s){return z(()=>{this.invokeCallHook(e,s);const r=Le(e);return Bu(()=>ne(Fd(r.shape,0,this.stddev),r),()=>r,s.training||!1)})}}return n.className="GaussianNoise",n})();se(oS);let aS=(()=>{class n extends qe{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),s={rate:this.rate};return Object.assign(s,e),s}call(e,s){return z(()=>{this.invokeCallHook(e,s);const r=Le(e);return this.rate>0&&this.rate<1?Bu(()=>{const a=Math.sqrt(this.rate/(1-this.rate));return D(r,Fd(r.shape,1,a))},()=>r,s.training||!1):r})}}return n.className="GaussianDropout",n})();se(aS);let iS=(()=>{class n extends qe{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||Le(e).shape}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),s={rate:this.rate};return Object.assign(s,e),s}call(e,s){return z(()=>{if(this.rate<1&&this.rate>0){const r=this._getNoiseShape(e);return Bu(()=>{const a=Le(e),u=-1.7580993408473766;let c=vr(jr(r),this.rate);c=nr(c,"float32");const h=((1-this.rate)*(1+this.rate*u**2))**-.5,d=-h*u*this.rate,p=ne(D(a,c),D(ne(c,-1),u));return ne(D(p,h),d)},()=>Le(e),s.training||!1)}return e})}}return n.className="AlphaDropout",n})();function Xu(n,t,e,s,r,o=.001){let a;if(2===n.rank)a=wm(n,t,e,s,r,o);else if(3===n.rank)a=vm(n,t,e,s,r,o);else{if(4!==n.rank)throw new Ue(`batchNormalization is not implemented for array of rank ${n.rank} yet`);a=Sm(n,t,e,s,r,o)}return a}se(iS);let lS=(()=>{class n extends qe{constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=null==e.axis?-1:e.axis,this.momentum=null==e.momentum?.99:e.momentum,this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=Nt(e.betaInitializer||"zeros"),this.gammaInitializer=Nt(e.gammaInitializer||"ones"),this.movingMeanInitializer=Nt(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=Nt(e.movingVarianceInitializer||"ones"),this.betaConstraint=sn(e.betaConstraint),this.gammaConstraint=sn(e.gammaConstraint),this.betaRegularizer=It(e.betaRegularizer),this.gammaRegularizer=It(e.gammaRegularizer)}build(e){e=at(e);const s=this.axis>=0?this.axis:this.axis+e.length,r=e[s];if(null==r)throw new L(`Axis ${s} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new Xt({ndim:e.length,axes:{[s]:r}})];const o=[r];this.scale&&(this.gamma=this.addWeight("gamma",o,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",o,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",o,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",o,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,s){return z(()=>{const r=null!=s.training&&s.training,o=Le(e),a=o.shape,i=a.length,l=Ds(0,i),u=this.axis>=0?this.axis:this.axis+i;l.splice(u,1);const c=Vo(1,i);c[u]=a[u];const h=l.slice();h.sort();const d=!Ye(h,Ds(0,i).slice(0,i-1));if(!r)return(()=>{if(d){const b=F(this.movingMean.read(),c),w=F(this.movingVariance.read(),c),S=this.center?F(this.beta.read(),c):null,N=this.scale?F(this.gamma.read(),c):null;return Xu(o,b,w,S,N,this.epsilon)}return Xu(o,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[f,g,m]=function JP(n,t,e,s,r=.001){return Ye(s.slice().sort(),Ds(0,n.rank-1))?function YP(n,t,e,s,r=.001){return z(()=>{const o=Nu(n,s),a=o.mean,i=o.variance;return[Xu(n,a,i,e,t,r),a,i]})}(n,t,e,s,r):function QP(n,t,e,s,r=.001){return z(()=>{const o=Nu(n,s),a=o.mean,i=o.variance,l=[];for(const f of Ds(0,n.rank))-1!==s.indexOf(f)?l.push(1):l.push(n.shape[f]);const u=F(a,l),c=F(i,l),h=null==t?null:F(t,l),d=null==e?null:F(e,l);return[Xu(n,u,c,d,h,r),a,i]})}(n,t,e,s,r)}(o,this.gamma.read(),this.beta.read(),l,this.epsilon),y=(b,w,S)=>{z(()=>{const N=1-S,k=b.read(),T=D(be(k,w),N);b.write(be(k,T))})};return(()=>{y(this.movingMean,g,this.momentum),y(this.movingVariance,m,this.momentum)})(),f})}getConfig(){const e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Rt(this.betaInitializer),gammaInitializer:Rt(this.gammaInitializer),movingMeanInitializer:Rt(this.movingMeanInitializer),movingVarianceInitializer:Rt(this.movingVarianceInitializer),betaRegularizer:bt(this.betaRegularizer),gammaRegularizer:bt(this.gammaRegularizer),betaConstraint:nn(this.betaConstraint),gammaConstraint:nn(this.gammaConstraint)},s=super.getConfig();return Object.assign(e,s),e}}return n.className="BatchNormalization",n})();se(lS);let uS=(()=>{class n extends qe{constructor(e){if(null==e&&(e={}),super(e),this.axis=null==e.axis?-1:e.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else{if(!Array.isArray(this.axis))throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);for(const s of this.axis)if(!Number.isInteger(s))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=Nt(e.betaInitializer||"zeros"),this.gammaInitializer=Nt(e.gammaInitializer||"ones"),this.betaRegularizer=It(e.betaRegularizer),this.gammaRegularizer=It(e.gammaRegularizer),this.supportsMasking=!0}build(e){const s=(e=at(e)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let a=0;a<this.axis.length;++a)this.axis[a]<0&&(this.axis[a]+=s);for(const a of this.axis)if(a<0||a>=s)throw new Error(`Invalid axis: ${a}`);if(this.axis.length!==Xr(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const r=this.axis.map(a=>e[a]);this.gamma=this.scale?this.addWeight("gamma",r,"float32",this.gammaInitializer,this.gammaRegularizer,!0):null,this.beta=this.center?this.addWeight("beta",r,"float32",this.betaInitializer,this.betaRegularizer,!0):null,this.built=!0}call(e,s){const r=Le(e),o=r.shape,a=o.length;return z(()=>{let{mean:l,variance:u}=Nu(r,this.axis,!0);const c=Vo(1,a);for(const m of this.axis)c[m]=o[m];const h=m=>null!=m&&m.shape.length!==a?F(m,c):m;let d=this.scale?h(this.gamma.read()):null,p=this.center?h(this.beta.read()):null;const f=[],g=[];for(let m=0;m<a;++m)-1!==this.axis.indexOf(m)?(f.push(o[m]),g.push(1)):(f.push(1),g.push(o[m]));return l=us(l,f),u=us(u,f),null!=d&&(d=us(d,g)),null!=p&&(p=us(p,g)),Xu(r,l,u,p,d,this.epsilon)})}getConfig(){const e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Rt(this.betaInitializer),gammaInitializer:Rt(this.gammaInitializer),betaRegularizer:bt(this.betaRegularizer),gammaRegularizer:bt(this.gammaRegularizer)},s=super.getConfig();return Object.assign(e,s),e}}return n.className="LayerNormalization",n})();se(uS);let cS=(()=>{class n extends qe{constructor(e){if(null==e&&(e={}),super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,null==e.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new L(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);let s,r;if("number"==typeof e.padding[0])s=[e.padding[0],e.padding[0]],r=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new L(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(s=e.padding[0],2!==e.padding[1].length)throw new L(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);r=e.padding[1]}this.padding=[s,r]}this.inputSpec=[new Xt({ndim:4})]}computeOutputShape(e){let s,r;return e=at(e),"channelsFirst"===this.dataFormat?(s=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,r=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],s,r]):(s=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,r=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],s,r,e[3]])}call(e,s){return z(()=>function e3(n,t,e){return z(()=>{if(4!==n.rank)throw new L(`temporalPadding expects input tensor to be 4-D, but received a ${n.rank}-D tensor.`);if(null==t&&(t=[[1,1],[1,1]]),2!==t.length||2!==t[0].length||2!==t[1].length)throw new L("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==e&&(e="channelsLast"),"channelsLast"!==e&&"channelsFirst"!==e)throw new L(`Unknown data format: ${e}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let s;return s="channelsFirst"===e?[[0,0],[0,0],t[0],t[1]]:[[0,0],t[0],t[1],[0,0]],Sr(n,s)})}(Le(e),this.padding,this.dataFormat))}getConfig(){const e={padding:this.padding,dataFormat:this.dataFormat},s=super.getConfig();return Object.assign(e,s),e}}return n.className="ZeroPadding2D",n})();function op(n,t,e,s,r,o){return z(()=>{let a;Vt(r),Cv(o),fs(s),null==e&&(e=[1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==o&&(o="max"),n=$y(n,r);const i="same"===s?"same":"valid";return a="max"===o?Cu(n,t,e,i):mu(n,t,e,i),"channelsFirst"===r&&(a=Qe(a,[0,3,1,2])),a})}function hS(n,t,e,s,r,o){return z(()=>{let a;Vt(r),Cv(o),fs(s),null==e&&(e=[1,1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==o&&(o="max"),n=D1(n,r);const i="same"===s?"same":"valid";return a="max"===o?jm(n,t,e,i):bm(n,t,e,i),"channelsFirst"===r&&(a=Qe(a,[0,4,1,2,3])),a})}se(cS);class dS extends qe{constructor(t){if(null==t.poolSize&&(t.poolSize=2),super(t),"number"==typeof t.poolSize)this.poolSize=[t.poolSize];else{if(!Array.isArray(t.poolSize)||1!==t.poolSize.length||"number"!=typeof t.poolSize[0])throw new L(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(t.poolSize)}`);this.poolSize=t.poolSize}if(hn(this.poolSize,"poolSize"),null==t.strides)this.strides=this.poolSize;else if("number"==typeof t.strides)this.strides=[t.strides];else{if(!Array.isArray(t.strides)||1!==t.strides.length||"number"!=typeof t.strides[0])throw new L(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(t.strides)}`);this.strides=t.strides}hn(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,fs(this.padding),this.inputSpec=[new Xt({ndim:3})]}computeOutputShape(t){const e=Vs((t=at(t))[1],this.poolSize[0],this.padding,this.strides[0]);return[t[0],e,t[2]]}call(t,e){return z(()=>{this.invokeCallHook(t,e),t=Mu(Le(t),2);const s=this.poolingFunction(Le(t),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return Kr(s,[2])})}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides},e=super.getConfig();return Object.assign(t,e),t}}let pS=(()=>{class n extends dS{constructor(e){super(e)}poolingFunction(e,s,r,o,a){return Vt(a),fs(o),op(e,s,r,o,a,"max")}}return n.className="MaxPooling1D",n})();se(pS);let fS=(()=>{class n extends dS{constructor(e){super(e)}poolingFunction(e,s,r,o,a){return Vt(a),fs(o),op(e,s,r,o,a,"avg")}}return n.className="AveragePooling1D",n})();se(fS);class mS extends qe{constructor(t){if(null==t.poolSize&&(t.poolSize=[2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize],null==t.strides)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(2!==t.strides.length)throw new L(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${t.strides.length}.`);this.strides=t.strides}else this.strides=[t.strides,t.strides];hn(this.poolSize,"poolSize"),hn(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Vt(this.dataFormat),fs(this.padding),this.inputSpec=[new Xt({ndim:4})]}computeOutputShape(t){t=at(t);let e="channelsFirst"===this.dataFormat?t[2]:t[1],s="channelsFirst"===this.dataFormat?t[3]:t[2];return e=Vs(e,this.poolSize[0],this.padding,this.strides[0]),s=Vs(s,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[t[0],t[1],e,s]:[t[0],e,s,t[3]]}call(t,e){return z(()=>(this.invokeCallHook(t,e),this.poolingFunction(Le(t),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}let gS=(()=>{class n extends mS{constructor(e){super(e)}poolingFunction(e,s,r,o,a){return Vt(a),fs(o),op(e,s,r,o,a,"max")}}return n.className="MaxPooling2D",n})();se(gS);let yS=(()=>{class n extends mS{constructor(e){super(e)}poolingFunction(e,s,r,o,a){return Vt(a),fs(o),op(e,s,r,o,a,"avg")}}return n.className="AveragePooling2D",n})();se(yS);class xS extends qe{constructor(t){if(null==t.poolSize&&(t.poolSize=[2,2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize,t.poolSize],null==t.strides)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(3!==t.strides.length)throw new L(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${t.strides.length}.`);this.strides=t.strides}else this.strides=[t.strides,t.strides,t.strides];hn(this.poolSize,"poolSize"),hn(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Vt(this.dataFormat),fs(this.padding),this.inputSpec=[new Xt({ndim:5})]}computeOutputShape(t){t=at(t);let e="channelsFirst"===this.dataFormat?t[2]:t[1],s="channelsFirst"===this.dataFormat?t[3]:t[2],r="channelsFirst"===this.dataFormat?t[4]:t[3];return e=Vs(e,this.poolSize[0],this.padding,this.strides[0]),s=Vs(s,this.poolSize[1],this.padding,this.strides[1]),r=Vs(r,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[t[0],t[1],e,s,r]:[t[0],e,s,r,t[4]]}call(t,e){return z(()=>(this.invokeCallHook(t,e),this.poolingFunction(Le(t),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}let bS=(()=>{class n extends xS{constructor(e){super(e)}poolingFunction(e,s,r,o,a){return Vt(a),fs(o),hS(e,s,r,o,a,"max")}}return n.className="MaxPooling3D",n})();se(bS);let wS=(()=>{class n extends xS{constructor(e){super(e)}poolingFunction(e,s,r,o,a){return Vt(a),fs(o),hS(e,s,r,o,a,"avg")}}return n.className="AveragePooling3D",n})();se(wS);class vS extends qe{constructor(t){super(t),this.inputSpec=[new Xt({ndim:3})]}computeOutputShape(t){return[t[0],t[2]]}call(t,e){throw new Ue}}let SS=(()=>{class n extends vS{constructor(e){super(e||{})}call(e,s){return z(()=>{const r=Le(e);return At(r,1)})}}return n.className="GlobalAveragePooling1D",n})();se(SS);let CS=(()=>{class n extends vS{constructor(e){super(e||{})}call(e,s){return z(()=>{const r=Le(e);return ls(r,1)})}}return n.className="GlobalMaxPooling1D",n})();se(CS);class NS extends qe{constructor(t){super(t),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Vt(this.dataFormat),this.inputSpec=[new Xt({ndim:4})]}computeOutputShape(t){return"channelsLast"===this.dataFormat?[t[0],t[3]]:[t[0],t[1]]}call(t,e){throw new Ue}getConfig(){const t={dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}let IS=(()=>{class n extends NS{call(e,s){return z(()=>{const r=Le(e);return At(r,"channelsLast"===this.dataFormat?[1,2]:[2,3])})}}return n.className="GlobalAveragePooling2D",n})();se(IS);let kS=(()=>{class n extends NS{call(e,s){return z(()=>{const r=Le(e);return ls(r,"channelsLast"===this.dataFormat?[1,2]:[2,3])})}}return n.className="GlobalMaxPooling2D",n})();se(kS);class TS extends qe{constructor(t){super(t),this.layer=t.layer}build(t){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(t){null!=this.layer&&(this.layer.trainable=t)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(t){this.layer.setWeights(t)}getConfig(){const t={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},e=super.getConfig();return Object.assign(t,e),t}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(t)}static fromConfig(t,e,s={}){const o=Ms(e.layer,s);delete e.layer;const a={layer:o};return Object.assign(a,e),new t(a)}}let $S=(()=>{class n extends TS{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=at(e)).length<3)throw new L(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];const s=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(s),this.layer.built=!0),super.build(e)}computeOutputShape(e){const s=[(e=at(e))[0]].concat(e.slice(2)),r=this.layer.computeOutputShape(s);return[r[0],e[1]].concat(r.slice(1))}call(e,s){return z(()=>G1((i,l)=>[Le(this.layer.call(i,s)),[]],e=Le(e),[],!1,null,null,!1,!0)[1])}}return n.className="TimeDistributed",n})();se($S);let ES=(()=>{class n extends TS{constructor(e){super(e);const s=e.layer.getConfig(),r={};r.className=e.layer.getClassName(),r.config=s,this.forwardLayer=Ms(r),s.goBackwards=!0!==s.goBackwards;const o={};if(o.className=e.layer.getClassName(),o.config=s,this.backwardLayer=Ms(o),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,function t3(n){Uo(nL,"BidirectionalMergeMode",n)}(this.mergeMode),e.weights)throw new Ue("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){const r=Math.floor(e.length/2);this.forwardLayer.setWeights(e.slice(0,r)),this.backwardLayer.setWeights(e.slice(r))}computeOutputShape(e){let r,o,a,s=this.forwardLayer.computeOutputShape(e);return Array.isArray(s)&&Array.isArray(s[0])||(s=[s]),this.returnState&&(a=s.slice(1)),r=s[0],"concat"===this.mergeMode?(r[r.length-1]*=2,o=[r]):o=null==this.mergeMode?[r,r.slice()]:[r],this.returnState?null==this.mergeMode?o.concat(a).concat(a.slice()):[r].concat(a).concat(a.slice()):Gn(o)}apply(e,s){let r=null==s?null:s.initialState,o=null==s?null:s.constants;null==s&&(s={});const a=U1(e,r,o,this.numConstants);if(e=a.inputs,r=a.initialState,o=a.constants,Array.isArray(e)&&(r=e.slice(1),e=e[0]),(null==r||0===r.length)&&null==o)return super.apply(e,s);const i=[],l=[];if(null!=r){const c=r.length;if(c%2>0)throw new L("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");s.initialState=r,i.push(...r);const h=r.map(d=>new Xt({shape:d.shape}));this.forwardLayer.stateSpec=h.slice(0,c/2),this.backwardLayer.stateSpec=h.slice(c/2),l.push(...h)}if(null!=o)throw new Ue("Support for constants in Bidirectional layers is not implemented yet.");const u=i[0]instanceof Ps;for(const c of i)if(c instanceof Ps!==u)throw new L("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(u){const c=[e].concat(i),h=this.inputSpec.concat(l),d=this.inputSpec;this.inputSpec=h;const p=super.apply(c,s);return this.inputSpec=d,p}return super.apply(e,s)}call(e,s){return z(()=>{const r=s.initialState;let o,a,i,l;if(null==r)o=this.forwardLayer.call(e,s),a=this.backwardLayer.call(e,s);else{const u=r.slice(0,r.length/2),c=r.slice(r.length/2);o=this.forwardLayer.call(e,Object.assign(s,{initialState:u})),a=this.backwardLayer.call(e,Object.assign(s,{initialState:c}))}return this.returnState&&(Array.isArray(o)&&(i=o.slice(1).concat(a.slice(1))),o=o[0],a=a[0]),this.returnSequences&&(a=cs(a,1)),"concat"===this.mergeMode?l=Kg([o,a]):"sum"===this.mergeMode?l=ne(o,a):"ave"===this.mergeMode?l=D(.5,ne(o,a)):"mul"===this.mergeMode?l=D(o,a):null==this.mergeMode&&(l=[o,a]),this.returnState?null==this.mergeMode?l.concat(i):[l].concat(i):l})}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){Go(this.forwardLayer.name,()=>{this.forwardLayer.build(e)}),Go(this.backwardLayer.name,()=>{this.backwardLayer.build(e)}),this.built=!0}computeMask(e,s){let r;if(Array.isArray(s)&&(s=s[0]),r=this.returnSequences?null==this.mergeMode?[s,s]:s:null==this.mergeMode?[null,null]:null,this.returnState){const a=this.forwardLayer.states.map(i=>null);return Array.isArray(r)?r.concat(a).concat(a):[r].concat(a).concat(a)}return r}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){const e={mergeMode:this.mergeMode},s=super.getConfig();return Object.assign(e,s),e}static fromConfig(e,s){const r=Ms(s.layer);if(delete s.layer,null!=s.numConstants)throw new Ue("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const o=s;return o.layer=r,new e(o)}}return n.className="Bidirectional",n})();se(ES);let _S=(()=>{class n extends qe{constructor(e){super(e),this.scale=e.scale,this.offset=e.offset?e.offset:0}getConfig(){const e={scale:this.scale,offset:this.offset},s=super.getConfig();return Object.assign(e,s),e}call(e,s){return z(()=>("float32"!==(e=Le(e)).dtype&&(e=nr(e,"float32")),ne(D(e,this.scale),this.offset)))}}return n.className="Rescaling",n})();se(_S);const{resizeBilinear:s3,cropAndResize:r3}=ds;let AS=(()=>{class n extends qe{constructor(e){super(e),this.height=e.height,this.width=e.width}centerCrop(e,s,r,o,a,i,l,u){return z(()=>{let c,h=!1;const m=[s/i,r/l,(o+s)/i,(a+r)/l],y=[];3===e.rank?(h=!0,c=Dn([e])):c=e;for(let N=0;N<c.shape[0];N++)y.push(m);const x=Xn(y,[y.length,4]),b=Mo(0,y.length,1,"int32"),S=r3(c,x,b,[o,a],"nearest");return nr(h?Le(hs(S)):S,u)})}upsize(e,s,r,o){return z(()=>nr(s3(e,[s,r]),o))}call(e,s){return z(()=>{const r=Le(e),o=r.dtype,a=r.shape,i=a[a.length-3],l=a[a.length-2];let u=0;i!==this.height&&(u=Math.floor((i-this.height)/2));let c=0;return l!==this.width&&(c=Math.floor((l-this.width)/2),0===c&&(c=1)),u>=0&&c>=0?this.centerCrop(r,u,c,this.height,this.width,i,l,o):this.upsize(e,this.height,this.width,o)})}getConfig(){const e={height:this.height,width:this.width},s=super.getConfig();return Object.assign(e,s),e}computeOutputShape(e){const r=(e=at(e)).length-2;return e[e.length-3]=this.height,e[r]=this.width,e}}return n.className="CenterCrop",n})();se(AS);let RS=(()=>{class n extends qe{constructor(e){super(e),this.numTokens=e.numTokens,this.outputMode=e.outputMode?e.outputMode:"multiHot"}getConfig(){const e={numTokens:this.numTokens,outputMode:this.outputMode},s=super.getConfig();return Object.assign(e,s),e}computeOutputShape(e){return null==(e=at(e))?[this.numTokens]:"oneHot"===this.outputMode&&1!==e[e.length-1]?(e.push(this.numTokens),e):(e[e.length-1]=this.numTokens,e)}call(e,s){return z(()=>{let r;if("int32"!==(e=Le(e)).dtype&&(e=nr(e,"int32")),typeof s.countWeights<"u"){if("count"!==this.outputMode)throw new L(`countWeights is not used when outputMode !== count.\n              Received countWeights=${s.countWeights}`);r=Le(s.countWeights)}const o=ls(e),a=xi(e),i=Rn(this.numTokens,o).bufferSync().get(0),l=vr(a,0).bufferSync().get(0);if(!i||!l)throw new L(`Input values must be between 0 < values <= numTokens with numTokens=${this.numTokens}`);return function o3(n,t,e,s){let r=Le(n);if("int32"!==r.dtype&&(r=nr(r,"int32")),"int"===t)return r;const o=r.shape;if(0===r.rank&&(r=wn(r,-1)),"oneHot"===t&&1!==r.shape[r.shape.length-1]&&(r=wn(r,-1)),r.rank>2)throw new L(`When outputMode is not int, maximum output rank is 2 Received outputMode ${t} and input shape ${o} which would result in output rank ${r.rank}.`);const a=["multiHot","oneHot"].includes(t);let l;if(l=Jh(r,typeof s<"u"&&"count"===t?s:[],e,a),"tfIdf"!==t)return l;if(s)return D(l,s);throw new L("When outputMode is 'tfIdf', weights must be provided.")}(e,this.outputMode,this.numTokens,r)})}}return n.className="CategoryEncoding",n})();se(RS);const DS=new Set(["bilinear","nearest"]);let FS=(()=>{class n extends qe{constructor(e){if(super(e),this.height=e.height,this.width=e.width,e.interpolation){if(!DS.has(e.interpolation))throw new L(`Invalid interpolation parameter: ${e.interpolation} is not implemented`);this.interpolation=e.interpolation}else this.interpolation="bilinear";this.cropToAspectRatio=!!e.cropToAspectRatio}computeOutputShape(e){return e=at(e),[this.height,this.width,e[2]]}getConfig(){const e={height:this.height,width:this.width,interpolation:this.interpolation,cropToAspectRatio:this.cropToAspectRatio},s=super.getConfig();return Object.assign(e,s),e}call(e,s){return z(()=>{const r=[this.height,this.width];if("bilinear"===this.interpolation)return ds.resizeBilinear(e,r,!this.cropToAspectRatio);if("nearest"===this.interpolation)return ds.resizeNearestNeighbor(e,r,!this.cropToAspectRatio);throw new Error(`Interpolation is ${this.interpolation} but only ${[...DS]} are supported`)})}}return n.className="Resizing",n})();se(FS);let i3=(()=>{class n{constructor(e){this.seed=e}next(){if(void 0!==this.seed)return this.seed++}}return n.className="RandomSeed",n})(),l3=(()=>{class n extends qe{constructor(e){super(e),this.randomGenerator=new i3(e.seed)}getConfig(){const e={seed:this.randomGenerator.seed},s=super.getConfig();return Object.assign(e,s),e}}return n.className="BaseRandomLayer",n})();const OS=new Set(["bilinear","nearest"]);let LS=(()=>{class n extends l3{constructor(e){super(e);const{factor:s,interpolation:r="bilinear"}=e;if(this.factor=s,Array.isArray(this.factor)&&2===this.factor.length)this.widthLower=this.factor[0],this.widthUpper=this.factor[1];else{if(Array.isArray(this.factor)||!(this.factor>0))throw new L(`Invalid factor: ${this.factor}. Must be positive number or tuple of 2 numbers`);this.widthLower=-this.factor,this.widthUpper=this.factor}if(this.widthLower<-1||this.widthUpper<-1)throw new L(`factor must have values larger than -1. Got: ${this.factor}`);if(this.widthUpper<this.widthLower)throw new L(`factor cannot have upper bound less than lower bound.\n        Got upper bound: ${this.widthUpper}.\n        Got lower bound: ${this.widthLower}\n      `);if(r){if(!OS.has(r))throw new L(`Invalid interpolation parameter: ${r} is not implemented`);this.interpolation=r}}getConfig(){const e={factor:this.factor,interpolation:this.interpolation},s=super.getConfig();return Object.assign(e,s),e}computeOutputShape(e){return e=at(e),[this.imgHeight,-1,e[2]]}call(e,s){return z(()=>{const r=Le(e);this.imgHeight=r.shape[r.shape.length-3];const o=r.shape[r.shape.length-2];this.widthFactor=jr([1],1+this.widthLower,1+this.widthUpper,"float32",this.randomGenerator.next());let a=this.widthFactor.dataSync()[0]*o;a=Math.round(a);const i=[this.imgHeight,a];switch(this.interpolation){case"bilinear":return ds.resizeBilinear(e,i);case"nearest":return ds.resizeNearestNeighbor(e,i);default:throw new Error(`Interpolation is ${this.interpolation}\n          but only ${[...OS]} are supported`)}})}}return n.className="RandomWidth",n})();function c3(n){return new Vu(n)}function h3(n){return new _1(n)}function d3(n){return new T1(n)}function p3(n){return new $1(n)}function f3(n){return new E1(n)}function m3(n){return new R1(n)}function g3(n){return new A1(n)}function y3(n){return new z1(n)}function x3(n){return new _y(n)}function b3(n){return new L1(n)}function w3(n){return new Ay(n)}function v3(n){return new P1(n)}function S3(n){return new M1(n)}function C3(n){return new B1(n)}function N3(n){return new V1(n)}function I3(n){return new W1(n)}function k3(n){return new Q1(n)}function T3(n){return new Z1(n)}function $3(n){return new Ly(n)}function E3(n){return new X1(n)}function _3(n){return new Y1(n)}function A3(n){return new J1(n)}function R3(n){return new eS(n)}function D3(n){return new tS(n)}function F3(n){return new sS(n)}function O3(n){return new Jd(n)}function L3(n){return new tp(n)}function P3(n){return new rp(n)}function M3(n){return new np(n)}function z3(n){return new sp(n)}function B3(n){return new ep(n)}function V3(n){return new rS(n)}function W3(n){return new lS(n)}function U3(n){return new uS(n)}function G3(n){return new cS(n)}function Py(n){return new fS(n)}function H3(n){return Py(n)}function j3(n){return Py(n)}function My(n){return new yS(n)}function K3(n){return My(n)}function q3(n){return My(n)}function zy(n){return new wS(n)}function X3(n){return zy(n)}function Z3(n){return zy(n)}function Y3(n){return new SS(n)}function Q3(n){return new IS(n)}function PS(n){return new CS(n)}function MS(n){return new kS(n)}function zS(n){return new pS(n)}function BS(n){return new gS(n)}function J3(n){return new bS(n)}function eM(n){return new j1(n)}function tM(n){return new Dy(n)}function nM(n){return new K1(n)}function sM(n){return new Qd(n)}function rM(n){return new H1(n)}function oM(n){return new Ry(n)}function aM(n){return new q1(n)}function iM(n){return new Oy(n)}function lM(n){return new so(n)}function uM(n){return new Fy(n)}function cM(n){return new ES(n)}function hM(n){return new $S(n)}se(LS);const dM=PS,pM=MS,fM=zS,mM=BS;function gM(n){return new oS(n)}function yM(n){return new aS(n)}function xM(n){return new iS(n)}function bM(n){return new nS(n)}function wM(n){return new _S(n)}function vM(n){return new AS(n)}function SM(n){return new FS(n)}function CM(n){return new RS(n)}function NM(n){return new LS(n)}function IM(n,t){return cy(n,t)}function kM(n,t){return a1(n,t)}function TM(n,t){return i1(n,t)}function $M(n,t){return hy(n,t)}function EM(n,t){return dy(n,t)}function _M(n,t){return o1(n,t)}function AM(n,t){return function cP(n,t){return z(()=>{const e=r1(n,t),s=function lP(n,t){return z(()=>de(ve(ws(Zn(n,1),Zn(t,0))),"float32"))}(n,t),r=ne(e,s);return de(un(Rn(r,0),$e(e,r),0),"float32")})}(n,t)}function RM(n,t){return ly(n,t)}function DM(n,t){return Vd(n,t)}function FM(n,t){return _i(n,t)}function OM(n,t){return _i(n,t)}function LM(n,t){return _i(n,t)}function PM(n,t){return jo(n,t)}function MM(n,t){return jo(n,t)}function zM(n,t){return jo(n,t)}function BM(n){return new Zd(n)}function VM(n){return function GP(n){return Ty(n),new Zd({l1:null!=n?n.l1:null,l2:0})}(n)}function WM(n){return function HP(n){return Ty(n),new Zd({l2:null!=n?n.l2:null,l1:0})}(n)}class VS extends Ei{constructor(){super(...arguments),this.model=null}setModel(t){if(!(t instanceof eo))throw new Error("model must be a LayersModel, not some other Container");this.model=t}}function ap(n,t){return n<t}function WS(n,t){return n>t}class US extends VS{constructor(t){if(super(),null==t&&(t={}),t.restoreBestWeights)throw new Ue("restoreBestWeights = True is not implemented in EarlyStopping yet.");this.monitor=t.monitor||"val_loss",this.minDelta=Math.abs(t.minDelta||0),this.patience=t.patience||0,this.verbose=t.verbose||0,this.mode=t.mode||"auto",this.baseline=t.baseline,-1===["auto","min","max"].indexOf(this.mode)&&(console.warn(`EarlyStopping mode '${this.mode}' is invalid. Falling back to mode 'auto'.`),this.mode="auto"),this.monitorFunc="min"===this.mode?ap:"max"===this.mode||-1!==this.monitor.indexOf("acc")?WS:ap,this.monitorFunc===ap&&(this.minDelta*=-1)}onTrainBegin(t){var e=this;return(0,O.Z)(function*(){e.wait=0,e.stoppedEpoch=0,e.best=null!=e.baseline?e.baseline:e.monitorFunc===ap?1/0:-1/0})()}onEpochEnd(t,e){var s=this;return(0,O.Z)(function*(){yield Jr(e);const r=s.getMonitorValue(e);null!=r&&(s.monitorFunc(r-s.minDelta,s.best)?(s.best=r,s.wait=0):(s.wait++,s.wait>=s.patience&&(s.stoppedEpoch=t,s.model.stopTraining=!0)))})()}onTrainEnd(t){var e=this;return(0,O.Z)(function*(){e.stoppedEpoch>0&&e.verbose&&console.log(`Epoch ${e.stoppedEpoch}: early stopping.`)})()}getMonitorValue(t){null==t&&(t={});const e=t[this.monitor];return null==e&&console.warn(`Metric for EarlyStopping ${this.monitor} is not available. Available metrics are: ${Object.keys(t)}`),e}}const GM={earlyStopping:function UM(n){return new US(n)}};B().registerFlag("KEEP_INTERMEDIATE_TENSORS",()=>!1,n=>{n&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")});var GS,Ws=function(n){return n[n.DT_INVALID=0]="DT_INVALID",n[n.DT_FLOAT=1]="DT_FLOAT",n[n.DT_DOUBLE=2]="DT_DOUBLE",n[n.DT_INT32=3]="DT_INT32",n[n.DT_UINT8=4]="DT_UINT8",n[n.DT_INT16=5]="DT_INT16",n[n.DT_INT8=6]="DT_INT8",n[n.DT_STRING=7]="DT_STRING",n[n.DT_COMPLEX64=8]="DT_COMPLEX64",n[n.DT_INT64=9]="DT_INT64",n[n.DT_BOOL=10]="DT_BOOL",n[n.DT_QINT8=11]="DT_QINT8",n[n.DT_QUINT8=12]="DT_QUINT8",n[n.DT_QINT32=13]="DT_QINT32",n[n.DT_BFLOAT16=14]="DT_BFLOAT16",n[n.DT_QINT16=15]="DT_QINT16",n[n.DT_QUINT16=16]="DT_QUINT16",n[n.DT_UINT16=17]="DT_UINT16",n[n.DT_COMPLEX128=18]="DT_COMPLEX128",n[n.DT_HALF=19]="DT_HALF",n[n.DT_RESOURCE=20]="DT_RESOURCE",n[n.DT_VARIANT=21]="DT_VARIANT",n[n.DT_UINT32=22]="DT_UINT32",n[n.DT_UINT64=23]="DT_UINT64",n[n.DT_FLOAT_REF=101]="DT_FLOAT_REF",n[n.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",n[n.DT_INT32_REF=103]="DT_INT32_REF",n[n.DT_UINT8_REF=104]="DT_UINT8_REF",n[n.DT_INT16_REF=105]="DT_INT16_REF",n[n.DT_INT8_REF=106]="DT_INT8_REF",n[n.DT_STRING_REF=107]="DT_STRING_REF",n[n.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",n[n.DT_INT64_REF=109]="DT_INT64_REF",n[n.DT_BOOL_REF=110]="DT_BOOL_REF",n[n.DT_QINT8_REF=111]="DT_QINT8_REF",n[n.DT_QUINT8_REF=112]="DT_QUINT8_REF",n[n.DT_QINT32_REF=113]="DT_QINT32_REF",n[n.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",n[n.DT_QINT16_REF=115]="DT_QINT16_REF",n[n.DT_QUINT16_REF=116]="DT_QUINT16_REF",n[n.DT_UINT16_REF=117]="DT_UINT16_REF",n[n.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",n[n.DT_HALF_REF=119]="DT_HALF_REF",n[n.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",n[n.DT_VARIANT_REF=121]="DT_VARIANT_REF",n[n.DT_UINT32_REF=122]="DT_UINT32_REF",n[n.DT_UINT64_REF=123]="DT_UINT64_REF",n}(Ws||{});!function(n){let t;var e;(e=t=n.CheckpointFormatVersion||(n.CheckpointFormatVersion={}))[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(GS||(GS={}));const By={};function HM(n,t){By[n]={tfOpName:n,category:"custom",inputs:[],attrs:[],customExecutor:t}}function HS(n){return By[n]}function jM(n){delete By[n]}function v(n,t,e,s,r){const o=t.inputParams[n];if(o&&void 0!==o.inputIndexStart){const i=o.inputIndexStart,l=0===o.inputIndexEnd?void 0:void 0===o.inputIndexEnd?i+1:o.inputIndexEnd,u=i<0?t.inputNames.length+i:i;if("tensor"===o.type)return Sn(t.inputNames[u],e,s,r);if("tensors"===o.type){const d=t.inputs.slice(i,l);return t.inputNames.slice(i,l).filter((f,g)=>{var m;return"NoOp"!==(null===(m=d[g])||void 0===m?void 0:m.op)}).map(f=>Sn(f,e,s,r))}const c=Sn(t.inputNames[u],e,s,r),h=c.dataSync();return"number"===o.type?h[0]:os(c.shape,h)}const a=t.attrParams[n];return a&&a.value}function Sn(n,t,e,s){const[r,o]=es(n,e);if(null!=s){const i=s.getHashTableHandleByName(r);if(null!=i)return i}const a=e.currentContextIds.find(i=>!!t[ip(r,i)]);return void 0!==a?t[ip(r,a)][o]:void 0}function jS(n,t,e){return t[ip(n,e.currentContextId)]}function Tr(n,t){const[e,s,r]=es(n,t);return[ip(e,t&&t.currentContextId),s,r]}function ip(n,t){return t?`${n}-${t}`:n}function es(n,t){if(""===n)return["",0,void 0];const e=null!=t&&null!=t.parseNodeNameCache;if(e){const o=t.parseNodeNameCache.get(n);if(null!=o)return o}const s=n.split(":");let r;if(1===s.length)r=[n,0,void 0];else{const a=3===s.length?s[1]:void 0;r=[s[0],Number(s[s.length-1]),a]}return e&&t.parseNodeNameCache.set(n,r),r}function lp(n,t,e){let s=v("pad",n,t,e);if("explicit"===s){s=v("explicitPaddings",n,t,e);const r=[[0,0],[0,0],[0,0],[0,0]];for(let o=0;o<4;o++)r[o][0]=s[2*o],r[o][1]=s[2*o+1];return r}return s}function $r(n){return n.kept?n:Zs(n)}const KM=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],qM=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsFinite",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsInf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],XM=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}],ZM=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}],YM=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniformInt",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number"},{tfName:"maxval",name:"maxval",type:"number"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}],QM=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],JM=[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}],ez=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}],tz=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"InitializeTable",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]},{tfOpName:"InitializeTableV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]}],nz=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}],sz=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BitwiseAnd",category:"logical",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}]}],rz=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"MatrixBandPart",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"numLower",type:"tensor"},{start:1,name:"numUpper",type:"tensor"}]}],oz=[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]}],az=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}],iz=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]},{tfOpName:"TensorScatterUpdate",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"values",type:"tensor"}]}],lz=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}],uz=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}],cz=[{tfOpName:"StaticRegexReplace",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"pattern",name:"pattern",type:"string"},{tfName:"rewrite",name:"rewrite",type:"string"},{tfName:"replace_global",name:"replaceGlobal",type:"bool"}]},{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}],hz=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"EnsureShape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];class KS{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[ut,oe,ee,_,ye,Oe,st,Xe,ht,Ft,Lt,Yt,Tt,$n,Pt,In,Dr,Up,Gp].map(s=>s.json));this.opMappers=e.reduce((s,r)=>(s[r.tfOpName]=r,s),{})}transformGraph(t,e={}){const r=[],o=[],a=[],i=t.node.reduce((g,m)=>(g[m.name]=this.mapNode(m),m.op.startsWith("Placeholder")?r.push(g[m.name]):"Const"===m.op?o.push(g[m.name]):(null==m.input||0===m.input.length)&&a.push(g[m.name]),g),{});let l=[];const u=[];let c={},h={};null!=e&&(c=this.mapSignatureEntries(e.inputs),h=this.mapSignatureEntries(e.outputs));const d=Object.keys(i);d.forEach(g=>{const m=i[g];m.inputNames.forEach((y,x)=>{const[b,,w]=Tr(y),S=i[b];if(null!=S.outputs){const N=S.outputs.indexOf(w);-1!==N&&(m.inputNames[x]=`${b}:${N}`)}m.inputs.push(S),S.children.push(m)})}),0===Object.keys(h).length?d.forEach(g=>{const m=i[g];0===m.children.length&&u.push(m)}):Object.keys(h).forEach(g=>{const[m]=Tr(g),y=i[m];null!=y&&(y.signatureKey=h[g],u.push(y))}),Object.keys(c).length>0?Object.keys(c).forEach(g=>{const[m]=Tr(g),y=i[m];y&&(y.signatureKey=c[g],l.push(y))}):l=r;let p={};null!=t.library&&null!=t.library.function&&(p=t.library.function.reduce((g,m)=>(g[m.signature.name]=this.mapFunction(m),g),{}));const f={nodes:i,inputs:l,outputs:u,weights:o,placeholders:r,signature:e,functions:p};return a.length>0&&(f.initNodes=a),f}mapSignatureEntries(t){return Object.keys(t||{}).reduce((e,s)=>(e[t[s].name]=s,e),{})}mapNode(t){const e=HS(t.op)||this.opMappers[t.op]||{};null==t.attr&&(t.attr={});const s={name:t.name,op:t.op,category:e.category,inputNames:(t.input||[]).map(r=>r.startsWith("^")?r.slice(1):r),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:t.attr,outputs:e.outputs};return null!=e.inputs&&(s.inputParams=e.inputs.reduce((r,o)=>(r[o.name]={type:o.type,inputIndexStart:o.start,inputIndexEnd:o.end},r),{})),null!=e.attrs&&(s.attrParams=e.attrs.reduce((r,o)=>{const a=o.type;let i;switch(o.type){case"string":i=Vy(t.attr,o.tfName,o.defaultValue),void 0===i&&o.tfDeprecatedName&&(i=Vy(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"string[]":i=Xy(t.attr,o.tfName,o.defaultValue),void 0===i&&o.tfDeprecatedName&&(i=Xy(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"number":i=Uy(t.attr,o.tfName,o.defaultValue||0),void 0===i&&o.tfDeprecatedName&&(i=Uy(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"number[]":i=qy(t.attr,o.tfName,o.defaultValue),void 0===i&&o.tfDeprecatedName&&(i=qy(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"bool":i=Wy(t.attr,o.tfName,o.defaultValue),void 0===i&&o.tfDeprecatedName&&(i=Wy(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"bool[]":i=Yy(t.attr,o.tfName,o.defaultValue),void 0===i&&o.tfDeprecatedName&&(i=Yy(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"shape":i=Ky(t.attr,o.tfName,o.defaultValue),void 0===i&&o.tfDeprecatedName&&(i=Ky(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"shape[]":i=Zy(t.attr,o.tfName,o.defaultValue),void 0===i&&o.tfDeprecatedName&&(i=Zy(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"dtype":i=Hy(t.attr,o.tfName,o.defaultValue),void 0===i&&o.tfDeprecatedName&&(i=Hy(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"dtype[]":i=jy(t.attr,o.tfName,o.defaultValue),void 0===i&&o.tfDeprecatedName&&(i=jy(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"func":i=XS(t.attr,o.tfName,o.defaultValue),void 0===i&&o.tfDeprecatedName&&(i=XS(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${o.type} for op: ${t.op}`)}return r[o.name]={value:i,type:a},r},{})),s}mapFunction(t){const e=t.nodeDef,r=[];let o={};null!=e&&(o=e.reduce((h,d)=>(h[d.name]=this.mapNode(d),"Const"===d.op&&r.push(h[d.name]),h),{}));const a=[],i=[];t.signature.inputArg.forEach(h=>{const[d]=Tr(h.name),p={name:d,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:Gy(h.type),type:"dtype"}},children:[]};p.signatureKey=h.name,a.push(p),o[d]=p}),Object.keys(o).forEach(h=>{const d=o[h];d.inputNames.forEach((p,f)=>{const[g,,m]=Tr(p),y=o[g];if(null!=y.outputs){const x=y.outputs.indexOf(m);-1!==x&&(d.inputNames[f]=`${g}:${x}`)}d.inputs.push(y),y.children.push(d)})});const u=t.ret;t.signature.outputArg.forEach(h=>{const[d,p]=Tr(u[h.name]),f=o[d];null!=f&&(f.defaultOutput=p,i.push(f))});const c=this.mapArgsToSignature(t);return{nodes:o,inputs:a,outputs:i,weights:r,placeholders:[],signature:c}}mapArgsToSignature(t){return{methodName:t.signature.name,inputs:t.signature.inputArg.reduce((e,s)=>(e[s.name]=this.mapArgToTensorInfo(s),e),{}),outputs:t.signature.outputArg.reduce((e,s)=>(e[s.name]=this.mapArgToTensorInfo(s,t.ret),e),{})}}mapArgToTensorInfo(t,e){let s=t.name;return null!=e&&(s=e[s]),{name:s,dtype:t.type}}}function qS(n,t){const e=Array.isArray(n)?String.fromCharCode.apply(null,n):function dz(n){const t=B().global;if(typeof t.atob<"u")return t.atob(n);if(typeof Buffer<"u")return new Buffer(n,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(n);return t?e:e.toLowerCase()}function Vy(n,t,e,s=!1){const r=n[t];return null!=r?qS(r.s,s):e}function Wy(n,t,e){const s=n[t];return s?s.b:e}function Uy(n,t,e){const s=n[t]||{},r=null!=s.i?s.i:null!=s.f?s.f:e;return"number"==typeof r?r:parseInt(r,10)}function Gy(n){switch("string"==typeof n&&(n=Ws[n]),n){case Ws.DT_FLOAT:case Ws.DT_HALF:return"float32";case Ws.DT_INT32:case Ws.DT_INT64:case Ws.DT_INT8:case Ws.DT_UINT8:return"int32";case Ws.DT_BOOL:return"bool";case Ws.DT_DOUBLE:return"float32";case Ws.DT_STRING:return"string";default:return null}}function XS(n,t,e){const s=n[t];return s&&s.func?s.func.name:e}function Hy(n,t,e){const s=n[t];return s&&s.type?Gy(s.type):e}function jy(n,t,e){const s=n[t];return s&&s.list&&s.list.type?s.list.type.map(r=>Gy(r)):e}function ZS(n){if(!n.unknownRank)return null!=n.dim?n.dim.map(t=>"number"==typeof t.size?t.size:parseInt(t.size,10)):[]}function Ky(n,t,e){const s=n[t];return s&&s.shape?ZS(s.shape):e}function qy(n,t,e){const s=n[t];return s?((s.list.f&&s.list.f.length?s.list.f:s.list.i)||[]).map(r=>"number"==typeof r?r:parseInt(r,10)):e}function Xy(n,t,e,s=!1){const r=n[t];return r&&r.list&&r.list.s?r.list.s.map(o=>qS(o,s)):e}function Zy(n,t,e){const s=n[t];return s&&s.list&&s.list.shape?s.list.shape.map(r=>ZS(r)):e}function Yy(n,t,e){const s=n[t];return s&&s.list&&s.list.b?s.list.b:e}class pz{constructor(t,e,s){this.node=t,this.tensorMap=e,this.context=s,this.inputs=[],this.attrs={},this.inputs=t.inputNames.map(r=>this.getInput(r)),null!=t.rawAttrs&&(this.attrs=Object.keys(t.rawAttrs).reduce((r,o)=>(r[o]=this.getAttr(o),r),{}))}getInput(t){return Sn(t,this.tensorMap,this.context)}getAttr(t,e){const s=this.node.rawAttrs[t];if(null!=s.tensor)return Sn(t,this.tensorMap,this.context);if(null!=s.i||null!=s.f)return Uy(this.node.rawAttrs,t,e);if(null!=s.s)return Vy(this.node.rawAttrs,t,e);if(null!=s.b)return Wy(this.node.rawAttrs,t,e);if(null!=s.shape)return Ky(this.node.rawAttrs,t,e);if(null!=s.type)return Hy(this.node.rawAttrs,t,e);if(null!=s.list){if(null!=s.list.i||null!=s.list.f)return qy(this.node.rawAttrs,t,e);if(null!=s.list.s)return Xy(this.node.rawAttrs,t,e);if(null!=s.list.shape)return Zy(this.node.rawAttrs,t,e);if(null!=s.list.b)return Yy(this.node.rawAttrs,t,e);if(null!=s.list.type)return jy(this.node.rawAttrs,t,e)}return e}}function Ns(n,t,e=""){if("number"!=typeof n&&"number"!=typeof t){C(n.length===t.length,()=>e+` Shapes ${n} and ${t} must match`);for(let s=0;s<n.length;s++){const r=n[s],o=t[s];C(r<0||o<0||r===o,()=>e+` Shapes ${n} and ${t} must match`)}}}function YS(n){return!("number"==typeof n||n.some(t=>t<0))}function Zu(n,t,e){let s=Qy(n,e);const r=!YS(s);if(r&&0===t.length)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${s}`);if(r&&t.forEach(o=>{s=Qy(o.shape,s)}),!YS(s))throw new Error(`Non-fully-defined elementShape: ${s}`);return s}function Qy(n,t){if("number"==typeof n)return t;if("number"==typeof t)return n;if(n.length!==t.length)throw new Error(`Incompatible ranks during merge: ${n} vs. ${t}`);const e=[];for(let s=0;s<n.length;++s){const r=n[s],o=t[s];if(r>=0&&o>=0&&r!==o)throw new Error(`Incompatible shape during merge: ${n} vs. ${t}`);e[s]=r>=0?r:o}return e}class gz{constructor(t,e,s,r,o,a,i){this.name=t,this.dtype=e,this.maxSize=s,this.elementShape=r,this.identicalElementShapes=o,this.dynamicSize=a,this.clearAfterRead=i,this.tensors=[],this.closed_=!1,this.idTensor=_e(0),en(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(t){this.tensors.forEach(e=>{(null==t||!t.has(e.tensor.id))&&e.tensor.dispose()}),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||t>=this.size())throw new Error(`Tried to read from index ${t}, but array size is: ${this.size()}`);const e=this.tensors[t];if(e.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${t} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(e.cleared=!0),e.read=!0,e.tensor}readMany(t){return t.map(e=>this.read(e))}write(t,e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||!this.dynamicSize&&t>=this.maxSize)throw new Error(`Tried to write to index ${t}, but array is not resizeable and size is: ${this.maxSize}`);const s=this.tensors[t]||{};if(e.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t},\n          because the value dtype is ${e.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0===this.size()&&(null==this.elementShape||0===this.elementShape.length)&&(this.elementShape=e.shape),Ns(this.elementShape,e.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${t}.`),s.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been read.`);if(s.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been written.`);s.tensor=e,en(e),s.written=!0,this.tensors[t]=s}writeMany(t,e){if(t.length!==e.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${t.length} is not the same as tensors size: ${e.length}.`);t.forEach((s,r)=>this.write(s,e[r]))}gather(t,e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${e}`);if(t)t=t.slice(0,this.size());else{t=[];for(let r=0;r<this.size();r++)t.push(r)}if(0===t.length)return Xn([],[0].concat(this.elementShape));const s=this.readMany(t);return Ns(this.elementShape,s[0].shape,"TensorArray shape mismatch: "),Dn(s,0)}concat(t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${t}`);if(0===this.size())return Xn([],[0].concat(this.elementShape));const e=[];for(let r=0;r<this.size();r++)e.push(r);const s=this.readMany(e);return Ns(this.elementShape,s[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${s[0].shape})`),Mt(s,0)}scatter(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const s=Math.max(...t);if(!this.dynamicSize&&s>=this.maxSize)throw new Error(`Max index must be < array size (${s}  vs. ${this.maxSize})`);this.writeMany(t,hs(e,0))}split(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);let s=0;const r=t.map(l=>(s+=l,s));if(s!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${s}, and tensor's shape is: ${e.shape}`);if(!this.dynamicSize&&t.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${t.length}), and the TensorArray is not marked as dynamically resizeable`);const o=0===s?0:e.size/s,a=[];z(()=>{e=F(e,[1,s,o]);for(let l=0;l<t.length;++l)a[l]=F(et(e,[0,0===l?0:r[l-1],0],[1,t[l],o]),this.elementShape);return a});const i=[];for(let l=0;l<t.length;l++)i[l]=l;this.writeMany(i,a)}}class qo{get id(){return this.idTensor.id}constructor(t,e,s,r=-1){this.tensors=t,this.elementShape=e,this.elementDtype=s,t?.forEach(o=>{if(s!==o.dtype)throw new Error(`Invalid data types; op elements ${s}, but list elements ${o.dtype}`);Ns(e,o.shape,"TensorList shape mismatch: "),en(o)}),this.idTensor=_e(0),this.maxNumElements=r,en(this.idTensor)}copy(){return new qo([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(t){this.tensors.forEach(e=>{(null==t||!t.has(e.id))&&e.dispose()}),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(t,e,s=-1){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);if(-1!==s&&this.tensors.length!==s)throw new Error(`Operation expected a list with ${s} elements but got a list with ${this.tensors.length} elements.`);Ns(t,this.elementShape,"TensorList shape mismatch: ");const r=Zu(this.elementShape,this.tensors,t);return z(()=>{const o=this.tensors.map(a=>F(a,r));return Dn(o,0)})}popBack(t,e){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const s=Zu(this.elementShape,this.tensors,t),r=this.tensors.pop();return r.kept=!1,Ns(r.shape,t,"TensorList shape mismatch: "),F(r,s)}pushBack(t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(Ns(t.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");en(t),this.tensors.push(t)}resize(t){if(t<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${t}`);if(-1!==this.maxNumElements&&t>this.maxNumElements)throw new Error(`TensorListResize input size ${t} is greater maxNumElement ${this.maxNumElements}.`);const e=new qo([],this.elementShape,this.elementDtype,this.maxNumElements);e.tensors.length=t;for(let s=0;s<Math.min(this.tensors.length,t);++s)e.tensors[s]=this.tensors[s];return e}getItem(t,e,s){if(s!==this.elementDtype)throw new Error(`Invalid data types; op elements ${s}, but list elements ${this.elementDtype}`);if(t<0||t>this.tensors.length)throw new Error(`Trying to access element ${t} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[t])throw new Error(`element at index ${t} is null.`);Ns(this.tensors[t].shape,e,"TensorList shape mismatch: ");const r=Zu(this.elementShape,this.tensors,e);return F(this.tensors[t],r)}setItem(t,e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(t<0||-1!==this.maxNumElements&&t>=this.maxNumElements)throw new Error(`Trying to set element ${t} in a list with max ${this.maxNumElements} elements.`);Ns(this.elementShape,e.shape,"TensorList shape mismatch: "),en(e),null!=this.tensors[t]&&(this.tensors[t].kept=!1),this.tensors[t]=e}gather(t,e,s){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);Ns(this.elementShape,s,"TensorList shape mismatch: "),t=t.slice(0,this.size());const r=Zu(this.elementShape,this.tensors,s);return 0===t.length?Xn([],[0].concat(r)):z(()=>{const o=t.map(a=>F(this.tensors[a],r));return Dn(o,0)})}concat(t,e){if(t&&t!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${t}`);Ns(this.elementShape,e,"TensorList shape mismatch: ");const s=Zu(this.elementShape,this.tensors,e);return 0===this.size()?Xn([],[0].concat(s)):z(()=>{const r=this.tensors.map(o=>F(o,s));return Mt(r,0)})}}const vz=function(){var n=(0,O.Z)(function*(t,e,s){switch(t.op){case"If":case"StatelessIf":{const r=v("thenBranch",t,e,s),o=v("elseBranch",t,e,s),a=v("cond",t,e,s),i=v("args",t,e,s);return(yield a.data())[0]?s.functionMap[r].executeFunctionAsync(i,s.tensorArrayMap,s.tensorListMap):s.functionMap[o].executeFunctionAsync(i,s.tensorArrayMap,s.tensorListMap)}case"While":case"StatelessWhile":{const r=v("body",t,e,s),o=v("cond",t,e,s),a=v("args",t,e,s),i=yield s.functionMap[o].executeFunctionAsync(a,s.tensorArrayMap,s.tensorListMap),l=a.map(h=>h.id);let u=yield i[0].data();i.forEach(h=>{!h.kept&&-1===l.indexOf(h.id)&&h.dispose()});let c=a;for(;u[0];){const h=c;c=yield s.functionMap[r].executeFunctionAsync(c,s.tensorArrayMap,s.tensorListMap);const d=c.map(f=>f.id);h.forEach(f=>{!f.kept&&-1===l.indexOf(f.id)&&-1===d.indexOf(f.id)&&f.dispose()});const p=yield s.functionMap[o].executeFunctionAsync(c,s.tensorArrayMap,s.tensorListMap);u=yield p[0].data(),p.forEach(f=>{!f.kept&&-1===l.indexOf(f.id)&&-1===d.indexOf(f.id)&&f.dispose()})}return c}case"LoopCond":return[$r(v("pred",t,e,s))];case"Switch":{const r=v("pred",t,e,s);let o=v("data",t,e,s);return o.kept||(o=$r(o)),(yield r.data())[0]?[void 0,o]:[o,void 0]}case"Merge":{const r=t.inputNames.find(o=>void 0!==Sn(o,e,s));return r?[$r(Sn(r,e,s))]:void 0}case"Enter":{const r=v("frameName",t,e,s),o=v("tensor",t,e,s);return s.enterFrame(r),[$r(o)]}case"Exit":{const r=v("tensor",t,e,s);return s.exitFrame(),[$r(r)]}case"NextIteration":{const r=v("tensor",t,e,s);return s.nextIteration(),[$r(r)]}case"TensorArrayV3":{const r=v("size",t,e,s),o=v("dtype",t,e,s),a=v("elementShape",t,e,s),i=v("dynamicSize",t,e,s),l=v("clearAfterRead",t,e,s),u=v("identicalElementShapes",t,e,s),c=v("name",t,e,s),h=new gz(c,o,r,a,u,i,l);return s.addTensorArray(h),[h.idTensor,_e(1)]}case"TensorArrayWriteV3":{const r=v("tensorArrayId",t,e,s),o=v("index",t,e,s),a=v("tensor",t,e,s),i=s.getTensorArray(r.id);return i.write(o,a),[i.idTensor]}case"TensorArrayReadV3":{const r=v("tensorArrayId",t,e,s),o=v("index",t,e,s);return[s.getTensorArray(r.id).read(o)]}case"TensorArrayGatherV3":{const r=v("tensorArrayId",t,e,s),o=v("indices",t,e,s),a=v("dtype",t,e,s);return[s.getTensorArray(r.id).gather(o,a)]}case"TensorArrayScatterV3":{const r=v("tensorArrayId",t,e,s),o=v("indices",t,e,s),a=v("tensor",t,e,s),i=s.getTensorArray(r.id);return i.scatter(o,a),[i.idTensor]}case"TensorArrayConcatV3":{const r=v("tensorArrayId",t,e,s),o=s.getTensorArray(r.id),a=v("dtype",t,e,s);return[o.concat(a)]}case"TensorArraySplitV3":{const r=v("tensorArrayId",t,e,s),o=v("tensor",t,e,s),a=v("lengths",t,e,s),i=s.getTensorArray(r.id);return i.split(a,o),[i.idTensor]}case"TensorArraySizeV3":{const r=v("tensorArrayId",t,e,s);return[_e(s.getTensorArray(r.id).size(),"int32")]}case"TensorArrayCloseV3":{const r=v("tensorArrayId",t,e,s),o=s.getTensorArray(r.id);return o.clearAndClose(),[o.idTensor]}case"TensorListSetItem":{const r=v("tensorListId",t,e,s),o=v("index",t,e,s),a=v("tensor",t,e,s),i=s.getTensorList(r.id);return i.setItem(o,a),[i.idTensor]}case"TensorListGetItem":{const r=v("tensorListId",t,e,s),o=v("index",t,e,s),a=v("elementShape",t,e,s),i=v("elementDType",t,e,s);return[s.getTensorList(r.id).getItem(o,a,i)]}case"TensorListScatterV2":case"TensorListScatter":{const r=v("indices",t,e,s),l=function bz(n,t,e,s){if(t.length!==n.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${n.shape[0]}`);const r=Math.max(...t);if(null!=s&&-1!==s&&r>=s)throw new Error(`Max index must be < array size (${r}  vs. ${s})`);const o=new qo([],e,n.dtype,s),a=hs(n,0);return t.forEach((i,l)=>{o.setItem(i,a[l])}),o}(v("tensor",t,e,s),r,v("elementShape",t,e,s),v("numElements",t,e,s));return s.addTensorList(l),[l.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const r=v("elementShape",t,e,s),o=v("elementDType",t,e,s);let a;a="TensorListReserve"===t.op?"numElements":"maxNumElements";const i=v(a,t,e,s),u=function xz(n,t,e,s){return new qo([],n,t,s)}(r,o,0,"TensorListReserve"===t.op?-1:i);return s.addTensorList(u),[u.idTensor]}case"TensorListGather":{const r=v("tensorListId",t,e,s),o=v("indices",t,e,s),a=v("elementShape",t,e,s),i=v("elementDType",t,e,s);return[s.getTensorList(r.id).gather(o,i,a)]}case"TensorListStack":{const r=v("tensorListId",t,e,s),o=v("elementShape",t,e,s),a=v("elementDType",t,e,s),i=v("numElements",t,e,s);return[s.getTensorList(r.id).stack(o,a,i)]}case"TensorListFromTensor":{const i=function yz(n,t,e){const s=n.dtype;if(n.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${n.shape}`);if(n.dtype!==e)throw new Error(`Invalid data types; op elements ${n.dtype}, but list elements ${e}`);Ns(n.shape.slice(1),t,"TensorList shape mismatch: ");const o=hs(n);return new qo(o,t,s)}(v("tensor",t,e,s),v("elementShape",t,e,s),v("elementDType",t,e,s));return s.addTensorList(i),[i.idTensor]}case"TensorListConcat":case"TensorListConcatV2":{const r=v("tensorListId",t,e,s),o=s.getTensorList(r.id),a=v("dtype",t,e,s),i=v("elementShape",t,e,s);return[o.concat(a,i)]}case"TensorListPushBack":{const r=v("tensorListId",t,e,s),o=v("tensor",t,e,s),a=s.getTensorList(r.id);return a.pushBack(o),[a.idTensor]}case"TensorListPopBack":{const r=v("tensorListId",t,e,s),o=v("elementShape",t,e,s),a=v("elementDType",t,e,s);return[s.getTensorList(r.id).popBack(o,a)]}case"TensorListSplit":{const r=v("tensor",t,e,s),o=v("elementShape",t,e,s),i=function wz(n,t,e){let s=0;const r=t.map(c=>(s+=c,s));if(s!==n.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${s}, and tensor's shape is: ${n.shape}`);const a=Qy(n.shape.slice(1),e),i=0===s?0:n.size/s,l=z(()=>{const c=[];n=F(n,[1,s,i]);for(let h=0;h<t.length;++h)c[h]=F(et(n,[0,0===h?0:r[h-1],0],[1,t[h],i]),a);return n.dispose(),c}),u=new qo([],e,n.dtype,t.length);for(let c=0;c<l.length;c++)u.setItem(c,l[c]);return u}(r,v("lengths",t,e,s),o);return s.addTensorList(i),[i.idTensor]}case"TensorListLength":{const r=v("tensorListId",t,e,s);return[_e(s.getTensorList(r.id).size(),"int32")]}case"TensorListResize":{const r=v("tensorListId",t,e,s),o=v("size",t,e,s),i=s.getTensorList(r.id).resize(o);return s.addTensorList(i),[i.idTensor]}default:throw TypeError(`Node type ${t.op} is not implemented`)}});return function(e,s,r){return n.apply(this,arguments)}}();function QS(n,t,e){const[s,r]=v("fusedOps",n,t,e),o="biasadd"===s,a=!o,i="prelu"===r,l="fusedbatchnorm"===s,u=v("numArgs",n,t,e);if(o){if(i&&2!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&o&&1!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(l)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const c=v("strides",n,t,e),h=lp(n,t,e),d=v("dataFormat",n,t,e).toUpperCase(),p=v("dilations",n,t,e);let[f,g]=v("args",n,t,e);return a&&(g=f,f=void 0),{stride:c,pad:h,dataFormat:d,dilations:p,biasArg:f,preluArg:g,activationFunc:r,leakyreluAlpha:v("leakyreluAlpha",n,t,e)}}function Jy(n,t,e){return{boxes:v("boxes",n,t,e),scores:v("scores",n,t,e),maxOutputSize:v("maxOutputSize",n,t,e),iouThreshold:v("iouThreshold",n,t,e),scoreThreshold:v("scoreThreshold",n,t,e),softNmsSigma:v("softNmsSigma",n,t,e)}}const Nz=function(){var n=(0,O.Z)(function*(t,e,s,r,o=Qt){switch(t.op){case"NonMaxSuppressionV5":{const{boxes:a,scores:i,maxOutputSize:l,iouThreshold:u,scoreThreshold:c,softNmsSigma:h}=Jy(t,e,s),d=yield o.image.nonMaxSuppressionWithScoreAsync(a,i,l,u,c,h);return[d.selectedIndices,d.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:a,scores:i,maxOutputSize:l,iouThreshold:u,scoreThreshold:c}=Jy(t,e,s),h=v("padToMaxOutputSize",t,e,s),d=yield o.image.nonMaxSuppressionPaddedAsync(a,i,l,u,c,h);return[d.selectedIndices,d.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:a,scores:i,maxOutputSize:l,iouThreshold:u,scoreThreshold:c}=Jy(t,e,s);return[yield o.image.nonMaxSuppressionAsync(a,i,l,u,c)]}case"Where":{const a=o.cast(v("condition",t,e,s),"bool"),i=[yield o.whereAsync(a)];return a.dispose(),i}case"ListDiff":return o.setdiff1dAsync(v("x",t,e,s),v("y",t,e,s));default:throw TypeError(`Node type ${t.op} is not implemented`)}});return function(e,s,r,o){return n.apply(this,arguments)}}();class Tz{get id(){return this.handle.id}constructor(t,e){this.keyDType=t,this.valueDType=e,this.handle=_e(0),this.tensorMap=new Map,en(this.handle)}clearAndClose(){this.tensorMap.forEach(t=>t.dispose()),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return _e(this.size(),"int32")}import(t,e){var s=this;return(0,O.Z)(function*(){s.checkKeyAndValueTensor(t,e);const r=yield t.data();return s.tensorMap.forEach(o=>o.dispose()),s.tensorMap.clear(),z(()=>{const o=hs(e),a=r.length,i=o.length;C(a===i,()=>`The number of elements doesn't match, keys has ${a} elements, the values has ${i} elements.`);for(let l=0;l<a;l++){const u=r[l],c=o[l];en(c),s.tensorMap.set(u,c)}return s.handle})})()}find(t,e){var s=this;return(0,O.Z)(function*(){s.checkKeyAndValueTensor(t,e);const r=yield t.data();return z(()=>{const o=[];for(let a=0;a<r.length;a++){const l=s.findWithDefault(r[a],e);o.push(l)}return Dn(o)})})()}findWithDefault(t,e){return this.tensorMap.get(t)??e}checkKeyAndValueTensor(t,e){if(t.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${t.dtype}`);if(e.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${e.dtype}`)}}const $z=function(){var n=(0,O.Z)(function*(t,e,s,r){switch(t.op){case"HashTable":case"HashTableV2":{const o=r.getHashTableHandleByName(t.name);if(null!=o)return[o];{const a=v("keyDType",t,e,s),i=v("valueDType",t,e,s),l=new Tz(a,i);return r.addHashTable(t.name,l),[l.handle]}}case"InitializeTable":case"InitializeTableV2":case"LookupTableImport":case"LookupTableImportV2":{const o=v("tableHandle",t,e,s,r),a=v("keys",t,e,s),i=v("values",t,e,s);return[yield r.getHashTableById(o.id).import(a,i)]}case"LookupTableFind":case"LookupTableFindV2":{const o=v("tableHandle",t,e,s,r),a=v("keys",t,e,s),i=v("defaultValue",t,e,s);return[yield r.getHashTableById(o.id).find(a,i)]}case"LookupTableSize":case"LookupTableSizeV2":{const o=v("tableHandle",t,e,s,r);return[r.getHashTableById(o.id).tensorSize()]}default:throw TypeError(`Node type ${t.op} is not implemented`)}});return function(e,s,r,o){return n.apply(this,arguments)}}();function JS(n,t,e,s,r=z){const o=((a,i,l)=>{switch(a.category){case"arithmetic":return r(()=>((n,t,e,s=Qt)=>{switch(n.op){case"BiasAdd":case"AddV2":case"Add":return[s.add(v("a",n,t,e),v("b",n,t,e))];case"AddN":return[s.addN(v("tensors",n,t,e))];case"FloorMod":case"Mod":return[s.mod(v("a",n,t,e),v("b",n,t,e))];case"Mul":return[s.mul(v("a",n,t,e),v("b",n,t,e))];case"RealDiv":case"Div":return[s.div(v("a",n,t,e),v("b",n,t,e))];case"DivNoNan":return[s.divNoNan(v("a",n,t,e),v("b",n,t,e))];case"FloorDiv":return[s.floorDiv(v("a",n,t,e),v("b",n,t,e))];case"Sub":return[s.sub(v("a",n,t,e),v("b",n,t,e))];case"Minimum":return[s.minimum(v("a",n,t,e),v("b",n,t,e))];case"Maximum":return[s.maximum(v("a",n,t,e),v("b",n,t,e))];case"Pow":return[s.pow(v("a",n,t,e),v("b",n,t,e))];case"SquaredDifference":return[s.squaredDifference(v("a",n,t,e),v("b",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"basic_math":return r(()=>((n,t,e,s=Qt)=>{switch(n.op){case"Abs":case"ComplexAbs":return[s.abs(v("x",n,t,e))];case"Acos":return[s.acos(v("x",n,t,e))];case"Acosh":return[s.acosh(v("x",n,t,e))];case"Asin":return[s.asin(v("x",n,t,e))];case"Asinh":return[s.asinh(v("x",n,t,e))];case"Atan":return[s.atan(v("x",n,t,e))];case"Atan2":return[s.atan2(v("x",n,t,e),v("y",n,t,e))];case"Atanh":return[s.atanh(v("x",n,t,e))];case"Ceil":return[s.ceil(v("x",n,t,e))];case"Complex":return[s.complex(v("real",n,t,e),v("imag",n,t,e))];case"Cos":return[s.cos(v("x",n,t,e))];case"Cosh":return[s.cosh(v("x",n,t,e))];case"Elu":return[s.elu(v("x",n,t,e))];case"Erf":return[s.erf(v("x",n,t,e))];case"Exp":return[s.exp(v("x",n,t,e))];case"Expm1":return[s.expm1(v("x",n,t,e))];case"Floor":return[s.floor(v("x",n,t,e))];case"Log":return[s.log(v("x",n,t,e))];case"Log1p":return[s.log1p(v("x",n,t,e))];case"Imag":return[s.imag(v("x",n,t,e))];case"Neg":return[s.neg(v("x",n,t,e))];case"Reciprocal":return[s.reciprocal(v("x",n,t,e))];case"Real":return[s.real(v("x",n,t,e))];case"Relu":return[s.relu(v("x",n,t,e))];case"Round":return[s.round(v("x",n,t,e))];case"Selu":return[s.selu(v("x",n,t,e))];case"Sigmoid":return[s.sigmoid(v("x",n,t,e))];case"Sin":return[s.sin(v("x",n,t,e))];case"Sign":return[s.sign(v("x",n,t,e))];case"Sinh":return[s.sinh(v("x",n,t,e))];case"Softplus":return[s.softplus(v("x",n,t,e))];case"Sqrt":return[s.sqrt(v("x",n,t,e))];case"Square":return[s.square(v("x",n,t,e))];case"Tanh":return[s.tanh(v("x",n,t,e))];case"Tan":return[s.tan(v("x",n,t,e))];case"ClipByValue":return[s.clipByValue(v("x",n,t,e),v("clipValueMin",n,t,e),v("clipValueMax",n,t,e))];case"Relu6":return[s.relu6(v("x",n,t,e))];case"Rsqrt":return[s.rsqrt(Sn(n.inputNames[0],t,e))];case"LeakyRelu":return[s.leakyRelu(v("x",n,t,e),v("alpha",n,t,e))];case"Prelu":return[s.prelu(v("x",n,t,e),v("alpha",n,t,e))];case"IsNan":return[s.isNaN(Sn(n.inputNames[0],t,e))];case"IsInf":return[s.isInf(Sn(n.inputNames[0],t,e))];case"IsFinite":return[s.isFinite(Sn(n.inputNames[0],t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"control":return vz(a,i,l);case"convolution":return r(()=>((n,t,e,s=Qt)=>{switch(n.op){case"Conv1D":{const r=v("stride",n,t,e),o=v("pad",n,t,e),a=v("dataFormat",n,t,e).toUpperCase(),i=v("dilation",n,t,e);return[s.conv1d(v("x",n,t,e),v("filter",n,t,e),r,o,a,i)]}case"Conv2D":{const r=v("strides",n,t,e),o=lp(n,t,e),a=v("dataFormat",n,t,e).toUpperCase(),i=v("dilations",n,t,e);return[s.conv2d(v("x",n,t,e),v("filter",n,t,e),[r[1],r[2]],o,a,[i[1],i[2]])]}case"_FusedConv2D":{const{stride:r,pad:o,dataFormat:a,dilations:i,biasArg:l,preluArg:u,activationFunc:c,leakyreluAlpha:h}=QS(n,t,e);return[s.fused.conv2d({x:v("x",n,t,e),filter:v("filter",n,t,e),strides:[r[1],r[2]],pad:o,dataFormat:a,dilations:[i[1],i[2]],bias:l,activation:c,preluActivationWeights:u,leakyreluAlpha:h})]}case"FusedDepthwiseConv2dNative":{const{stride:r,pad:o,dataFormat:a,dilations:i,biasArg:l,preluArg:u,activationFunc:c,leakyreluAlpha:h}=QS(n,t,e);return[s.fused.depthwiseConv2d({x:v("x",n,t,e),filter:v("filter",n,t,e),strides:[r[1],r[2]],pad:o,dataFormat:a,dilations:[i[1],i[2]],bias:l,activation:c,preluActivationWeights:u,leakyreluAlpha:h})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const r=v("outputShape",n,t,e),o=v("strides",n,t,e),a=lp(n,t,e);return[s.conv2dTranspose(v("x",n,t,e),v("filter",n,t,e),r,[o[1],o[2]],a)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const r=v("strides",n,t,e),o=lp(n,t,e),a=v("dilations",n,t,e),i=v("dataFormat",n,t,e).toUpperCase();return[s.depthwiseConv2d(v("input",n,t,e),v("filter",n,t,e),[r[1],r[2]],o,i,[a[1],a[2]])]}case"Conv3D":{const r=v("strides",n,t,e),o=v("pad",n,t,e),a=v("dataFormat",n,t,e).toUpperCase(),i=v("dilations",n,t,e);return[s.conv3d(v("x",n,t,e),v("filter",n,t,e),[r[1],r[2],r[3]],o,a,[i[1],i[2],i[3]])]}case"AvgPool":{const r=v("strides",n,t,e),o=v("pad",n,t,e),a=v("kernelSize",n,t,e);return[s.avgPool(v("x",n,t,e),[a[1],a[2]],[r[1],r[2]],o)]}case"MaxPool":{const r=v("strides",n,t,e),o=v("pad",n,t,e),a=v("kernelSize",n,t,e);return[s.maxPool(v("x",n,t,e),[a[1],a[2]],[r[1],r[2]],o)]}case"MaxPoolWithArgmax":{const r=v("strides",n,t,e),o=v("pad",n,t,e),a=v("kernelSize",n,t,e),i=v("includeBatchInIndex",n,t,e),{result:l,indexes:u}=s.maxPoolWithArgmax(v("x",n,t,e),[a[1],a[2]],[r[1],r[2]],o,i);return[l,u]}case"AvgPool3D":{const r=v("strides",n,t,e),o=v("pad",n,t,e),a=v("kernelSize",n,t,e);return[s.avgPool3d(v("x",n,t,e),[a[1],a[2],a[3]],[r[1],r[2],r[3]],o)]}case"MaxPool3D":{const r=v("strides",n,t,e),o=v("pad",n,t,e),a=v("kernelSize",n,t,e);return[s.maxPool3d(v("x",n,t,e),[a[1],a[2],a[3]],[r[1],r[2],r[3]],o)]}case"Dilation2D":{const r=v("strides",n,t,e),o=v("pad",n,t,e),a=v("dilations",n,t,e),i=r[1],l=r[2],u=a[1],c=a[2];return[s.dilation2d(v("x",n,t,e),v("filter",n,t,e),[i,l],o,[u,c],"NHWC")]}default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"creation":return r(()=>((n,t,e,s=Qt)=>{switch(n.op){case"Fill":{const r=v("shape",n,t,e),o=v("dtype",n,t,e),a=v("value",n,t,e);return[s.fill(r,a,o)]}case"LinSpace":{const r=v("start",n,t,e),o=v("stop",n,t,e),a=v("num",n,t,e);return[s.linspace(r,o,a)]}case"Multinomial":{const r=v("logits",n,t,e),o=v("numSamples",n,t,e),a=v("seed",n,t,e);return[s.multinomial(r,o,a)]}case"OneHot":{const r=v("indices",n,t,e),o=v("depth",n,t,e),a=v("onValue",n,t,e),i=v("offValue",n,t,e),l=v("dtype",n,t,e);return[s.oneHot(r,o,a,i,l)]}case"Ones":return[s.ones(v("shape",n,t,e),v("dtype",n,t,e))];case"OnesLike":return[s.onesLike(v("x",n,t,e))];case"RandomStandardNormal":return[s.randomStandardNormal(v("shape",n,t,e),v("dtype",n,t,e),v("seed",n,t,e))];case"RandomUniform":return[s.randomUniform(v("shape",n,t,e),v("minval",n,t,e),v("maxval",n,t,e),v("dtype",n,t,e))];case"RandomUniformInt":return[s.randomUniformInt(v("shape",n,t,e),v("minval",n,t,e),v("maxval",n,t,e),v("seed",n,t,e))];case"Range":{const r=v("start",n,t,e),o=v("stop",n,t,e),a=v("step",n,t,e);return[s.range(r,o,a,v("dtype",n,t,e))]}case"TruncatedNormal":{const r=v("shape",n,t,e),o=v("mean",n,t,e),a=v("stdDev",n,t,e),i=v("seed",n,t,e);return[s.truncatedNormal(r,o,a,v("dtype",n,t,e),i)]}case"Zeros":return[s.zeros(v("shape",n,t,e),v("dtype",n,t,e))];case"ZerosLike":return[s.zerosLike(v("x",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"dynamic":return Nz(a,i,l);case"evaluation":return r(()=>((n,t,e,s=Qt)=>{switch(n.op){case"LowerBound":{const r=v("sortedSequence",n,t,e),o=v("values",n,t,e);return[s.lowerBound(r,o)]}case"TopKV2":{const r=v("x",n,t,e),o=v("k",n,t,e),a=v("sorted",n,t,e),i=s.topk(r,o,a);return[i.values,i.indices]}case"UpperBound":{const r=v("sortedSequence",n,t,e),o=v("values",n,t,e);return[s.upperBound(r,o)]}case"Unique":{const r=v("x",n,t,e),o=s.unique(r);return[o.values,o.indices]}case"UniqueV2":{const r=v("x",n,t,e),o=v("axis",n,t,e),a=s.unique(r,o);return[a.values,a.indices]}default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"image":return r(()=>((n,t,e,s=Qt)=>{switch(n.op){case"ResizeBilinear":{const r=v("images",n,t,e),o=v("size",n,t,e),a=v("alignCorners",n,t,e),i=v("halfPixelCenters",n,t,e);return[s.image.resizeBilinear(r,[o[0],o[1]],a,i)]}case"ResizeNearestNeighbor":{const r=v("images",n,t,e),o=v("size",n,t,e),a=v("alignCorners",n,t,e),i=v("halfPixelCenters",n,t,e);return[s.image.resizeNearestNeighbor(r,[o[0],o[1]],a,i)]}case"CropAndResize":{const r=v("image",n,t,e),o=v("boxes",n,t,e),a=v("boxInd",n,t,e),i=v("cropSize",n,t,e),l=v("method",n,t,e),u=v("extrapolationValue",n,t,e);return[s.image.cropAndResize(r,o,a,i,l,u)]}case"ImageProjectiveTransformV3":{const r=v("images",n,t,e),o=v("transforms",n,t,e),a=v("outputShape",n,t,e),i=v("fillValue",n,t,e),l=v("interpolation",n,t,e),u=v("fillMode",n,t,e);return[s.image.transform(r,o,l.toLowerCase(),u.toLowerCase(),i,a)]}default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"graph":return r(()=>((n,t,e,s=Qt)=>{switch(n.op){case"Const":return t[n.name];case"PlaceholderWithDefault":const r=v("default",n,t,e);return[Sn(n.name,t,e)||r];case"Placeholder":return[Sn(n.name,t,e)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":case"Snapshot":return[$r(v("x",n,t,e))];case"IdentityN":return v("x",n,t,e).map(c=>$r(c));case"Shape":return[s.tensor1d(v("x",n,t,e).shape,"int32")];case"ShapeN":return v("x",n,t,e).map(c=>s.tensor1d(c.shape));case"Size":return[s.scalar(v("x",n,t,e).size,"int32")];case"Rank":return[s.scalar(v("x",n,t,e).rank,"int32")];case"NoOp":return[s.scalar(1)];case"Print":const a=v("x",n,t,e),i=v("data",n,t,e),l=v("message",n,t,e),u=v("summarize",n,t,e);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(l);for(let c=0;c<i.length;c++)console.log(Array.prototype.slice.call(i[c].dataSync()).slice(0,u));return[a];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"logical":return r(()=>((n,t,e,s=Qt)=>{switch(n.op){case"Equal":return[s.equal(v("a",n,t,e),v("b",n,t,e))];case"NotEqual":return[s.notEqual(v("a",n,t,e),v("b",n,t,e))];case"Greater":return[s.greater(v("a",n,t,e),v("b",n,t,e))];case"GreaterEqual":return[s.greaterEqual(v("a",n,t,e),v("b",n,t,e))];case"Less":return[s.less(v("a",n,t,e),v("b",n,t,e))];case"LessEqual":return[s.lessEqual(v("a",n,t,e),v("b",n,t,e))];case"LogicalAnd":return[s.logicalAnd(v("a",n,t,e),v("b",n,t,e))];case"LogicalNot":return[s.logicalNot(v("a",n,t,e))];case"LogicalOr":return[s.logicalOr(v("a",n,t,e),v("b",n,t,e))];case"Select":case"SelectV2":return[s.where(v("condition",n,t,e),v("a",n,t,e),v("b",n,t,e))];case"BitwiseAnd":return[s.bitwiseAnd(v("a",n,t,e),v("b",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"matrices":return r(()=>((n,t,e,s=Qt)=>{switch(n.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[s.matMul(v("a",n,t,e),v("b",n,t,e),v("transposeA",n,t,e),v("transposeB",n,t,e))];case"Einsum":return[s.einsum(v("equation",n,t,e),...v("tensors",n,t,e))];case"Transpose":return[s.transpose(v("x",n,t,e),v("perm",n,t,e))];case"_FusedMatMul":const[r,o]=v("fusedOps",n,t,e),a="biasadd"===r,i="prelu"===o,l=v("numArgs",n,t,e),u=v("leakyreluAlpha",n,t,e);if(a){if(i&&2!==l)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==l)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[c,h]=v("args",n,t,e);return[s.fused.matMul({a:v("a",n,t,e),b:v("b",n,t,e),transposeA:v("transposeA",n,t,e),transposeB:v("transposeB",n,t,e),bias:c,activation:o,preluActivationWeights:h,leakyreluAlpha:u})];case"MatrixBandPart":return[s.linalg.bandPart(v("a",n,t,e),v("numLower",n,t,e),v("numUpper",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"normalization":return r(()=>((n,t,e,s=Qt)=>{switch(n.op){case"EuclideanNorm":return[s.euclideanNorm(v("x",n,t,e),v("axis",n,t,e),v("keepDims",n,t,e))];case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[s.batchNorm(v("x",n,t,e),v("mean",n,t,e),v("variance",n,t,e),v("offset",n,t,e),v("scale",n,t,e),v("epsilon",n,t,e))];case"LRN":return[s.localResponseNormalization(v("x",n,t,e),v("radius",n,t,e),v("bias",n,t,e),v("alpha",n,t,e),v("beta",n,t,e))];case"Softmax":return[s.softmax(v("x",n,t,e))];case"LogSoftmax":return[s.logSoftmax(v("x",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"ragged":return r(()=>((n,t,e,s=Qt)=>{switch(n.op){case"RaggedGather":{const{outputNestedSplits:r,outputDenseValues:o}=s.raggedGather(v("paramsNestedSplits",n,t,e),v("paramsDenseValues",n,t,e),v("indices",n,t,e),v("outputRaggedRank",n,t,e));return r.concat(o)}case"RaggedRange":{const{rtNestedSplits:r,rtDenseValues:o}=s.raggedRange(v("starts",n,t,e),v("limits",n,t,e),v("splits",n,t,e));return[r,o]}case"RaggedTensorToTensor":return[s.raggedTensorToTensor(v("shape",n,t,e),v("values",n,t,e),v("defaultValue",n,t,e),v("rowPartitionTensors",n,t,e),v("rowPartitionTypes",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"reduction":return r(()=>((n,t,e,s=Qt)=>{switch(n.op){case"Max":{const i=v("axis",n,t,e),l=v("keepDims",n,t,e);return[s.max(v("x",n,t,e),i,l)]}case"Mean":{const i=v("axis",n,t,e),l=v("keepDims",n,t,e);return[s.mean(v("x",n,t,e),i,l)]}case"Min":{const i=v("axis",n,t,e),l=v("keepDims",n,t,e);return[s.min(v("x",n,t,e),i,l)]}case"Sum":{const i=v("axis",n,t,e),l=v("keepDims",n,t,e);return[s.sum(v("x",n,t,e),i,l)]}case"All":{const i=v("axis",n,t,e),l=v("keepDims",n,t,e);return[s.all(v("x",n,t,e),i,l)]}case"Any":{const i=v("axis",n,t,e),l=v("keepDims",n,t,e);return[s.any(v("x",n,t,e),i,l)]}case"ArgMax":{const i=v("axis",n,t,e);return[s.argMax(v("x",n,t,e),i)]}case"ArgMin":{const i=v("axis",n,t,e);return[s.argMin(v("x",n,t,e),i)]}case"Prod":{const i=v("axis",n,t,e),l=v("keepDims",n,t,e);return[s.prod(v("x",n,t,e),i,l)]}case"Cumprod":{const i=v("axis",n,t,e),l=v("exclusive",n,t,e),u=v("reverse",n,t,e);return[s.cumprod(v("x",n,t,e),i,l,u)]}case"Cumsum":{const i=v("axis",n,t,e),l=v("exclusive",n,t,e),u=v("reverse",n,t,e);return[s.cumsum(v("x",n,t,e),i,l,u)]}case"Bincount":const r=v("x",n,t,e),o=v("weights",n,t,e),a=v("size",n,t,e);return[s.bincount(r,o,a)];case"DenseBincount":{const i=v("x",n,t,e),l=v("weights",n,t,e),u=v("size",n,t,e),c=v("binaryOutput",n,t,e);return[s.denseBincount(i,l,u,c)]}default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"slice_join":return r(()=>((n,t,e,s=Qt)=>{switch(n.op){case"ConcatV2":case"Concat":{const r=v("n",n,t,e),o=v("axis",n,t,e);let a=v("tensors",n,t,e);return a=a.slice(0,r),[s.concat(a,o)]}case"Gather":{const r=v("x",n,t,e),o=v("indices",n,t,e);return[s.gather(r,s.cast(o,"int32"),0)]}case"GatherV2":{const r=v("axis",n,t,e),o=v("batchDims",n,t,e),a=v("x",n,t,e),i=v("indices",n,t,e);return[s.gather(a,s.cast(i,"int32"),r,o)]}case"Reverse":{const r=v("dims",n,t,e),o=[];for(let i=0;i<r.length;i++)r[i]&&o.push(i);const a=v("x",n,t,e);return[s.reverse(a,o)]}case"ReverseV2":{const r=v("axis",n,t,e),o=v("x",n,t,e);return[s.reverse(o,r)]}case"Slice":{const r=v("begin",n,t,e),o=v("size",n,t,e);return[s.slice(v("x",n,t,e),r,o)]}case"StridedSlice":{const r=v("begin",n,t,e),o=v("end",n,t,e),a=v("strides",n,t,e),i=v("beginMask",n,t,e),l=v("endMask",n,t,e),u=v("ellipsisMask",n,t,e),c=v("newAxisMask",n,t,e),h=v("shrinkAxisMask",n,t,e),d=v("x",n,t,e);return[s.stridedSlice(d,r,o,a,i,l,u,c,h)]}case"Pack":return z(()=>{const r=v("axis",n,t,e),o=v("tensors",n,t,e),a=o[0].shape,i=s.squeeze(o[0]).shape,l=o.map(u=>{const c=Ye(u.shape,a);if(!c&&!Ye(s.squeeze(u).shape,i))throw new Error("the input tensors shape does not match");return c?u:s.reshape(u,a)});return[s.stack(l,r)]});case"Unpack":{const r=v("axis",n,t,e),o=v("tensor",n,t,e);return s.unstack(o,r)}case"Tile":{const r=v("reps",n,t,e);return[s.tile(v("x",n,t,e),r)]}case"Split":case"SplitV":{const r=v("axis",n,t,e),o=v("numOrSizeSplits",n,t,e),a=v("x",n,t,e);return s.split(a,o,r)}case"ScatterNd":{const r=v("indices",n,t,e),o=v("values",n,t,e),a=v("shape",n,t,e);return[s.scatterND(r,o,a)]}case"GatherNd":{const r=v("x",n,t,e),o=v("indices",n,t,e);return[s.gatherND(r,o)]}case"SparseToDense":{const r=v("sparseIndices",n,t,e),o=v("outputShape",n,t,e),a=v("sparseValues",n,t,e),i=v("defaultValue",n,t,e);return[s.sparseToDense(r,a,o,a.dtype===i.dtype?i:s.cast(i,a.dtype))]}case"TensorScatterUpdate":{const r=v("indices",n,t,e),o=v("values",n,t,e),a=v("tensor",n,t,e);return[s.tensorScatterUpdate(a,r,o)]}default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"sparse":return r(()=>((n,t,e,s=Qt)=>{switch(n.op){case"SparseFillEmptyRows":{const{outputIndices:r,outputValues:o,emptyRowIndicator:a,reverseIndexMap:i}=s.sparse.sparseFillEmptyRows(v("indices",n,t,e),v("values",n,t,e),v("denseShape",n,t,e),v("defaultValue",n,t,e));return[r,o,a,i]}case"SparseReshape":{const{outputIndices:r,outputShape:o}=s.sparse.sparseReshape(v("inputIndices",n,t,e),v("inputShape",n,t,e),v("newShape",n,t,e));return[r,o]}case"SparseSegmentMean":return[s.sparse.sparseSegmentMean(v("data",n,t,e),v("indices",n,t,e),v("segmentIds",n,t,e))];case"SparseSegmentSum":return[s.sparse.sparseSegmentSum(v("data",n,t,e),v("indices",n,t,e),v("segmentIds",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"spectral":return r(()=>((n,t,e,s=Qt)=>{switch(n.op){case"FFT":return[s.fft(v("x",n,t,e))];case"IFFT":return[s.ifft(v("x",n,t,e))];case"RFFT":return[s.rfft(v("x",n,t,e))];case"IRFFT":return[s.irfft(v("x",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"string":return r(()=>((n,t,e,s=Qt)=>{switch(n.op){case"StaticRegexReplace":return[s.string.staticRegexReplace(v("input",n,t,e),v("pattern",n,t,e),v("rewrite",n,t,e),v("replaceGlobal",n,t,e))];case"StringNGrams":{const{nGrams:r,nGramsSplits:o}=s.string.stringNGrams(v("data",n,t,e),v("dataSplits",n,t,e),v("separator",n,t,e),v("nGramWidths",n,t,e),v("leftPad",n,t,e),v("rightPad",n,t,e),v("padWidth",n,t,e),v("preserveShortSequences",n,t,e));return[r,o]}case"StringSplit":{const{indices:r,values:o,shape:a}=s.string.stringSplit(v("input",n,t,e),v("delimiter",n,t,e),v("skipEmpty",n,t,e));return[r,o,a]}case"StringToHashBucketFast":return[s.string.stringToHashBucketFast(v("input",n,t,e),v("numBuckets",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"transformation":return r(()=>((n,t,e,s=Qt)=>{switch(n.op){case"Cast":return[s.cast(v("x",n,t,e),v("dtype",n,t,e))];case"ExpandDims":{const r=v("axis",n,t,e);return[s.expandDims(v("x",n,t,e),r)]}case"Squeeze":{const r=v("axis",n,t,e);return[s.squeeze(v("x",n,t,e),r)]}case"Reshape":return[s.reshape(v("x",n,t,e),v("shape",n,t,e))];case"EnsureShape":return[s.ensureShape(v("x",n,t,e),v("shape",n,t,e))];case"MirrorPad":return[s.mirrorPad(v("x",n,t,e),v("padding",n,t,e),v("mode",n,t,e))];case"PadV2":case"Pad":return[s.pad(v("x",n,t,e),v("padding",n,t,e),v("constantValue",n,t,e))];case"SpaceToBatchND":{const r=v("blockShape",n,t,e),o=v("paddings",n,t,e);return[s.spaceToBatchND(v("x",n,t,e),r,o)]}case"BatchToSpaceND":{const r=v("blockShape",n,t,e),o=v("crops",n,t,e);return[s.batchToSpaceND(v("x",n,t,e),r,o)]}case"DepthToSpace":{const r=v("blockSize",n,t,e),o=v("dataFormat",n,t,e).toUpperCase();return[s.depthToSpace(v("x",n,t,e),r,o)]}case"BroadcastTo":return[s.broadcastTo(v("x",n,t,e),v("shape",n,t,e))];case"BroadcastArgs":return[s.broadcastArgs(v("s0",n,t,e),v("s1",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"hash_table":return $z(a,i,l,s);case"custom":const u=HS(a.op);if(u&&u.customExecutor)return u.customExecutor(new pz(a,i,l));throw TypeError(`Custom op ${a.op} is not registered.`);default:throw TypeError(`Unknown op '${a.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(n,t,e);return hr(o)?o.then(a=>[].concat(a)):[].concat(o)}class eC{constructor(t={},e={},s={},r={},o){this.weightMap=t,this.tensorArrayMap=e,this.tensorListMap=s,this.functionMap=r,this.parseNodeNameCache=o,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(t,e){return{id:t,frameName:e,iterationId:0}}set currentContext(t){this.contexts!==t&&(this.contexts=t,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const t=[];for(let e=0;e<this.contexts.length-1;e++){const s=this.contexts.slice(0,this.contexts.length-e);t.push(this.contextIdforContexts(s))}t.push(""),this._currentContextIds=t}contextIdforContexts(t){return t?t.map(e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`).join("/"):""}enterFrame(t){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,t)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const t=Object.assign({},this.contexts[this.contexts.length-1]);t.iterationId+=1,t.id=this.lastId,this.contexts.splice(-1,1,t),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(t){return this.weightMap[t]}addTensorArray(t){this.tensorArrayMap[t.id]=t}getTensorArray(t){return this.tensorArrayMap[t]}addTensorList(t){this.tensorListMap[t.id]=t}getTensorList(t){return this.tensorListMap[t]}dispose(t){for(const e in this.tensorArrayMap)this.tensorArrayMap[e].clearAndClose(t);for(const e in this.tensorListMap)this.tensorListMap[e].clearAndClose(t)}}function tC(n,t,e,s){const r=new Set,o=[];let a=null,i=null;const l=new Set,u=new Set(Object.keys(n).map(d=>es(d)[0]));s=s||[];const c=new Set(s.map(d=>es(d.name)[0])),h=[...t];for(;h.length>0;){const d=h.pop();if((Xo(d)||Kz(d)||qz(d))&&null==a&&(a=d,i=a.children.map(p=>p.name).filter(p=>r.has(p))),r.add(d.name),null==e[d.name]&&!u.has(d.name)&&!c.has(d.name)){if(0===d.inputs.length){o.push(d.name);continue}d.inputs.forEach(p=>{l.has(p.name)||(l.add(p.name),h.push(p))})}}return{inputs:n,outputs:t,usedNodes:r,missingInputs:o,dynamicNode:a,syncInputs:i}}class up extends Error{constructor(t){super(`NodesExecutionOrderError: ${t}`)}}const Gz=new Set(["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"]),Hz=new Set(["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"]),jz=new Set(["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"]);function Xo(n){return Gz.has(n.op)}function Kz(n){return Hz.has(n.op)}function qz(n){return jz.has(n.op)}class cp{get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(t){const e=Object.keys(t).map(s=>t[s].map(r=>r.id));this._weightIds=[].concat(...e),this._weightMap=t}set resourceManager(t){this._resourceManager=t}get inputs(){return this._inputs.map(t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0}))}get outputs(){return this._outputs.map(t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0}))}get inputNodes(){return this._inputs.map(t=>t.signatureKey||t.name)}get outputNodes(){return this._outputs.map(t=>{const e=t.signatureKey||t.name;return t.defaultOutput?`${e}:${t.defaultOutput}`:e})}get functions(){return Object.keys(this._functions).reduce((t,e)=>(t[e]=this._functions[e].signature,t),{})}constructor(t,e){this.graph=t,this.parent=e,this.compiledMap=new Map,this.parseNodeNameCache=new Map,this._weightMap={},this.SEPARATOR=",",this._functions={},this._functionExecutorMap={},this.keepIntermediateTensors=!1,this._outputs=t.outputs,this._inputs=t.inputs,this._initNodes=t.initNodes,this._signature=t.signature,this._functions=t.functions,null!=t.functions&&Object.keys(t.functions).forEach(s=>{this._functionExecutorMap[s]=new cp(t.functions[s],this)})}getCompilationKey(t,e){const s=t.map(o=>o.name).sort(),r=e.map(o=>o.name).sort();return s.join(this.SEPARATOR)+"--"+r.join(this.SEPARATOR)}compile(t,e){const s=tC(t,e,this.weightMap,this._initNodes),{missingInputs:r,dynamicNode:o,syncInputs:a}=s;if(null!=o)throw new Error(`This execution contains the node '${o.name}', which has the dynamic op '${o.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${a}]`);if(r.length>0){const u=e.map(h=>h.name),c=Object.keys(t);throw new Error(`Cannot compute the outputs [${u}] from the provided inputs [${c}]. Missing the following inputs: [${r}]`)}const i=function Bz(n,t){const{usedNodes:e,inputs:s}=t,a=m=>e.has("string"==typeof m?m:m.name);function i(m){return[...new Map(m.map(y=>[y.name,y])).values()]}const l=i([...Object.keys(s).map(m=>es(m)[0]).map(m=>n.nodes[m]),...n.weights,...n.initNodes||[]]).filter(a),u=i([...l,...Object.values(n.nodes)]).filter(a),c=new Map(u.map(m=>[m.name,m])),h={};for(const m of u){h[m.name]=h[m.name]||0;for(const y of m.children)a(y)||(h[y.name]=Number.POSITIVE_INFINITY),h[y.name]=(h[y.name]||0)+1}const d=Object.entries(h).filter(([,m])=>0===m).map(([m])=>m),p=[...d];for(;d.length>0;){const m=d.pop(),y=c.get(m);for(const x of y.children.filter(a))0==--h[x.name]&&(p.push(x.name),d.push(x.name))}const g=function Vz(n,t){const e=new Map(n.map(a=>[a.name,a])),s=t.map(a=>a.name),r=new Set(s);for(;s.length>0;){const a=s.pop(),i=e.get(a);for(const l of i.children)!e.has(l.name)||r.has(l.name)||(r.add(l.name),s.push(l.name))}return n.filter(a=>r.has(a.name))}(p.map(m=>c.get(m)),l);return function Wz(n,t){const e=new Map(n.map((i,l)=>[i.name,l])),s=new Set(t.map(i=>i.name)),r=i=>s.has("string"==typeof i?i:i.name),o=new Set(n.map(i=>i.name)),a=i=>o.has("string"==typeof i?i:i.name);for(const i of n){for(const l of i.children.filter(a)){if(!e.has(l.name))throw new up(`Child ${l.name} of node ${i.name} is unreachable.`);if(e.get(i.name)>e.get(l.name))throw new up(`Node ${i.name} is scheduled to run after its child ${l.name}.`)}if(!r(i))for(const l of i.inputs){if(!e.has(l.name))throw new up(`Input ${l.name} of node ${i.name} is unreachable.`);if(e.get(l.name)>e.get(i.name))throw new up(`Node ${i.name} is scheduled to run before its input ${l.name}.`)}}}(g,l),g}(this.graph,s),l=function Uz(n){const t=new Map(n.map((i,l)=>[i.name,l])),e=Number.MAX_SAFE_INTEGER,s=n.map((i,l)=>Xo(i)?e:l),r=i=>s[t.get(i.name)]??-1,o=n.map((i,l)=>i.children.map(r).reduce((u,c)=>Math.max(u,c),s[l])),a=new Map;for(let i=0;i<n.length;++i){const l=o[i];if(l===e)continue;const u=n[i],c=n[l];a.has(c.name)||a.set(c.name,[]),a.get(c.name).push(u)}return a}(i);return{orderedNodes:i,nodeLiveUntilMap:l}}cloneAndKeepTensor(t){if(null==t)return null;const e=t.clone();return en(e),e}cloneTensorList(t){return t?t.map(s=>this.cloneAndKeepTensor(s)):null}cloneTensorMap(t){return Object.fromEntries(Object.entries(t).map(([e,s])=>[e,this.cloneTensorList(s)]))}execute(t,e){this.disposeIntermediateTensors(),t=this.mapInputs(t);const s=Object.keys(t).sort();this.checkInputs(t),this.checkInputShapeAndType(t),e=this.mapOutputs(e),this.checkOutputs(e);const r=s.map(d=>this.graph.nodes[es(d)[0]]),o=e.map(d=>es(d)[0]),a=new Set(o);let i=o.map(d=>this.graph.nodes[d]);0===i.length&&(i=this._outputs);const l=this.getCompilationKey(r,i);let u=this.compiledMap.get(l);null==u&&(u=this.compile(t,i),this.compiledMap.set(l,u));try{this.keepIntermediateTensors=B().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(d){this.keepIntermediateTensors=!1,console.warn(d.message)}const c={},h={};return z(()=>{const d=new eC(this.weightMap,c,h,this.functionExecutorMap,this.parseNodeNameCache),p=Object.assign({},this.weightMap);this.keepIntermediateTensors&&(this.clonedTensorsMap=this.cloneTensorMap(this.weightMap)),Object.keys(t).forEach(y=>{const[x,b]=es(y,d),w=[];w[b]=t[y],p[x]=w,this.keepIntermediateTensors&&(this.clonedTensorsMap[x]=this.cloneTensorList(w))});const f=this.getFrozenTensorIds(p),{orderedNodes:g,nodeLiveUntilMap:m}=u;for(const y of g){if(p[y.name])continue;const x=JS(y,p,d,this._resourceManager);if(hr(x))throw new Error(`The execution of the op '${y.op}' returned a promise. Please use model.executeAsync() instead.`);p[y.name]=x,this.keepIntermediateTensors&&(this.clonedTensorsMap[y.name]=this.cloneTensorList(x)),this.checkTensorForDisposalWithNodeLiveUntilInfo(y,p,d,f,a,m.get(y.name))}return null==this.parent&&d.dispose(f),e.map(y=>Sn(y,p,d))})}getFrozenTensorIds(t){const e=[].concat.apply([],Object.keys(t).map(s=>t[s]).map(s=>s.map(r=>r.id)));return new Set(e)}checkTensorForDisposal(t,e,s,r,o,a,i){if(!Xo(e)&&!a.has(t)){for(const l of s[t])null!=l&&(i[l.id]=(i[l.id]||0)+e.children.length);for(const l of e.inputs){if(Xo(l))continue;const u=jS(l.name,s,r);if(null!=u)for(const c of u){if(!c||c.kept||o.has(c.id))continue;const h=i[c.id];1===h?(c.dispose(),delete i[c.id]):null!=h&&i[c.id]--}}}}checkTensorForDisposalWithNodeLiveUntilInfo(t,e,s,r,o,a){function i(l){return Xo(l)||o.has(l.name)}if(!Xo(t)&&null!=a)for(const l of a){if(i(l))continue;const u=jS(l.name,e,s);for(const c of u)!c||c.kept||r.has(c.id)||c.dispose()}}executeAsync(t,e){var s=this;return(0,O.Z)(function*(){return s._executeAsync(t,e)})()}disposeIntermediateTensors(){this.clonedTensorsMap&&(Object.values(this.clonedTensorsMap).forEach(t=>{for(const e of t)e&&!e.isDisposed&&e.dispose()}),this.clonedTensorsMap=null)}getIntermediateTensors(){return this.clonedTensorsMap}_executeAsync(t,e,s=!1,r={},o={}){var a=this;return(0,O.Z)(function*(){a.disposeIntermediateTensors(),s||(t=a.mapInputs(t),a.checkInputs(t),a.checkInputShapeAndType(t),e=a.mapOutputs(e),a.checkOutputs(e));try{a.keepIntermediateTensors=B().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(p){a.keepIntermediateTensors=!1,console.warn(p.message)}const i=new eC(a.weightMap,r,o,a.functionExecutorMap,a.parseNodeNameCache);a.keepIntermediateTensors&&(a.clonedTensorsMap=a.cloneTensorMap(a.weightMap));const l=yield a.executeWithControlFlow(t,i,e,s),u=e.map(p=>Sn(p,l,i)),c=u.map(p=>p.id),h=Object.keys(t).map(p=>t[p].id),d=new Set([...c,...h,...a.weightIds]);return Object.values(l).forEach(p=>{p.forEach(f=>{f&&!f.isDisposed&&!d.has(f.id)&&f.dispose()})}),null==a.parent&&i.dispose(d),u})()}executeFunctionAsync(t,e,s){var r=this;return(0,O.Z)(function*(){const o=t.reduce((a,i,l)=>(a[r.inputs[l].name]=i,a),{});return r._executeAsync(o,r.outputNodes,!0,e,s)})()}executeWithControlFlow(t,e,s,r){var o=this;return(0,O.Z)(function*(){const a=Object.keys(t),i=a.map(S=>o.graph.nodes[es(S)[0]]),l=s.map(S=>es(S)[0]),u=new Set(l);let c=l.map(S=>o.graph.nodes[S]);0===c.length&&(c=o._outputs);const{usedNodes:h,missingInputs:d,dynamicNode:p,syncInputs:f}=tC(t,c,o.weightMap,o._initNodes),g=[...i,...o.graph.weights,...o._initNodes||[]].map(S=>({node:S,contexts:e.currentContext})),m=Object.assign({},o.weightMap);Object.keys(t).forEach(S=>{const[N,k]=es(S),T=[];T[k]=t[S],m[N]=T});const y={},x=o.getFrozenTensorIds(m),b={};for(;g.length>0;){const S=o.processStack(i,g,e,m,b,x,u,y,h);yield Promise.all(S)}null==p&&!r&&console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const w=c.filter(S=>!Xo(S)&&!Sn(S.name,m,e)).map(S=>S.name);if(w.length>0){let S="";throw null!=p&&(S=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${f}]`),new Error(`Cannot compute the outputs [${w}] from the provided inputs [${a}]. Consider providing the following inputs: [${d}]. ${S}`)}return m})()}processStack(t,e,s,r,o,a,i,l,u){const c=[];for(;e.length>0;){const h=e.pop();s.currentContext=h.contexts;let d="";if("Enter"===h.node.op&&v("isConstant",h.node,r,s)&&([d]=Tr(h.node.name,s)),null==r[h.node.name]){const p=JS(h.node,r,s,this._resourceManager);d||([d]=Tr(h.node.name,s));const f=s.currentContext;hr(p)?c.push(p.then(g=>(r[d]=g,this.keepIntermediateTensors&&(this.clonedTensorsMap[d]=this.cloneTensorList(g)),s.currentContext=f,this.checkTensorForDisposal(d,h.node,r,s,a,i,l),this.processChildNodes(h.node,e,s,r,o,u),g))):(r[d]=p,this.keepIntermediateTensors&&(this.clonedTensorsMap[d]=this.cloneTensorList(p)),this.checkTensorForDisposal(d,h.node,r,s,a,i,l),this.processChildNodes(h.node,e,s,r,o,u))}else this.processChildNodes(h.node,e,s,r,o,u)}return c}processChildNodes(t,e,s,r,o,a){t.children.forEach(i=>{const[l]=Tr(i.name,s);o[l]||!a.has(i.name)||("Merge"===i.op?i.inputNames.some(u=>!!Sn(u,r,s))&&(o[l]=!0,e.push({contexts:s.currentContext,node:i})):i.inputNames.every(u=>!!Sn(u,r,s))&&(o[l]=!0,e.push({contexts:s.currentContext,node:i})))})}dispose(){Object.keys(this.weightMap).forEach(t=>this.weightMap[t].forEach(e=>e.dispose()))}checkInputShapeAndType(t){Object.keys(t).forEach(e=>{const s=t[e],[r]=es(e),o=this.graph.nodes[r];if(o.attrParams.shape&&o.attrParams.shape.value){const a=o.attrParams.shape.value;C(a.length===s.shape.length&&s.shape.every((l,u)=>-1===a[u]||a[u]===l),()=>`The shape of dict['${o.name}'] provided in model.execute(dict) must be [${a}], but was [${s.shape}]`)}o.attrParams.dtype&&o.attrParams.dtype.value&&C(s.dtype===o.attrParams.dtype.value,()=>`The dtype of dict['${o.name}'] provided in model.execute(dict) must be ${o.attrParams.dtype.value}, but was ${s.dtype}`)})}mapInputs(t){var e,s;const r={};for(const o in t){const a=null===(s=null===(e=this._signature)||void 0===e?void 0:e.inputs)||void 0===s?void 0:s[o];null!=a?r[a.name]=t[o]:r[o]=t[o]}return r}checkInputs(t){const e=Object.keys(t).filter(s=>{const[r]=es(s);return null==this.graph.nodes[r]});if(e.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${e}] that are not part of graph`)}mapOutputs(t){return t.map(e=>{var s,r;const o=null===(r=null===(s=this._signature)||void 0===s?void 0:s.outputs)||void 0===r?void 0:r[e];return null!=o?o.name:e},{})}checkOutputs(t){t.forEach(e=>{const[s]=es(e);if(!this.graph.nodes[s])throw new Error(`The output '${e}' is not found in the graph`)})}}class Xz{constructor(t={},e={}){this.hashTableNameToHandle=t,this.hashTableMap=e}addHashTable(t,e){this.hashTableNameToHandle[t]=e.handle,this.hashTableMap[e.id]=e}getHashTableHandleByName(t){return this.hashTableNameToHandle[t]}getHashTableById(t){return this.hashTableMap[t]}dispose(){for(const t in this.hashTableMap)this.hashTableMap[t].clearAndClose(),delete this.hashTableMap[t];for(const t in this.hashTableNameToHandle)this.hashTableNameToHandle[t].dispose(),delete this.hashTableNameToHandle[t]}}const Zz="?tfjs-format=file",Yz="model.json";class ex{get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}get modelStructuredOutputKeys(){return this.structuredOutputKeys}constructor(t,e={},s=Ie){this.modelUrl=t,this.loadOptions=e,this.version="n/a",this.io=s,null==e&&(this.loadOptions={}),this.resourceManager=new Xz}findIOHandler(){const t=this.modelUrl;if(null!=t.load)this.handler=t;else if(null!=this.loadOptions.requestInit)this.handler=this.io.browserHTTPRequest(t,this.loadOptions);else{const e=this.io.getLoadHandlers(t,this.loadOptions);if(0===e.length)e.push(this.io.browserHTTPRequest(t,this.loadOptions));else if(e.length>1)throw new Error(`Found more than one (${e.length}) load handlers for URL '${[t]}'`);this.handler=e[0]}}load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const t=this.handler.load();return hr(t)?t.then(e=>this.loadSync(e)):this.loadSync(t)}loadSync(t){this.artifacts=t;const e=this.artifacts.modelTopology;let s=this.artifacts.signature;if(null!=this.artifacts.userDefinedMetadata){const o=this.artifacts.userDefinedMetadata;null!=o.signature&&(s=o.signature),null!=o.structuredOutputKeys&&(this.structuredOutputKeys=o.structuredOutputKeys)}this.signature=s,this.version=`${e.versions.producer}.${e.versions.minConsumer}`;const r=this.io.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new cp(KS.Instance.transformGraph(e,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(r),this.executor.resourceManager=this.resourceManager,null!=t.modelInitializer&&null!=t.modelInitializer.node){const o=KS.Instance.transformGraph(t.modelInitializer);this.initializer=new cp(o),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializerSignature=t.initializerSignature}return!0}save(t,e){var s=this;return(0,O.Z)(function*(){if("string"==typeof t){const r=s.io.getSaveHandlers(t);if(0===r.length)throw new Error(`Cannot find any save handlers for URL '${t}'`);if(r.length>1)throw new Error(`Found more than one (${r.length}) save handlers for URL '${t}'`);t=r[0]}if(null==t.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return t.save(s.artifacts)})()}addStructuredOutputNames(t){if(this.structuredOutputKeys){const s={};return(t instanceof rt?[t]:t).forEach((r,o)=>s[this.structuredOutputKeys[o]]=r),s}return t}predict(t,e){const s=this.execute(t,this.outputNodes);return this.addStructuredOutputNames(s)}predictAsync(t,e){var s=this;return(0,O.Z)(function*(){const r=yield s.executeAsync(t,s.outputNodes);return s.addStructuredOutputNames(r)})()}normalizeInputs(t){var e;if(!(t instanceof rt||Array.isArray(t))){const o=null===(e=this.signature)||void 0===e?void 0:e.inputs;if(null!=o)for(const a in o){const i=o[a];null!=i.resourceId&&(t[a]=this.resourceIdToCapturedInput[i.resourceId])}return t}t=Array.isArray(t)?t:[t];const s=Object.keys(this.resourceIdToCapturedInput).length;if(t.length+s!==this.inputNodes.length)throw new Error(`Input tensor count mismatch, the graph model has ${this.inputNodes.length-s} non-resource placeholders, while there are ${t.length} input tensors provided.`);let r=0;return this.inputNodes.reduce((o,a)=>{var i,l,u;const c=null===(u=null===(l=null===(i=this.signature)||void 0===i?void 0:i.inputs)||void 0===l?void 0:l[a])||void 0===u?void 0:u.resourceId;return o[a]=null!=c?this.resourceIdToCapturedInput[c]:t[r++],o},{})}normalizeOutputs(t){return t=t||this.outputNodes,Array.isArray(t)?t:[t]}executeInitializerGraph(){return null==this.initializer?[]:this.initializer.execute({},null==this.initializerSignature?[]:Object.keys(this.initializerSignature.outputs))}executeInitializerGraphAsync(){var t=this;return(0,O.Z)(function*(){return null==t.initializer?[]:t.initializer.executeAsync({},null==t.initializerSignature?[]:Object.keys(t.initializerSignature.outputs))})()}setResourceIdToCapturedInput(t){if(this.resourceIdToCapturedInput={},this.initializerSignature){const e=this.initializerSignature.outputs,s=Object.keys(e);for(let r=0;r<s.length;r++)this.resourceIdToCapturedInput[e[s[r]].resourceId]=t[r]}}execute(t,e){null==this.resourceIdToCapturedInput&&this.setResourceIdToCapturedInput(this.executeInitializerGraph()),t=this.normalizeInputs(t),e=this.normalizeOutputs(e);const s=this.executor.execute(t,e);return s.length>1?s:s[0]}executeAsync(t,e){var s=this;return(0,O.Z)(function*(){null==s.resourceIdToCapturedInput&&s.setResourceIdToCapturedInput(yield s.executeInitializerGraphAsync()),t=s.normalizeInputs(t),e=s.normalizeOutputs(e);const r=yield s.executor.executeAsync(t,e);return r.length>1?r:r[0]})()}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(t){return Object.keys(t).reduce((e,s)=>(e[s]=[t[s]],e),{})}dispose(){this.executor.dispose(),this.initializer&&(this.initializer.dispose(),this.resourceIdToCapturedInput&&Be(this.resourceIdToCapturedInput)),this.resourceManager.dispose()}}function Qz(n){return tx.apply(this,arguments)}function tx(){return(tx=(0,O.Z)(function*(n,t={},e=Ie){if(null==n)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&"string"==typeof n&&(n=function eB(n){return n.endsWith("/")||(n+="/"),`${n}${Yz}${Zz}`}(n));const s=new ex(n,t,e);return yield s.load(),s})).apply(this,arguments)}function Jz(n){if(null==n)throw new Error("modelUrl in loadGraphModelSync() cannot be null. Please provide model artifacts or an IOHandler that loads the model");let t;if(n instanceof Array){const[s,r]=n;if(!s)throw new Error("modelJSON must be the first element of the array");if(!(r&&r instanceof ArrayBuffer))throw new Error("An ArrayBuffer of weights must be the second element of the array");if(!("modelTopology"in s))throw new Error("Model JSON is missing 'modelTopology'");if(!("weightsManifest"in s))throw new Error("Model JSON is missing 'weightsManifest'");t=Gh(wf(s,Cf(s.weightsManifest),r))}else if("load"in n)t=n;else{if(!("modelTopology"in n&&"weightSpecs"in n&&"weightData"in n))throw new Error("Unknown model format");t=Gh(n)}const e=new ex(t);return e.load(),e}const nC="4.13.0";function hp(n,t,e=new Map,s=new Set){if(null==n)return null;if("function"==typeof Blob&&n instanceof Blob)return n.slice();if(s.has(n))throw new Error("Circular references are not supported.");if(e.has(n))return e.get(n);const r=t(n);if(r.recurse&&null!==r.value)throw new Error("A deep map function may not return both a value and recurse=true.");if(r.recurse){if(Di(n)){const o=Array.isArray(n)?[]:{};s.add(n);for(const a in n){const l=hp(n[a],t,e,s);o[a]=l}return s.delete(n),n.__proto__&&(o.__proto__=n.__proto__),o}throw new Error(`Can't recurse into non-iterable type: ${n}`)}return e.set(n,r.value),r.value}function nB(n,t=rC){return sC(n,t)}function sC(n,t,e=new Set){const s=n[0];if(e.has(s))throw new Error("Circular references are not supported.");const r=t(n);if(r.recurse&&null!==r.value)throw new Error("A deep zip function may not return both a value and recurse=true.");if(r.recurse){if(Di(s)){const o=Array.isArray(s)?[]:{};e.add(s);for(const a in s){const l=sC(n.map(u=>u[a]),t,e);o[a]=l}return e.delete(s),o}throw new Error(`Can't recurse into non-iterable type: ${s}`)}return r.value}function rC(n){return null===n?null:Di(n[0])?{value:null,recurse:!0}:{value:n,recurse:!1}}function oC(n,t){return nx.apply(this,arguments)}function nx(){return(nx=(0,O.Z)(function*(n,t){const e=new Map;hp(n,t,e);for(const r of Array.from(e.keys())){const o=e.get(r);if(hr(o)){const a=yield o;e.set(r,a)}}return hp(n,t,e)})).apply(this,arguments)}function Di(n){let t=!1;if(B().get("IS_BROWSER"))t=n instanceof TextDecoder;else{const{StringDecoder:e}=P(4977);t=n instanceof e}return null!=n&&!ArrayBuffer.isView(n)&&(Array.isArray(n)||"object"==typeof n&&!(n instanceof rt)&&!(n instanceof Promise)&&!t)}function aB(n){return n instanceof rt?{value:n.clone(),recurse:!1}:Di(n)?{value:null,recurse:!0}:{value:n,recurse:!1}}class aC{constructor(t){if(this.capacity=t,this.begin=0,this.end=0,null==t)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(t<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(t),this.doubledCapacity=2*t}wrap(t){for(;t<0;)t+=this.doubledCapacity;return t%this.doubledCapacity}get(t){if(t<0)throw new RangeError("Can't get item at a negative index.");return this.data[t%this.capacity]}set(t,e){if(t<0)throw new RangeError("Can't set item at a negative index.");this.data[t%this.capacity]=e}length(){let t=this.end-this.begin;return t<0&&(t=this.doubledCapacity+t),t}isFull(){return this.length()===this.capacity}isEmpty(){return 0===this.length()}push(t){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,t),this.end=this.wrap(this.end+1)}pushAll(t){for(const e of t)this.push(e)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);const t=this.get(this.end);return this.set(this.end,void 0),t}unshift(t){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,t)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const t=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),t}shuffleExcise(t){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const e=this.wrap(this.begin+t),s=this.get(e);return this.set(e,this.pop()),s}}let iB=(()=>{class n extends aC{constructor(){super(n.INITIAL_CAPACITY)}isFull(){return!1}push(e){super.isFull()&&this.expand(),super.push(e)}unshift(e){super.isFull()&&this.expand(),super.unshift(e)}expand(){const e=2*this.capacity,s=new Array(e),r=this.length();for(let o=0;o<r;o++)s[o]=this.get(this.wrap(this.begin+o));this.data=s,this.capacity=e,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=r}}return n.INITIAL_CAPACITY=32,n})();function iC(n){return new uB(n)}function Yu(n){return new cB(n)}class dn{toArray(){var t=this;return(0,O.Z)(function*(){const e=[];let s=yield t.next();for(;!s.done;)e.push(s.value),s=yield t.next();return e})()}toArrayForTest(){var t=this;return(0,O.Z)(function*(){const e=t.prefetch(100),s=[];let r=yield e.next();for(;!r.done;)s.push(r.value),r=yield e.next();return s})()}resolveFully(){var t=this;return(0,O.Z)(function*(){let e=yield t.next();for(;!e.done;)e=yield t.next()})()}resolveWhile(t){var e=this;return(0,O.Z)(function*(){let s=yield e.next(),r=t(s.value);for(;!s.done&&r;)s=yield e.next(),r=t(s.value)})()}handleErrors(t){return new yB(this,t)}filter(t){return new mB(this,t)}map(t){return new gB(this,t)}mapAsync(t){return new uC(this,t)}serialMapAsync(t){return new uC(this,t).serial()}flatmap(t){return new xB(this,t)}forEachAsync(t){var e=this;return(0,O.Z)(function*(){return e.map(t).resolveFully()})()}serialForEach(t){var e=this;return(0,O.Z)(function*(){return e.serialMapAsync(t).resolveWhile(s=>!0===s)})()}rowMajorBatch(t,e=!0){return new fB(this,t,e)}columnMajorBatch(t,e=!0,s=rC){return this.rowMajorBatch(t,e).map(o=>nB(o,s))}concatenate(t,e){return new cC(iC([this,t]),e)}take(t){return t<0||null==t?this:new pB(this,t)}skip(t){return t<0||null==t?this:new dB(this,t)}prefetch(t){return new hC(this,t)}shuffle(t,e){return new wB(this,t,e)}serial(){return new hB(this)}}class uB extends dn{constructor(t){super(),this.items=t,this.trav=0}summary(){return`Array of ${this.items.length} items`}next(){var t=this;return(0,O.Z)(function*(){if(t.trav>=t.items.length)return{value:null,done:!0};const e=t.items[t.trav];return t.trav++,{value:(n=e,function tB(n,t){return hp(n,t)}(n,aB)),done:!1};var n})()}}class cB extends dn{constructor(t){super(),this.nextFn=t}summary(){return"Function call"}next(){var t=this;return(0,O.Z)(function*(){try{return t.nextFn()}catch(e){throw e.message=`Error thrown while iterating through a dataset: ${e.message}`,e}})()}}class hB extends dn{constructor(t){super(),this.upstream=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Serial`}next(){var t=this;return(0,O.Z)(function*(){return t.lastRead=t.lastRead.then(()=>t.serialNext()),t.lastRead})()}serialNext(){var t=this;return(0,O.Z)(function*(){return t.upstream.next()})()}}class dB extends dn{constructor(t,e){super(),this.upstream=t,this.maxCount=e,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Skip`}next(){var t=this;return(0,O.Z)(function*(){return t.lastRead=t.lastRead.then(()=>t.serialNext()),t.lastRead})()}serialNext(){var t=this;return(0,O.Z)(function*(){for(;t.count++<t.maxCount;){const e=yield t.upstream.next();if(e.done)return e;Be(e.value)}return t.upstream.next()})()}}class pB extends dn{constructor(t,e){super(),this.upstream=t,this.maxCount=e,this.count=0}summary(){return`${this.upstream.summary()} -> Take`}next(){var t=this;return(0,O.Z)(function*(){return t.count++>=t.maxCount?{value:null,done:!0}:t.upstream.next()})()}}class fB extends dn{constructor(t,e,s=!0){super(),this.upstream=t,this.batchSize=e,this.enableSmallLastBatch=s,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> RowMajorBatch`}next(){var t=this;return(0,O.Z)(function*(){return t.lastRead=t.lastRead.then(()=>t.serialNext()),t.lastRead})()}serialNext(){var t=this;return(0,O.Z)(function*(){const e=[];for(;e.length<t.batchSize;){const s=yield t.upstream.next();if(s.done)return t.enableSmallLastBatch&&e.length>0?{value:e,done:!1}:{value:null,done:!0};e.push(s.value)}return{value:e,done:!1}})()}}class mB extends dn{constructor(t,e){super(),this.upstream=t,this.predicate=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Filter`}next(){var t=this;return(0,O.Z)(function*(){return t.lastRead=t.lastRead.then(()=>t.serialNext()),t.lastRead})()}serialNext(){var t=this;return(0,O.Z)(function*(){for(;;){const e=yield t.upstream.next();if(e.done||t.predicate(e.value))return e;Be(e.value)}})()}}class gB extends dn{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return`${this.upstream.summary()} -> Map`}next(){var t=this;return(0,O.Z)(function*(){const e=yield t.upstream.next();if(e.done)return{value:null,done:!0};const s=fr(e.value),r=t.transform(e.value),o=fr(r);for(const a of s)Lh(a,o)||a.dispose();return{value:r,done:!1}})()}}class yB extends dn{constructor(t,e){super(),this.upstream=t,this.handler=e,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> handleErrors`}next(){var t=this;return(0,O.Z)(function*(){return t.lastRead=t.lastRead.then(()=>t.serialNext()),t.lastRead})()}serialNext(){var t=this;return(0,O.Z)(function*(){for(;;)try{return yield t.upstream.next()}catch(e){if(!t.handler(e))return{value:null,done:!0}}})()}}class uC extends dn{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return`${this.upstream.summary()} -> AsyncMap`}next(){var t=this;return(0,O.Z)(function*(){const e=yield t.upstream.next();if(e.done)return{value:null,done:!0};const s=fr(e.value),r=yield t.transform(e.value),o=fr(r);for(const a of s)Lh(a,o)||a.dispose();return{value:r,done:!1}})()}}class sx extends dn{constructor(){super(),this.outputQueue=new iB,this.lastRead=Promise.resolve({value:null,done:!1})}next(){var t=this;return(0,O.Z)(function*(){return t.lastRead=t.lastRead.then(()=>t.serialNext()),t.lastRead})()}serialNext(){var t=this;return(0,O.Z)(function*(){for(;0===t.outputQueue.length();)if(!(yield t.pump()))return{value:null,done:!0};return{value:t.outputQueue.shift(),done:!1}})()}}class xB extends sx{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return`${this.upstream.summary()} -> Flatmap`}pump(){var t=this;return(0,O.Z)(function*(){const e=yield t.upstream.next();if(e.done)return!1;const s=fr(e.value),r=t.transform(e.value),o=fr(r);t.outputQueue.pushAll(r);for(const a of s)Lh(a,o)||a.dispose();return!0})()}}class cC extends dn{constructor(t,e){super(),this.baseErrorHandler=e,this.lastRead=null,this.iterator=null,this.moreIterators=t}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}next(){var t=this;return(0,O.Z)(function*(){return t.lastRead=t.readFromChain(t.lastRead),t.lastRead})()}readFromChain(t){var e=this;return(0,O.Z)(function*(){if(yield t,null==e.iterator){const r=yield e.moreIterators.next();if(r.done)return{value:null,done:!0};e.iterator=r.value,null!=e.baseErrorHandler&&(e.iterator=e.iterator.handleErrors(e.baseErrorHandler))}const s=yield e.iterator.next();return s.done?(e.iterator=null,e.readFromChain(t)):s})()}}var Zo=function(n){return n[n.FAIL=0]="FAIL",n[n.SHORTEST=1]="SHORTEST",n[n.LONGEST=2]="LONGEST",n}(Zo||{});class bB extends dn{constructor(t,e=Zo.FAIL){super(),this.iterators=t,this.mismatchMode=e,this.count=0,this.currentPromise=null}summary(){return"{TODO: fill in upstream of zip summaries} -> Zip"}nextState(t){var e=this;return(0,O.Z)(function*(){yield t;let s=0,r=0;const a=yield oC(e.iterators,function o(i){return i instanceof dn?{value:i.next().then(u=>(s++,u.done&&r++,u.value)),recurse:!1}:{value:null,recurse:!0}});if(s===r)return{value:null,done:!0};if(r>0)switch(e.mismatchMode){case Zo.FAIL:throw new Error(`Zipped streams should have the same length. Mismatched at element ${e.count}.`);case Zo.SHORTEST:return{value:null,done:!0}}return e.count++,{value:a,done:!1}})()}next(){var t=this;return(0,O.Z)(function*(){return t.currentPromise=t.nextState(t.currentPromise),t.currentPromise})()}}class hC extends dn{constructor(t,e){super(),this.upstream=t,this.bufferSize=e,this.buffer=new aC(e)}summary(){return`${this.upstream.summary()} -> Prefetch`}refill(){for(;!this.buffer.isFull();){const t=this.upstream.next();this.buffer.push(t)}}next(){return this.refill(),this.buffer.shift()}}class wB extends hC{constructor(t,e,s){super(t,e),this.upstream=t,this.windowSize=e,this.upstreamExhausted=!1,this.random=Ci.alea(s||gn().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}next(){var t=this;return(0,O.Z)(function*(){return t.lastRead=t.lastRead.then(()=>t.serialNext()),t.lastRead})()}randomInt(t){return Math.floor(this.random()*t)}chooseIndex(){return this.randomInt(this.buffer.length())}serialNext(){var t=this;return(0,O.Z)(function*(){for(t.upstreamExhausted||t.refill();!t.buffer.isEmpty();){const e=t.chooseIndex(),s=yield t.buffer.shuffleExcise(e);if(!s.done)return t.refill(),s;t.upstreamExhausted=!0}return{value:null,done:!0}})()}}let Qu=(()=>{class n{constructor(){this.size=null}batch(e,s=!0){const r=this;let o;return C(e>0,()=>`batchSize needs to be positive, but it is\n      ${e}`),o=this.size===1/0||null==this.size?this.size:s?Math.ceil(this.size/e):Math.floor(this.size/e),ts((0,O.Z)(function*(){return(yield r.iterator()).columnMajorBatch(e,s,CB)}),o)}concatenate(e){const s=this;let r;return r=this.size===1/0||e.size===1/0?1/0:null!=this.size&&null!=e.size?this.size+e.size:null,ts((0,O.Z)(function*(){return(yield s.iterator()).concatenate(yield e.iterator())}),r)}filter(e){const s=this;let r;return r=this.size===1/0?1/0:null,ts((0,O.Z)(function*(){return(yield s.iterator()).filter(o=>z(()=>e(o)))}),r)}forEachAsync(e){var s=this;return(0,O.Z)(function*(){return(yield s.iterator()).forEachAsync(e)})()}map(e){const s=this;return ts((0,O.Z)(function*(){return(yield s.iterator()).map(r=>z(()=>e(r)))}),this.size)}mapAsync(e){const s=this;return ts((0,O.Z)(function*(){return(yield s.iterator()).mapAsync(e)}),this.size)}prefetch(e){if(null==e)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");const s=this;return ts((0,O.Z)(function*(){return(yield s.iterator()).prefetch(e)}),this.size)}repeat(e){const s=this;let r;return r=null!=this.size&&e>0?this.size*e:0===e?0:null!=this.size&&(void 0===e||e<0)?1/0:null,ts((0,O.Z)(function*(){return function lC(n,t){return new cC(n,t)}(Yu((0,O.Z)(function*(){return{value:yield s.iterator(),done:!1}})).take(e))}),r)}skip(e){const s=this;let r;return r=null!=this.size&&e>=0&&this.size>=e?this.size-e:null!=this.size&&(this.size<e||void 0===e||e<0)?0:null,ts((0,O.Z)(function*(){return(yield s.iterator()).skip(e)}),r)}shuffle(e,s,r=!0){if(null==e||e<0)throw null==this.size?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);const o=this,a=Ci.alea(s||gn().toString());return ts((0,O.Z)(function*(){let i=a.int32();return r&&(i+=a.int32()),(yield o.iterator()).shuffle(e,i.toString())}),this.size)}take(e){const s=this;let r;return r=null!=this.size&&this.size>e?e:null!=this.size&&this.size<=e?this.size:null,ts((0,O.Z)(function*(){return(yield s.iterator()).take(e)}),r)}toArray(){var e=this;return(0,O.Z)(function*(){if(e.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(yield e.iterator()).toArray()})()}toArrayForTest(){var e=this;return(0,O.Z)(function*(){if(e.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(yield e.iterator()).toArrayForTest()})()}}return n.MAX_BUFFER_SIZE=1e4,n})();function ts(n,t=null){return new class extends Qu{constructor(){super(...arguments),this.size=t}iterator(){return(0,O.Z)(function*(){return n()})()}}}function vB(n){return ts((0,O.Z)(function*(){return iC(n)}),n.length)}function SB(n){if(!Di(n))throw new Error("The argument to zip() must be an object or array.");let t;if(Array.isArray(n))for(let e=0;e<n.length;e++)t=null==t?n[e].size:Math.min(t,n[e].size);else if(n instanceof Object)for(const e in n)t=null==t?n[e].size:Math.min(t,n[e].size);return ts((0,O.Z)(function*(){return function lB(n,t=Zo.FAIL){return new bB(n,t)}(yield oC(n,s=>{if(s instanceof Qu)return{value:s.iterator(),recurse:!1};if(Di(s))return{value:null,recurse:!0};throw new Error("Leaves of the structure passed to zip() must be Datasets, not primitives.")}),Zo.SHORTEST)}),t)}function CB(n){return null===n?null:function sB(n){return null==n||function rB(n){return null===n||"object"!=typeof n&&"function"!=typeof n}(n)||Array.isArray(n)||"object"==typeof n&&n instanceof rt||Jt(n)}(n[0])?{value:NB(n),recurse:!1}:{value:null,recurse:!0}}function NB(n){if(0===n.length)throw new Error("Can't make a batch of zero elements.");return n[0]instanceof rt?Dn(n):Xn(n)}class dC extends Qu{constructor(t){super(),this.input=t}iterator(){var t=this;return(0,O.Z)(function*(){return(yield t.input.iterator()).decodeUTF8().split("\n").map(o=>(o.endsWith("\r")&&(o=o.slice(0,-1)),o))})()}}const Ju=Symbol("out"),pC=Symbol("field"),pp=Symbol("quote"),rx=Symbol("quoteafterquote"),fC=Symbol("quoteinquote");class mC extends Qu{columnNames(){var t=this;return(0,O.Z)(function*(){return t.columnNamesValidated||(yield t.setColumnNames()),t.configuredColumnsOnly?Object.keys(t.columnConfigs):t.fullColumnNames})()}setColumnNames(){var t=this;return(0,O.Z)(function*(){const e=yield t.maybeReadHeaderLine();if(!t.fullColumnNames&&!e)throw new Error("Column names must be provided if there is no header line.");t.fullColumnNames&&e&&C(e.length===t.fullColumnNames.length,()=>"The length of provided columnNames ("+t.fullColumnNames.length.toString()+") does not match the length of the header line read from file ("+e.length.toString()+")."),t.fullColumnNames||(t.fullColumnNames=e);const s=t.fullColumnNames.reduce((o,a)=>(o[a]=o[a]+1||1,o),{}),r=Object.keys(s).filter(o=>s[o]>1);if(C(0===r.length,()=>"Duplicate column names found: "+r.toString()),t.columnConfigs)for(const o of Object.keys(t.columnConfigs))if(-1===t.fullColumnNames.indexOf(o))throw new Error('The key "'+o+'" provided in columnConfigs does not match any of the column names ('+t.fullColumnNames.toString()+").");t.columnNamesValidated=!0})()}maybeReadHeaderLine(){var t=this;return(0,O.Z)(function*(){if(t.hasHeader){const s=yield(yield t.base.iterator()).next();if(s.done)throw new Error("No data was found for CSV parsing.");return t.parseRow(s.value,!1)}return null})()}constructor(t,e){super(),this.input=t,this.hasHeader=!0,this.fullColumnNames=null,this.columnNamesValidated=!1,this.columnConfigs=null,this.configuredColumnsOnly=!1,this.delimiter=",",this.delimWhitespace=!1,this.base=new dC(t),e||(e={}),this.hasHeader=!1!==e.hasHeader,this.fullColumnNames=e.columnNames,this.columnConfigs=e.columnConfigs,this.configuredColumnsOnly=e.configuredColumnsOnly,e.delimWhitespace?(C(null==e.delimiter,()=>"Delimiter should not be provided when delimWhitespace is true."),this.delimWhitespace=!0,this.delimiter=" "):this.delimiter=e.delimiter?e.delimiter:","}iterator(){var t=this;return(0,O.Z)(function*(){t.columnNamesValidated||(yield t.setColumnNames());let e=yield t.base.iterator();return t.hasHeader&&(e=e.skip(1)),e.map(s=>t.makeDataElement(s))})()}makeDataElement(t){const e=this.parseRow(t),s={},r={};for(let o=0;o<this.fullColumnNames.length;o++){const a=this.fullColumnNames[o],i=this.columnConfigs?this.columnConfigs[a]:null;if(!this.configuredColumnsOnly||i){const l=e[o];let u=null;if(""===l)if(i&&void 0!==i.default)u=i.default;else{if(i&&(i.required||i.isLabel))throw new Error(`Required column ${a} is empty in this line: ${t}`);u=void 0}else{const c=Number(l);if(isNaN(c))u=i&&"bool"===i.dtype?this.getBoolean(l):l;else if(i&&i.dtype)switch(i.dtype){case"float32":default:u=c;break;case"int32":u=Math.floor(c);break;case"bool":u=this.getBoolean(l)}else u=c}i&&i.isLabel?r[a]=u:s[a]=u}}return 0===Object.keys(r).length?s:{xs:s,ys:r}}getBoolean(t){return"1"===t||"true"===t.toLowerCase()?1:0}parseRow(t,e=!0){const s=[];let r=0;const o=t.length;let a=Ju;for(let i=0;i<o;i++)switch(a){case Ju:switch(t.charAt(i)){case'"':r=i+1,a=pp;break;case this.delimiter:if(r=i+1," "===this.delimiter&&this.delimWhitespace)break;s.push(""),a=Ju;break;default:a=pC,r=i}break;case pC:t.charAt(i)===this.delimiter&&(s.push(t.substring(r,i)),a=Ju,r=i+1);break;case pp:'"'===t.charAt(i)&&(a=rx);break;case rx:switch(t.charAt(i)){case this.delimiter:s.push(t.substring(r,i-1)),a=Ju,r=i+1;break;case'"':a=pp;break;default:a=fC}break;case fC:'"'===t.charAt(i)&&(a=pp)}if(s.push(a===rx?t.substring(r,o-1):t.substring(r)),e&&s.length!==this.fullColumnNames.length)throw new Error(`Invalid row in csv file. Should have ${this.fullColumnNames.length} elements in a row, but got ${s}`);return s}}class ox extends dn{constructor(t){super(),this.microphoneConfig=t,this.isClosed=!1,this.fftSize=t.fftSize||1024;const e=Math.log2(this.fftSize);if(this.fftSize<0||e<4||e>14||!Number.isInteger(e))throw new Error(`Invalid fftSize: it must be a power of 2 between 2 to 4 and 2 to 14, but got ${this.fftSize}`);if(this.numFrames=t.numFramesPerSpectrogram||43,this.sampleRateHz=t.sampleRateHz,this.columnTruncateLength=t.columnTruncateLength||this.fftSize,this.audioTrackConstraints=t.audioTrackConstraints,this.smoothingTimeConstant=t.smoothingTimeConstant||0,this.includeSpectrogram=!1!==t.includeSpectrogram,this.includeWaveform=!0===t.includeWaveform,!this.includeSpectrogram&&!this.includeWaveform)throw new Error("Both includeSpectrogram and includeWaveform are false. At least one type of data should be returned.")}summary(){return"microphone"}static create(t={}){return(0,O.Z)(function*(){if(!B().get("IS_BROWSER"))throw new Error("microphone API is only supported in browser environment.");const e=new ox(t);return yield e.start(),e})()}start(){var t=this;return(0,O.Z)(function*(){try{t.stream=yield navigator.mediaDevices.getUserMedia({audio:null==t.audioTrackConstraints||t.audioTrackConstraints,video:!1})}catch(r){throw new Error(`Error thrown while initializing video stream: ${r.message}`)}if(!t.stream)throw new Error("Could not obtain audio from microphone.");const e=window.AudioContext||window.webkitAudioContext;if(t.audioContext=new e,t.sampleRateHz){if(t.audioContext.sampleRate!==t.sampleRateHz)throw new Error(`Mismatch in sampling rate: Expected: ${t.sampleRateHz}; Actual: ${t.audioContext.sampleRate}`)}else t.sampleRateHz=t.audioContext.sampleRate;const s=t.audioContext.createMediaStreamSource(t.stream);t.analyser=t.audioContext.createAnalyser(),t.analyser.fftSize=2*t.fftSize,t.analyser.smoothingTimeConstant=t.smoothingTimeConstant,s.connect(t.analyser),t.freqData=new Float32Array(t.fftSize),t.timeData=new Float32Array(t.fftSize)})()}next(){var t=this;return(0,O.Z)(function*(){if(t.isClosed)return{value:null,done:!0};let e,s;const r=yield t.getAudioData();if(t.includeSpectrogram){const o=t.flattenQueue(r.freqDataQueue);e=t.getTensorFromAudioDataArray(o,[t.numFrames,t.columnTruncateLength,1])}if(t.includeWaveform){const o=t.flattenQueue(r.timeDataQueue);s=t.getTensorFromAudioDataArray(o,[t.numFrames*t.fftSize,1])}return{value:{spectrogram:e,waveform:s},done:!1}})()}capture(){var t=this;return(0,O.Z)(function*(){return(yield t.next()).value})()}getAudioData(){var t=this;return(0,O.Z)(function*(){const e=[],s=[];let r=0;return new Promise(o=>{const a=setInterval(()=>{t.includeSpectrogram&&(t.analyser.getFloatFrequencyData(t.freqData),t.freqData[0]===-1/0&&o({freqDataQueue:e,timeDataQueue:s}),e.push(t.freqData.slice(0,t.columnTruncateLength))),t.includeWaveform&&(t.analyser.getFloatTimeDomainData(t.timeData),s.push(t.timeData.slice())),++r===t.numFrames&&(clearInterval(a),o({freqDataQueue:e,timeDataQueue:s}))},t.fftSize/t.sampleRateHz*1e3)})})()}stop(){this.isClosed||(this.isClosed=!0,this.analyser.disconnect(),this.audioContext.close(),null!=this.stream&&this.stream.getTracks().length>0&&this.stream.getTracks()[0].stop())}toArray(){throw new Error("Can not convert infinite audio stream to array.")}getSampleRate(){return this.sampleRateHz}flattenQueue(t){const e=t[0].length,s=new Float32Array(t.length*e);return t.forEach((r,o)=>s.set(r,o*e)),s}getTensorFromAudioDataArray(t,e){const s=new Float32Array(q(e));return s.set(t,s.length-t.length),Xn(s,e)}}class ax extends dn{constructor(t,e){if(super(),this.webcamVideoElement=t,this.webcamConfig=e,this.isClosed=!0,this.resize=!1,this.needToResize())if(this.resize=!0,this.cropSize=[this.webcamConfig.resizeHeight,this.webcamConfig.resizeWidth],this.cropBoxInd=vn([0],"int32"),this.webcamConfig.centerCrop){const s=1*this.webcamConfig.resizeWidth/this.webcamVideoElement.width,r=1*this.webcamConfig.resizeHeight/this.webcamVideoElement.height,o=(1-s)/2,a=(1-r)/2;this.cropBox=qr([a,o,r+a,o+s],[1,4])}else this.cropBox=qr([0,0,1,1],[1,4])}summary(){return"webcam"}static create(t,e={}){return(0,O.Z)(function*(){if(!B().get("IS_BROWSER"))throw new Error("tf.data.webcam is only supported in browser environment.");if(!t){if(t=document.createElement("video"),!e.resizeWidth||!e.resizeHeight)throw new Error("Please provide webcam video element, or resizeWidth and resizeHeight to create a hidden video element.");t.width=e.resizeWidth,t.height=e.resizeHeight}const s=new ax(t,e);return yield s.start(),s})()}start(){var t=this;return(0,O.Z)(function*(){t.webcamConfig.facingMode&&C("user"===t.webcamConfig.facingMode||"environment"===t.webcamConfig.facingMode,()=>`Invalid webcam facing mode: ${t.webcamConfig.facingMode}. Please provide 'user' or 'environment'`);try{t.stream=yield navigator.mediaDevices.getUserMedia({video:{deviceId:t.webcamConfig.deviceId,facingMode:t.webcamConfig.facingMode?t.webcamConfig.facingMode:"user",width:t.webcamVideoElement.width,height:t.webcamVideoElement.height}})}catch(e){throw e.message=`Error thrown while initializing video stream: ${e.message}`,e}if(!t.stream)throw new Error("Could not obtain video from webcam.");try{t.webcamVideoElement.srcObject=t.stream}catch(e){console.log(e),t.webcamVideoElement.src=window.URL.createObjectURL(t.stream)}return t.webcamVideoElement.play(),t.isClosed=!1,new Promise(e=>{t.webcamVideoElement.onloadedmetadata=()=>{e()}})})()}next(){var t=this;return(0,O.Z)(function*(){if(t.isClosed)return{value:null,done:!0};let e;try{e=Yf(t.webcamVideoElement)}catch(s){throw new Error(`Error thrown converting video to pixels: ${JSON.stringify(s)}`)}if(!t.resize)return{value:e,done:!1};try{return{value:t.cropAndResizeFrame(e),done:!1}}catch(s){throw new Error(`Error thrown cropping the video: ${s.message}`)}finally{e.dispose()}})()}needToResize(){return!(!this.webcamConfig.resizeWidth||!this.webcamConfig.resizeHeight||this.webcamVideoElement.width===this.webcamConfig.resizeWidth&&this.webcamVideoElement.height===this.webcamConfig.resizeHeight)}cropAndResizeFrame(t){return z(()=>{const e=wn(de(t,"float32"),0);let s;return s=ds.cropAndResize(e,this.cropBox,this.cropBoxInd,this.cropSize,"bilinear"),F(s,s.shape.slice(1))})}capture(){var t=this;return(0,O.Z)(function*(){return(yield t.next()).value})()}stop(){this.stream.getTracks().forEach(e=>e.stop());try{this.webcamVideoElement.srcObject=null}catch(e){console.log(e),this.webcamVideoElement.src=null}this.isClosed=!0}toArray(){throw new Error("Can not convert infinite video stream to array.")}}class gC{}class yC extends dn{split(t){return new IB(this,t)}}class IB extends yC{constructor(t,e){super(),this.upstream=t,this.impl=new kB(t,e)}summary(){return this.impl.summary()}next(){var t=this;return(0,O.Z)(function*(){return t.impl.next()})()}}class kB extends sx{constructor(t,e){super(),this.upstream=t,this.separator=e,this.carryover=""}summary(){return`${this.upstream.summary()} -> Split('${this.separator}')`}pump(){var t=this;return(0,O.Z)(function*(){const e=yield t.upstream.next();if(e.done)return""!==t.carryover&&(t.outputQueue.push(t.carryover),t.carryover="",!0);const s=e.value.split(t.separator);s[0]=t.carryover+s[0];for(const r of s.slice(0,-1))t.outputQueue.push(r);return t.carryover=s[s.length-1],!0})()}}class TB extends dn{decodeUTF8(){return new $B(this)}}class $B extends yC{constructor(t){super(),this.upstream=t,this.impl=new EB(t)}summary(){return this.impl.summary()}next(){var t=this;return(0,O.Z)(function*(){return t.impl.next()})()}}class EB extends sx{constructor(t){if(super(),this.upstream=t,B().get("IS_BROWSER"))this.decoder=new TextDecoder("utf-8");else{const{StringDecoder:e}=P(1601);this.decoder=new e("utf8")}}summary(){return`${this.upstream.summary()} -> Utf8`}pump(){var t=this;return(0,O.Z)(function*(){const e=yield t.upstream.next();let s,r;return!e.done&&(s=e.value,r=B().get("IS_BROWSER")?t.decoder.decode(s,{stream:!0}):t.decoder.write(Buffer.from(s.buffer)),t.outputQueue.push(r),!0)})()}}class xC extends TB{constructor(t,e={}){super(),this.file=t,this.options=e,C(t instanceof Uint8Array||!!B().get("IS_BROWSER")&&(t instanceof File||t instanceof Blob),()=>"FileChunkIterator only supports File, Blob and Uint8Array right now."),this.offset=e.offset||0,this.chunkSize=e.chunkSize||1048576}summary(){return`FileChunks ${this.file}`}next(){var t=this;return(0,O.Z)(function*(){return t.offset>=(t.file instanceof Uint8Array?t.file.byteLength:t.file.size)?{value:null,done:!0}:{value:yield new Promise((s,r)=>{const o=t.offset+t.chunkSize;if(t.file instanceof Uint8Array)s(new Uint8Array(t.file.slice(t.offset,o)));else{const a=new FileReader;a.onload=l=>{let u=a.result;if(u instanceof ArrayBuffer&&(u=new Uint8Array(u)),!(u instanceof Uint8Array))return r(new TypeError("FileReader returned unknown type."));s(u)},a.onabort=l=>r(new Error("Aborted")),a.onerror=l=>r(new Error(l.type));const i=t.file.slice(t.offset,o);a.readAsArrayBuffer(i)}t.offset=o}),done:!1}})()}}function ix(){return(ix=(0,O.Z)(function*(n,t={},e){let s,r;"string"==typeof n?s=n:(s=n.url,r=AB(n));const o=yield(e||Tb)(s,r);if(o.ok){const a=new Uint8Array(yield o.arrayBuffer());return new xC(a,t)}throw new Error(o.statusText)})).apply(this,arguments)}const AB=n=>({method:n.method,headers:n.headers,body:n.body,mode:n.mode,credentials:n.credentials,cache:n.cache,redirect:n.redirect,referrer:n.referrer,integrity:n.integrity});function bC(n){return"string"==typeof n&&"file://"===n.slice(0,7)}class wC extends gC{constructor(t,e={}){super(),this.input=t,this.options=e}iterator(){var t=this;return(0,O.Z)(function*(){if(bC(t.input)&&B().get("IS_NODE")){const e=P(7792);t.input=e.readFileSync(t.input.slice(7))}return new xC(t.input,t.options)})()}}class vC extends gC{constructor(t,e={}){super(),this.url=t,this.fileOptions=e}iterator(){var t=this;return(0,O.Z)(function*(){return bC(t.url)?new wC(t.url,t.fileOptions).iterator():function _B(n){return ix.apply(this,arguments)}(t.url,t.fileOptions)})()}}function RB(n,t={}){return new mC(new vC(n),t)}function DB(n){const t=Yu(n);return ts((0,O.Z)(function*(){return t}))}function FB(n){return ts((0,O.Z)(function*(){const t=yield n();return Yu(()=>t.next())}))}function OB(n,t){return lx.apply(this,arguments)}function lx(){return(lx=(0,O.Z)(function*(n,t){return ax.create(n,t)})).apply(this,arguments)}function LB(n){return ux.apply(this,arguments)}function ux(){return(ux=(0,O.Z)(function*(n){return ox.create(n)})).apply(this,arguments)}const SC="4.13.0";function Ne(n,t){Array.isArray(n)||(n=[n]),n.forEach(e=>{null!=e&&C("complex64"!==e.dtype,()=>`${t} does not support complex64 tensors in the CPU backend.`)})}const PB=yd;let CC=(()=>{class n extends yc{nextDataId(){return n.nextDataId++}constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new Xp(this,_s())}write(e,s,r){this.firstUse&&(this.firstUse=!1,B().get("IS_NODE")&&as("\n============================\nHi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. \n============================"));const o={id:this.nextDataId()};return this.data.set(o,{values:e,dtype:r,refCount:1}),o}makeTensorInfo(e,s,r){let o;if("string"===s&&null!=r&&r.length>0&&Hs(r[0])){const a=r.map(i=>js(i));o=this.write(a,e,s)}else o=this.write(r,e,s);return{dataId:o,shape:e,dtype:s}}refCount(e){return this.data.has(e)?this.data.get(e).refCount:0}incRef(e){this.data.get(e).refCount++}decRef(e){this.data.has(e)&&this.data.get(e).refCount--}move(e,s,r,o,a){this.data.set(e,{values:s,dtype:o,refCount:a})}numDataIds(){return this.data.numDataIds()}read(e){var s=this;return(0,O.Z)(function*(){return s.readSync(e)})()}readSync(e){const{dtype:s,complexTensorInfos:r}=this.data.get(e);return"complex64"===s?Nr(this.readSync(r.real.dataId),this.readSync(r.imag.dataId)):fb(this.data.get(e).values,s)}bufferSync(e){const s=this.readSync(e.dataId);if("string"===e.dtype)try{const r=s.map(o=>pr(o));return Ge(e.shape,e.dtype,r)}catch{throw new Error("Failed to decode encoded string bytes into utf-8")}return Ge(e.shape,e.dtype,s)}makeOutput(e,s,r){return _s().makeTensorFromTensorInfo(this.makeTensorInfo(s,r,e),this)}disposeData(e,s=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!s&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:r}=this.data.get(e);null!=r&&(this.disposeData(r.real.dataId,!0),this.disposeData(r.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}time(e){return(0,O.Z)(function*(){const s=gn();return e(),{kernelMs:gn()-s}})()}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){Ne([e],"where");const s=this.readSync(e.dataId);return PB(e.shape,s)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}return n.nextDataId=0,n})();function NC(n){const t=new Float32Array(n.length);for(let e=0;e<n.length;++e)t[e]=Math.abs(n[e]);return t}const MB={kernelName:Xi,backendName:"cpu",kernelFunc:n=>{const{x:t}=n.inputs,e=n.backend;Ne(t,"abs");let s=new Float32Array(q(t.shape));return s=NC(e.data.get(t.dataId).values),e.makeOutput(s,t.shape,t.dtype)}};function Wt(n){return(t,e,s,r,o)=>{const a=Ve(t,e),i=a.length,l=Ae(a),c=on(o,q(a)),h=t.length,d=e.length,p=Ae(t),f=Ae(e),g=Eo(t,a),m=Eo(e,a);if(g.length+m.length===0)for(let y=0;y<c.length;++y)c[y]=n(s[y%s.length],r[y%r.length]);else for(let y=0;y<c.length;++y){const x=wo(y,i,l),b=x.slice(-h);g.forEach(k=>b[k]=0);const w=Ts(b,h,p),S=x.slice(-d);m.forEach(k=>S[k]=0);const N=Ts(S,d,f);c[y]=n(s[w],r[N])}return[c,a]}}function ns(n){const{inputs:t,backend:e}=n,{real:s,imag:r}=t,o=e.data.get(s.dataId).values,a=e.data.get(r.dataId).values,i=e.makeTensorInfo(s.shape,"complex64");return e.data.get(i.dataId).complexTensorInfos={real:e.makeTensorInfo(s.shape,"float32",o),imag:e.makeTensorInfo(r.shape,"float32",a)},i}const zB={kernelName:Ec,backendName:"cpu",kernelFunc:ns};function fp(n,t,e="float32"){if("complex64"===e)return ns({inputs:{real:fp(n,t,"float32"),imag:fp(n,t,"float32")},backend:n});const s=mn(q(t),e);return n.makeTensorInfo(t,e,s)}function or(n){const{inputs:t,backend:e}=n,{x:s}=t;return e.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const BB={kernelName:Aa,backendName:"cpu",kernelFunc:or};function Yo(n){const{inputs:t,backend:e}=n,{input:s}=t,r=e.data.get(s.dataId).complexTensorInfos.real,o=e.data.get(r.dataId).values;return e.makeTensorInfo(r.shape,r.dtype,o)}const VB={kernelName:ch,backendName:"cpu",kernelFunc:Yo};function IC(n,t,e,s){if("int32"===s)return[t,"int32",Int32Array.from(n)];if("bool"===s){const r=Pr([0],e),[o,a]=Wt((i,l)=>i!==l?1:0)(t,[],n,r,"bool");return[a,"bool",o]}throw new Error(`Error in Cast: failed to cast ${e} to ${s}`)}function oo(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{dtype:o}=s;if("complex64"===o){if("complex64"===r.dtype)return or({inputs:{x:r},backend:e});const c=fp(e,r.shape,r.dtype),h=oo({inputs:{x:r},backend:e,attrs:{dtype:"float32"}}),d=ns({inputs:{real:h,imag:c},backend:e});return e.disposeIntermediateTensorInfo(c),e.disposeIntermediateTensorInfo(h),d}if("complex64"===r.dtype){const c=Yo({inputs:{input:r},backend:e}),h=oo({inputs:{x:c},backend:e,attrs:{dtype:o}});return e.disposeIntermediateTensorInfo(c),h}if(!Jp(r.dtype,o)){const c=or({inputs:{x:r},backend:e});return{dataId:c.dataId,shape:c.shape,dtype:o}}const a=e.data.get(r.dataId).values,[i,l,u]=IC(a,r.shape,r.dtype,o);return e.makeTensorInfo(i,l,u)}const WB={kernelName:xa,backendName:"cpu",kernelFunc:oo};function rn(n,t,e,s){return null==e?({inputs:r,backend:o})=>{const{a,b:i}=r,l=o;Ne([a,i],n);const u=l.data.get(a.dataId).values,c=l.data.get(i.dataId).values,h="string"===a.dtype?Ir(u):u,d="string"===a.dtype?Ir(c):c,p=s||a.dtype,[f,g]=t(a.shape,i.shape,h,d,p);return l.makeTensorInfo(g,p,f)}:({inputs:r,backend:o})=>{const{a,b:i}=r,l=o;if("complex64"===a.dtype||"complex64"===i.dtype){const u=oo({inputs:{x:a},backend:l,attrs:{dtype:"complex64"}}),c=l.data.get(u.dataId),d=c.complexTensorInfos.imag,p=l.data.get(c.complexTensorInfos.real.dataId).values,f=l.data.get(d.dataId).values,g=oo({inputs:{x:i},backend:l,attrs:{dtype:"complex64"}}),m=l.data.get(g.dataId),x=m.complexTensorInfos.imag,b=l.data.get(m.complexTensorInfos.real.dataId).values,w=l.data.get(x.dataId).values,[S,N,k]=e(a.shape,i.shape,p,f,b,w),T=l.makeTensorInfo(k,"float32",S),$=l.makeTensorInfo(k,"float32",N),R=ns({inputs:{real:T,imag:$},backend:l});return l.disposeIntermediateTensorInfo(u),l.disposeIntermediateTensorInfo(g),l.disposeIntermediateTensorInfo(T),l.disposeIntermediateTensorInfo($),R}{const u=l.data.get(a.dataId).values,c=l.data.get(i.dataId).values,h=s||a.dtype,[d,p]=t(a.shape,i.shape,u,c,h);return l.makeTensorInfo(p,h,d)}}}function cx(n){return(t,e,s,r,o,a)=>{const i=Ve(t,e),l=q(i),u=i.length,c=Ae(i),h=on("float32",l),d=on("float32",l),p=Eo(t,i),f=Eo(e,i),g=Nr(s,r),m=Nr(o,a),y=t.length,x=Ae(t),b=e.length,w=Ae(e);if(p.length+f.length===0)for(let S=0;S<h.length;S++){const N=S%g.length,k=S%m.length,T=n(g[2*N],g[2*N+1],m[2*k],m[2*k+1]);h[S]=T.real,d[S]=T.imag}else for(let S=0;S<h.length;S++){const N=wo(S,u,c),k=N.slice(-y);p.forEach(V=>k[V]=0);const T=Ts(k,y,x),$=N.slice(-b);f.forEach(V=>$[V]=0);const R=Ts($,b,w),M=n(g[2*T],g[2*T+1],m[2*R],m[2*R+1]);h[S]=M.real,d[S]=M.imag}return[h,d,i]}}const kC=Wt((n,t)=>n+t),UB=cx((n,t,e,s)=>({real:n+e,imag:t+s})),Fi=rn(vo,kC,UB),GB={kernelName:vo,backendName:"cpu",kernelFunc:Fi};function hx(n,t,e,s,r){const o=q(s),a=mn(r,e);for(let i=0;i<n.length;i++){const l=n[i];if(l<0)throw new Error("Input x must be non-negative!");l>=r||(a[l]+=o>0?t[i]:1)}return a}function TC(n,t,e,s=!1){const r=n.shape[0],o=n.shape[1],a=Ge([r,e],t.dtype);for(let i=0;i<r;i++)for(let l=0;l<o;l++){const u=n.get(i,l);if(u<0)throw new Error("Input x must be non-negative!");u>=e||a.set(s?1:t.size>0?a.get(i,u)+t.get(i,l):a.get(i,u)+1,i,u)}return a}const $C=Wt((n,t)=>n&t),HB=rn(sl,$C),jB={kernelName:sl,backendName:"cpu",kernelFunc:HB};function ar(n){return(t,e,s)=>{const r=Ot(e,t.length);for(let o=0;o<t.length;++o)r[o]=n(t[o],s);return r}}function mt(n,t,e){return ao(n,ar(t),e)}function ao(n,t,e){return({inputs:s,attrs:r,backend:o})=>{const{x:a}=s;Ne(a,n);const i=o,l=i.data.get(a.dataId).values;let u;if("string"===a.dtype){if(!Array.isArray(l))throw new Error("String tensor's value was not an instance of Array");u=Ir(l)}else u=l;const c=e||a.dtype,h=t(u,c,r);return i.makeTensorInfo(a.shape,c,h)}}const EC=ar(n=>Math.ceil(n)),KB=ao(ba,EC),qB={kernelName:ba,backendName:"cpu",kernelFunc:KB};function _C(n,t,e,s){const r=Ot(e,q(t));if(s&&"string"!==e){let o=0;n.forEach(a=>{const i=q(a.shape);r.set(a.vals,o),o+=i})}else{let o=0;n.forEach(a=>{const i="string"===e?Ir(a.vals):a.vals;let l=0;for(let u=0;u<a.shape[0];++u){const c=u*t[1]+o;for(let h=0;h<a.shape[1];++h)r[c+h]=i[l++]}o+=a.shape[1]})}return r}const AC=Wt((n,t)=>n===t?1:0),RC=rn(dl,AC,null,"bool"),XB={kernelName:dl,backendName:"cpu",kernelFunc:RC},DC=ar(n=>Math.exp(n)),FC=ao(ka,DC,"float32"),ZB={kernelName:ka,backendName:"cpu",kernelFunc:FC},OC=ar(n=>Math.expm1(n)),YB=ao(Ta,OC),QB={kernelName:Ta,backendName:"cpu",kernelFunc:YB},LC=ar(n=>Math.floor(n)),JB=ao($a,LC),eV={kernelName:$a,backendName:"cpu",kernelFunc:JB},PC=Wt((n,t)=>Math.floor(n/t)),tV=rn(Ea,PC,null,"int32"),nV={kernelName:Ea,backendName:"cpu",kernelFunc:tV};function MC(n,t,e,s,r,o,a,i,l){const u=Ge([s,o],e);for(let c=0;c<s;c++){const h=[];let d=0;for(let p=0;p<r;p++){const f=n[c*r+p];d+=f*a[p],h.push(f)}if(d<0||d>=l/o)throw new Error(`Invalid indices: ${h} does not index into ${i}`);for(let p=0;p<o;p++)u.values[c*o+p]=t.get(...t.indexToLoc(d*o+p))}return u}function zC(n,t,e){const s=Ge(e,n.dtype);for(let r=0;r<s.size;++r){const a=s.indexToLoc(r).slice(),u=t.locToIndex([a[0],a[2]]);a[2]=t.values[u];const c=n.locToIndex(a);0<=c&&c<n.values.length&&(s.values[r]=n.values[c])}return s}const BC=Wt((n,t)=>n>t?1:0),sV=rn(gl,BC,null,"bool"),rV={kernelName:gl,backendName:"cpu",kernelFunc:sV},VC=Wt((n,t)=>n>=t?1:0),oV=rn(_a,VC,null,"bool"),aV={kernelName:_a,backendName:"cpu",kernelFunc:oV},WC=Wt((n,t)=>n<t?1:0),iV=rn(xl,WC,null,"bool"),lV={kernelName:xl,backendName:"cpu",kernelFunc:iV},UC=Wt((n,t)=>n<=t?1:0),uV=rn(bl,UC,null,"bool"),cV={kernelName:bl,backendName:"cpu",kernelFunc:uV};function GC(n,t,e){const s=(t-n)/(e-1),r=mn(e,"float32");r[0]=n;for(let o=1;o<r.length;o++)r[o]=r[o-1]+s;return r}const HC=ar(n=>Math.log(n)),hV=ao(Oa,HC),dV={kernelName:Oa,backendName:"cpu",kernelFunc:hV};function jC(n,t,e,s){const r=on(s,q(e));for(let o=0;o<r.length;++o){const a=o*t;let i=n[a];for(let l=0;l<t;++l){const u=n[a+l];(Number.isNaN(u)||u>i)&&(i=u)}r[o]=i}return r}const KC=Wt((n,t)=>Math.max(n,t)),pV=rn(Pa,KC),fV={kernelName:Pa,backendName:"cpu",kernelFunc:pV},qC=Wt((n,t)=>Math.min(n,t)),mV=rn(Ma,qC),gV={kernelName:Ma,backendName:"cpu",kernelFunc:mV},dx=Wt((n,t)=>n*t),yV=cx((n,t,e,s)=>({real:n*e-t*s,imag:n*s+t*e})),mp=rn(Ba,dx,yV),xV={kernelName:Ba,backendName:"cpu",kernelFunc:mp};function XC(n,t,e){const s=dr(-1,e);return dx([],t,s,n,e)}const wV={kernelName:_l,backendName:"cpu",kernelFunc:function bV(n){const{inputs:t,backend:e}=n,{x:s}=t;Ne(s,"neg");const r=e.data.get(s.dataId).values,[o,a]=XC(r,s.shape,s.dtype);return e.makeTensorInfo(a,s.dtype,o)}},ZC=Wt((n,t)=>n!==t?1:0),vV=rn(Al,ZC,null,"bool"),SV={kernelName:Al,backendName:"cpu",kernelFunc:vV};function px(n,t,e,s,r){const o=t.length,a=q(t),i=Ae(t),l=Ae(r),u=on(e,q(r));for(let c=0;c<a;++c){const h=wo(c,o,i),d=new Array(h.length);for(let f=0;f<d.length;f++)d[f]=h[s[f]];u[Ts(d,o,l)]=n[c]}return u}function jn(n){const{inputs:t,attrs:e,backend:s}=n,{x:r}=t,{perm:o}=e;Ne(r,"transpose");const i=new Array(r.shape.length);for(let h=0;h<i.length;h++)i[h]=r.shape[o[h]];const u=px(s.data.get(r.dataId).values,r.shape,r.dtype,o,i);return{dataId:s.write(u,i,r.dtype),shape:i,dtype:r.dtype}}const CV={kernelName:So,backendName:"cpu",kernelFunc:jn};function YC(n,t,e,s){const[r,o]=cn(n,s),a=Pn(t,"int32"),i=mn(q(r),a),l=q(o);for(let u=0;u<i.length;++u){const c=u*l;let h=1;for(let d=0;d<l;++d)h*=e[c+d];i[u]=h}return{outVals:i,outShape:r,outDtype:a}}const IV={kernelName:Pl,backendName:"cpu",kernelFunc:function NV(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s;Ne(r,"prod");const i=r.shape.length,l=je(o,r.shape),u=_t(l,i);let c=l,h=r;const d=[];null!=u&&(h=jn({inputs:{x:r},backend:e,attrs:{perm:u}}),d.push(h),c=Bt(c.length,i));const p=e.data.get(h.dataId).values,{outVals:f,outShape:g,outDtype:m}=YC(h.shape,h.dtype,p,c);let y=g;return a&&(y=zt(g,l)),d.forEach(x=>e.disposeIntermediateTensorInfo(x)),e.makeTensorInfo(y,m,f)}};function QC(n,t){const e=n.slice(0,t);for(;e.length<t;)e.push(1);for(let s=t;s<n.length;s++)e[t-1]*=n[s];return e}function JC(n,t,e,s,r,o,a,i){if(0===n.length)throw new Error("paramsNestedSplits must be non empty");if(0===t[0].length)throw new Error("Split tensors must not be scalars");if(function kV(n,t,e){n.forEach((s,r)=>{if(s<0||s>=e){const o=wo(r,t.length,Ae(t)).join(",");throw new Error(`indices[${o}] = ${s} is not in [0, ${e})`)}})}(o,a,t[0][0]-1),0===s.length)throw new Error("params.rank must be nonzero");const u=s[0],{outSplits:c,valueSlices:h,numValues:d}=function $V(n,t,e,s){const r=[];let o=0;const i=new Array(t.length-1+e.length).fill(null).map(()=>[0]);!function TV(n,t){for(let e=0;e<n.length;++e){const s=n[e],r=e===n.length-1?t:n[e+1].length;if(0===s.length)throw new Error("Ragged splits may not be empty");if(s[0]<0)throw new Error("Ragged splits must be non-negative");if(s[s.length-1]>r)throw new Error("Ragged splits must not point past values");for(let o=1;o<s.length;++o)if(s[o-1]>s[o])throw new Error("Ragged splits must be sorted in ascending order")}}(e,s);let l=1;for(let u=0;u<t.length-1;++u){l*=t[u];const c=t[u+1];for(let h=1;h<l+1;++h)i[u].push(h*c)}for(let u=0;u<n.length;++u){let c=n[u],h=n[u]+1;for(let d=0;d<e.length;++d){const p=e[d],f=d+t.length-1;if(f>=0){const g=i[f],m=g[g.length-1]-p[c];for(let y=c;y<h;++y)i[f].push(p[y+1]+m)}c=p[c],h=p[h]}h!==c&&(r.push([c,h]),o+=h-c)}return{outSplits:i,valueSlices:r,numValues:o}}(o,a,n,u),p=function EV(n){const t=[];for(let e=0;e<n.length;++e){const r=Ot("int32",n[e].length);t.push(r),n[e].forEach((o,a)=>r[a]=o)}return t}(c),f=function AV(n,t,e,s,r){const o=t.slice();o[0]=r;const a=Ot(e,q(o)),i=n.length;return function _V(n,t,e,s,r,o){const a=QC(t,2)[1],i=QC(o,2)[1];let l=0;for(const u of e)for(let c=u[0];c<u[1];++c){for(let h=0;h<s;++h)r[l*i+h]=n[c*a+h];++l}}(n,t,s,0===i?0:i/t[0],a,o),[a,o]}(e,s,r,h,d);return[p,f[0],f[1]]}const eN=2147483647;function tN(n,t,e,s,r,o,a){if(t.length>1)throw new Error("starts must be a scalar or vector");if(r.length>1)throw new Error("limits must be a scalar or vector");if(a.length>1)throw new Error("deltas must be a scalar or vector");const i=0===t.length,l=0===r.length,u=0===a.length,c=[];i||c.push(t[0]),l||c.push(r[0]),u||c.push(a[0]);for(let m=1;m<c.length;++m)if(c[m]!==c[m-1])throw new Error("starts, limits, and deltas must have the same shape");const h=0===c.length?1:c[0],d=Ot("int32",h+1);d[0]=0;for(let m=0;m<h;++m){const y=i?n[0]:n[m],x=l?s[0]:s[m],b=u?o[0]:o[m];if(0===b)throw new Error("Requires delta != 0");let w;if(b>0&&x<y||b<0&&x>y)w=0;else if(w=Math.ceil(Math.abs((x-y)/b)),w>eN)throw new Error(`Requires ((limit - start) / delta) <= ${eN}`);d[m+1]=d[m]+w}const f=Ot(e,d[h]);let g=0;for(let m=0;m<h;++m){const y=d[m+1]-d[m];let x=i?n[0]:n[m];const b=u?o[0]:o[m];for(let w=0;w<y;++w)f[g++]=x,x+=b}return[d,f]}var Is=er;class gp{constructor(t,e,s,r,o,a,i,l,u,c){this.shape=t,this.shapeShape=e,this.values=s,this.valuesShape=r,this.valuesDType=o,this.defaultValue=a,this.defaultValueShape=i,this.rowPartitionValues=l,this.rowPartitionValuesShapes=u,this.rowPartitionTypes=Pw(c),this.raggedRank=Mw(this.rowPartitionTypes)}getRowPartitionTypeByDimension(t){return this.rowPartitionTypes[0]===Is.FIRST_DIM_SIZE?this.rowPartitionTypes[t+1]:this.rowPartitionTypes[t]}getRowPartitionTensor(t){return this.rowPartitionTypes[0]===Is.FIRST_DIM_SIZE?this.rowPartitionValues[t+1]:this.rowPartitionValues[t]}getMaxWidth(t){const e=this.getRowPartitionTensor(t-1);switch(this.getRowPartitionTypeByDimension(t-1)){case Is.VALUE_ROWIDS:return gp.getMaxWidthValueRowID(e);case Is.ROW_SPLITS:return gp.getMaxWidthRowSplit(e);default:throw new Error(`Cannot handle partition type ${Is[this.getRowPartitionTypeByDimension(t-1)]}`)}}static getMaxWidthRowSplit(t){const e=t.length;if(0===e||1===e)return 0;let s=0;for(let r=0;r<e-1;++r){const o=t[r+1]-t[r];o>s&&(s=o)}return s}static getMaxWidthValueRowID(t){const e=t.length;if(0===e)return 0;let s=0,r=t[0],o=0;for(let a=1;a<e;++a){const i=t[a];i!==r&&(r=i,o=Math.max(a-s,o),s=a)}return Math.max(e-s,o)}tensorShapeFromTensor(t,e,s=!0){if(0===e.length){if(-1===t[0])return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return sN(t,s)}calculateOutputSize(t){const e=this.valuesShape;zw(this.defaultValueShape,e);const r=this.tensorShapeFromTensor(this.shape,this.shapeShape),a=Lw(this.raggedRank,r,e);a[0]<0&&(a[0]=t);for(let i=1;i<=this.raggedRank;++i)a[i]<0&&(a[i]=this.getMaxWidth(i));return a}calculateFirstParentOutputIndex(t,e,s){const r=Math.min(t,s),o=[];let a=0;for(let i=0;i<r;++i,a+=e)o.push(a);for(let i=r;i<t;++i)o.push(-1);return C(o.length===t,()=>"Final length of result must be equal to firstDimension."),o}calculateOutputIndexRowSplit(t,e,s,r){const o=t.length,a=[];for(let i=0;i<o-1;++i){const l=t[i+1]-t[i];let u=Math.min(r,l),c=e[i];-1===c&&(u=0);for(let h=0;h<u;++h)a.push(c),c+=s;for(let h=0;h<l-u;++h)a.push(-1)}if(o>0&&a.length!==t[o-1])throw new Error("Invalid row split size.");return a}calculateOutputIndexValueRowID(t,e,s,r){const o=t.length,a=[];if(0===o)return[];let i=0,l=t[0];if(l>=e.length)throw new Error(`Got currentValueRowId=${l}, which is not less than ${e.length}`);let u=e[l];a.push(u);for(let c=1;c<o;++c){const h=t[c];if(h===l)u>=0&&(++i,i<r?u+=s:u=-1);else{if(i=0,l=h,h>=e.length)throw new Error(`Got nextValueRowId=${h} which is not less than ${e.length}`);u=e[h]}a.push(u)}if(a.length!==t.length)throw new Error("Invalid row ids.");return a}calculateOutputIndex(t,e,s,r){const o=this.getRowPartitionTensor(t),a=this.getRowPartitionTypeByDimension(t);switch(a){case Is.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(o,e,s,r);case Is.ROW_SPLITS:if(o.length-1>e.length)throw new Error(`Row partition size is greater than output size: ${o.length-1} > ${e.length}`);return this.calculateOutputIndexRowSplit(o,e,s,r);default:throw new Error(`Unsupported partition type: ${Is[a]}`)}}getFirstDimensionSize(){const t=this.rowPartitionValues[0];if(0===this.rowPartitionTypes.length)throw new Error("No row_partition_types given.");const e=this.rowPartitionTypes[0];switch(e){case Is.FIRST_DIM_SIZE:return t[0];case Is.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case Is.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error(`Cannot handle type ${Is[e]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");const e=this.getFirstDimensionSize(),s=this.calculateOutputSize(e),r=new Array(this.raggedRank+1);r[r.length-1]=1;for(let l=r.length-2;l>=0;--l)r[l]=r[l+1]*s[l+1];const o=sN(s,!1),a=Ot(this.valuesDType,q(o));if(r[0]*s[0]>0){let l=this.calculateFirstParentOutputIndex(e,r[0],s[0]);for(let u=1;u<=this.raggedRank;++u)l=this.calculateOutputIndex(u-1,l,r[u],s[u]);this.setOutput(this.raggedRank,l,a,o)}return[o,a]}setOutput(t,e,s,r){if(0===s.length)return;const o=this.values,a=s;let i=r.slice();i=i.slice(t+1);const l=q(i),u=e.length;let c=this.defaultValue;if(c.length!==l&&1!==c.length){const f=this.defaultValueShape;z(()=>{const g=F(c,f);c=Fo(g,i).dataSync()})}let h=0,d=0,p=0;for(let f=0;f<=u;++f){let g=f<u?e[f]:-1;if(g!==p){if(d<p){const m=o.subarray(h*l);nN(a.subarray(d*l),m,(p-d)*l)}if(f>=u&&(g=Math.floor(s.length/l)),g>p)if(1===this.defaultValue.length)a.subarray(p*l,g*l).fill(this.defaultValue[0]),p=g;else for(;g>p;)nN(a.slice(p*l),c,l),++p;g<0?(h=f+1,d=p):(h=f,d=p,p=d+1)}else++p}}}function nN(n,t,e){for(let s=0;s<e;s++)n[s]=t[s]}function sN(n,t){const e=[];for(let s of n){if(s<0){if(!t)throw new Error(`Dimension ${s} must be >= 0`);if(s<-1)throw new Error(`Dimension ${s} must be >= -1`);s=-1}e.push(s)}return e}function rN(n,t,e,s,r,o,a,i,l,u){return new gp(n,t,e,s,r,o,a,i,l,u).compute()}function oN(n,t,e,s){if(n===t||n<t&&e<0||t<n&&e>1)return mn(0,s);const l=mn(Math.abs(Math.ceil((t-n)/e)),s);t<n&&1===e&&(e=-1),l[0]=n;for(let u=1;u<l.length;u++)l[u]=l[u-1]+e;return l}const aN=ar(n=>1/Math.sqrt(n)),RV=ao(ja,aN),DV={kernelName:ja,backendName:"cpu",kernelFunc:RV};function Qo(n,t,e,s,r,o,a,i,l,u){const c=[s/r,r],h=n.values,d=t.values;if(0===s)return Ge(e,t.dtype);const p=l instanceof Ht?l:Ge(c,t.dtype);"string"==typeof l||"number"==typeof l?p.values.fill(l):"boolean"==typeof l&&p.values.fill(+l);for(let f=0;f<o;f++){const g=[];let m=0;for(let y=0;y<a;y++){const x=h[f*a+y];g.push(x),m+=x*i[y]}if(m<0||m>=s/r)throw new Error(`Invalid indices: ${g} does not index into ${e}`);for(let y=0;y<r;y++)u?p.values[m*r+y]+=d[f*r+y]:p.values[m*r+y]=0===t.rank?d[0]:d[f*r+y]}return p}const FV=ar(n=>1/(1+Math.exp(-n))),iN=mt(Ya,n=>1/(1+Math.exp(-n))),OV={kernelName:Ya,backendName:"cpu",kernelFunc:iN};function lN(n,t,e,s,r){const o=nm(s,t,e),a=q(e),i=Ae(s);if(o){const h=sm(t,i);return"string"===r?n.slice(h,h+a):n.subarray(h,h+a)}const u=Ge(s,r,"string"===r?Ir(n):n),c=Ge(e,r);for(let h=0;h<c.size;++h){const d=c.indexToLoc(h),p=d.map((f,g)=>f+t[g]);c.set(u.get(...p),...d)}return"string"===r?iv(c.values):c.values}function Jo(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{begin:o,size:a}=s;Ne(r,"slice");const[i,l]=Kh(r,o,a);em(r,i,l);const c=lN(e.data.get(r.dataId).values,i,l,r.shape,r.dtype);return e.makeTensorInfo(l,r.dtype,c)}const LV={kernelName:Ul,backendName:"cpu",kernelFunc:Jo};function uN(n,t,e,s,r,o,a){const i=t[0],l=o[0],u=new Array(l),c=new Array(i),h=t[1];if(0===l){if(0!==i)throw new Error(qw(i));return[Ot(e,0),[0,h],Ot(r,0),u,c]}let d=!0,p=0;const f=new Array(l).fill(0);for(let m=0;m<i;++m){const y=n[m*h];if(y<0)throw new Error(Xw(m,y));if(y>=l)throw new Error(Zw(m,y,l));++f[y],d=d&&y>=p,p=y}let g=!0;for(let m=0;m<l;++m){const y=0===f[m];u[m]=y,g=g&&!y,f[m]=Math.max(f[m],1),m>0&&(f[m]+=f[m-1])}if(g&&d){const m=n,y=s;for(let x=0;x<i;++x)c[x]=x;return[m,[i,h],y,u,c]}{const m=f[l-1],y=Ot(e,m*h),x=Ot(r,m),b=new Array(l).fill(0);for(let w=0;w<i;++w){const S=n[w*h],k=(0===S?0:f[S-1])+b[S];b[S]++;for(let T=0;T<h;++T)y[k*h+T]=n[w*h+T];x[k]=s[w],c[w]=k}for(let w=0;w<l;++w)if(0===b[w]){const N=0===w?0:f[w-1];y[N*h+0]=w;for(let k=1;k<h;++k)y[N*h+k]=0;x[N]=a}return[y,[m,h],x,u,c]}}function cN(n,t,e,s,r){const o=q(s),a=t[0],i=r.length,l=[];let u=1,c=-1;for(let m=0;m<i;++m){const y=r[m];if(-1===y){if(-1!==c)throw new Error(Yw(c,m));c=m,l.push(1)}else{if(y<0)throw new Error(Qw(m,y));u*=y,l.push(y)}}if(-1!==c){if(u<=0)throw new Error("reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero");const m=Math.trunc(o/u);if(u*m!==o)throw new Error(ev(s,l));l[c]=m}if(q(l)!==o)throw new Error(tv(s,l));const d=s.length,p=[];if(d>0){p[d-1]=1;for(let m=d-2;m>=0;--m)p[m]=p[m+1]*s[m+1]}const f=[];if(i>0){f[i-1]=1;for(let m=i-2;m>=0;--m)f[m]=f[m+1]*l[m+1]}const g=Ot(e,a*i);for(let m=0;m<a;++m){let y=0;for(let x=0;x<d;++x)y+=n[m*d+x]*p[x];for(let x=0;x<i;++x)g[m*i+x]=Math.trunc(y/f[x]),y%=f[x]}return[g,[a,i],l]}function fx(n,t,e,s,r,o=!1,a=0){const i=s.length,l=[t[0],n.length/t[0]],u=l[1],h=i>0?r[i-1]+1:0;if(h<0)throw new Error("segment ids must be >= 0");const d=t.slice();d[0]=h;const f=Ot(e,d.reduce((b,w)=>b*w,1));if(0===i)return h>0&&f.fill(a),[f,d];if(h<=0)throw new Error("segment ids must be >= 0");let g=0,m=1,y=0,x=r[g];for(;;){let b=0;if(m<i){if(b=r[m],x===b){++m;continue}if(x>=b)throw new Error("segment ids are not increasing")}if(x<0||x>=h)throw new Error(sv(x,h));x>y&&f.fill(a,y*u,x*u);for(let w=g;w<m;++w){const S=s[w];if(S<0||S>=l[0])throw new Error(rv(w,s[w],l[0]));for(let N=0;N<u;N++)f[x*u+N]+=n[S*u+N]}if(o)for(let w=0;w<u;w++)f[x*u+w]/=m-g;if(g=m,++m,y=x+1,x=b,m>i)break}return y<h&&f.fill(a,y*u,h*u),[f,d]}const PV=ar(n=>Math.sqrt(n)),MV=mt(Ja,n=>Math.sqrt(n)),zV={kernelName:Ja,backendName:"cpu",kernelFunc:MV},hN=Wt((n,t)=>{const e=n-t;return e*e}),BV=rn(ei,hN),VV={kernelName:ei,backendName:"cpu",kernelFunc:BV},dN=ar((n,t)=>{const{pattern:e,replaceGlobal:s,rewrite:r}=t;return n.replace(new RegExp(e,s?"g":""),r)}),WV=ao(ql,dN),UV={kernelName:ql,backendName:"cpu",kernelFunc:WV};function pN(n,t,e,s){const r=Ge(n,t.dtype);for(let o=0;o<r.size;o++){const a=r.indexToLoc(o),i=new Array(a.length);for(let l=0;l<i.length;l++)i[l]=a[l]*e[l]+s[l];r.set(t.get(...i),...a)}return r}class GV{constructor(t,e,s,r,o,a){this.separator=js(t),this.nGramWidths=e,this.leftPad=js(s),this.rightPad=js(r),this.padWidth=o,this.preserveShort=a}getPadWidth(t){return Math.min(this.padWidth<0?t-1:this.padWidth,t-1)}getNumNGrams(t,e){const s=this.getPadWidth(e);return Math.max(0,t+2*s-e+1)}createNGrams(t,e,s,r,o,a){for(let i=0;i<o;++i){const l=this.getPadWidth(a),u=Math.max(0,l-i),c=Math.max(0,l-(o-(i+1))),h=a-(u+c),d=e+(u>0?0:i-l);let p=0;p+=u*this.leftPad.length;for(let x=0;x<h;++x)p+=t[d+x].length;p+=c*this.rightPad.length,p+=(u+c+h-1)*this.separator.length,s[r+i]=new Uint8Array(p);const g=s[r+i];let m=0;const y=x=>x.forEach(b=>g[m++]=b);for(let x=0;x<u;++x)y(this.leftPad),y(this.separator);for(let x=0;x<h-1;++x)y(t[d+x]),y(this.separator);if(h>0){y(t[d+h-1]);for(let x=0;x<c;++x)y(this.separator),y(this.rightPad)}else{for(let x=0;x<c-1;++x)y(this.rightPad),y(this.separator);y(this.rightPad)}}}compute(t,e){const s=t.length,r=e.length;if(r>0){let l=e[0];if(0!==l)throw new Error(`First split value must be 0, got ${l}`);for(let u=1;u<r;++u){let c=e[u]>=l;if(c=c&&e[u]<=s,!c)throw new Error(`Invalid split value ${e[u]}, must be in [${l}, ${s}]`);l=e[u]}if(l!==s)throw new Error(`Last split value must be data size. Expected ${s}, got ${l}`)}const o=r-1,a=Ot("int32",r);if(0===s||0===r){const l=new Array(s);for(let u=0;u<=o;++u)a[u]=0;return[l,a]}a[0]=0;for(let l=1;l<=o;++l){const u=e[l]-e[l-1];let c=0;this.nGramWidths.forEach(h=>{c+=this.getNumNGrams(u,h)}),this.preserveShort&&u>0&&0===c&&(c=1),a[l]=a[l-1]+c}const i=new Array(a[o]);for(let l=0;l<o;++l){const u=e[l];let c=a[l];if(this.nGramWidths.forEach(h=>{const p=this.getNumNGrams(e[l+1]-e[l],h);this.createNGrams(t,u,i,c,p,h),c+=p}),this.preserveShort&&c===a[l]){const h=e[l+1]-e[l];if(0===h)continue;this.createNGrams(t,u,i,c,1,h+2*this.padWidth)}}return[i,a]}}function fN(n,t,e,s,r,o,a,i){return new GV(e,s,r,o,a,i).compute(n,t)}function HV(n,t,e,s){if(!n.length)return;if(0===t.length){for(let o=0;o<n.length;++o)s.push(n.subarray(o,o+1));return}if(1===t.length){const o=t[0];let a=n.indexOf(o);for(;-1!==a;){const i=n.subarray(0,a);(!e||0!==i.length)&&s.push(i),a=(n=n.subarray(a+1)).indexOf(o)}return void((!e||0!==n.length)&&s.push(n))}let r=0;for(let o=0;o<n.length+1;o++)if(o===n.length||-1!==t.indexOf(n[o])){const a=n.subarray(r,o);(!e||0!==a.length)&&s.push(a),r=o+1}}function mN(n,t,e){const s=n.length,r=[];let o=0,a=0;const i=new Array(s);for(let d=0;d<s;++d){const p=r.length;HV(n[d],t,e,r);const f=r.length-p;i[d]=f,o+=f,a=Math.max(a,f)}const l=Ot("int32",2*o),u=new Array(o),c=[s,a];let h=0;for(let d=0;d<s;++d)for(let p=0;p<i[d];++p)l[2*h]=d,l[2*h+1]=p,u[h]=r[h],++h;return[l,u,c]}function gN(n,t){const e=Ot("int32",n.length);for(let s=0;s<n.length;++s)e[s]=kb(n[s]).modulo(t).getLowBitsUnsigned();return e}const yN=Wt((n,t)=>n-t),jV=cx((n,t,e,s)=>({real:n-e,imag:t-s})),mx=rn(ti,yN,jV),KV={kernelName:ti,backendName:"cpu",kernelFunc:mx};function xN(n,t){const e=new Array(n.rank);for(let r=0;r<e.length;r++)e[r]=n.shape[r]*t[r];const s=Ge(e,n.dtype);for(let r=0;r<s.values.length;++r){const o=s.indexToLoc(r),a=new Array(n.rank);for(let l=0;l<a.length;l++)a[l]=o[l]%n.shape[l];const i=n.locToIndex(a);s.values[r]=n.values[i]}return s}const ec=(n,t)=>{const e=t.value-n.value;return 0===e?n.index-t.index:e};function bN(n,t,e=0,s=n.length-1){for(;s>e;){if(s-e>600){const i=s-e+1,l=t-e+1,u=Math.log(i),c=.5*Math.exp(2*u/3),h=.5*Math.sqrt(u*c*(i-c)/i)*Math.sign(l-i/2);bN(n,t,Math.max(e,Math.floor(t-l*c/i+h)),Math.min(s,Math.floor(t+(i-l)*c/i+h)))}const r=n[t];let o=e,a=s;for(ur(n,e,t),ec(n[s],r)>0&&ur(n,e,s);o<a;){for(ur(n,o,a),o++,a--;ec(n[o],r)<0;)o+=1;for(;ec(n[a],r)>0;)a-=1}0===ec(n[e],r)?ur(n,e,a):(a+=1,ur(n,a,s)),a<=t&&(e=a+1),t<=a&&(s=a-1)}}function wN(n,t,e,s,r){const o=t[t.length-1],[a,i]=[n.length/o,o],l=on(e,a*s),u=on("int32",a*s);for(let h=0;h<a;h++){const d=h*i,p=n.subarray(d,d+i);let f=new Array(p.length);p.forEach((x,b)=>f[b]={value:x,index:b}),s<f.length&&(bN(f,s),f=f.slice(0,s)),r&&f.sort(ec);const g=h*s,m=l.subarray(g,g+s),y=u.subarray(g,g+s);for(let x=0;x<s;x++)m[x]=f[x].value,y[x]=f[x].index}const c=t.slice();return c[c.length-1]=s,[Ge(c,e,l),Ge(c,"int32",u)]}function vN(n,t,e,s){const r=je(t,e)[0],o=[1,e[0],1];for(let f=0;f<r;f++)o[0]*=e[f];o[1]=e[r];for(let f=r+1;f<e.length;f++)o[2]*=e[f];const a=new Map,i=new Int32Array(e[r]),l=new Ht(o,s,n),u=[],c=1===o[0]&&1===o[2];for(let f=0;f<e[r];f++){let g;if(c)g=n[f].toString();else{const y=[];for(let x=0;x<o[0];x++)for(let b=0;b<o[2];b++)y.push(l.get(x,f,b));g=y.join(",")}const m=a.get(g);if(null!=m)i[f]=m;else{const y=a.size;a.set(g,y),i[f]=y,u.push(f)}}const h=o.slice();h[1]=a.size;const d=new Ht(h,s);u.forEach((f,g)=>{for(let m=0;m<o[0];m++)for(let y=0;y<o[2];y++)d.set(l.get(m,f,y),m,g,y)});const p=e.slice();return p[r]=h[1],{outputValues:d.values,outputShape:p,indices:i}}const SN="4.13.0";Ff("cpu",()=>new CC,1);const CN=mt(Na,n=>n>=0?n:Math.exp(n)-1),qV={kernelName:Na,backendName:"cpu",kernelFunc:CN};function NN(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{alpha:o}=s;Ne([r],"leakyRelu");const a=q(r.shape),i=e.data.get(r.dataId).values,l=on("float32",a);for(let u=0;u<i.length;u++)l[u]=i[u]<0?o*i[u]:i[u];return e.makeTensorInfo(r.shape,"float32",l)}const XV={kernelName:yl,backendName:"cpu",kernelFunc:NN},ZV=Wt((n,t)=>n<0?t*n:n);function IN(n){const{inputs:t,backend:e}=n,{x:s,alpha:r}=t;Ne([s,r],"prelu");const o=e.data.get(s.dataId).values,a=e.data.get(r.dataId).values,[i,l]=ZV(s.shape,r.shape,o,a,"float32");return e.makeTensorInfo(l,"float32",i)}const YV={kernelName:Ll,backendName:"cpu",kernelFunc:IN},kN=mt(Ua,n=>Math.max(0,n)),QV={kernelName:Ua,backendName:"cpu",kernelFunc:kN},TN=mt(Ga,n=>Math.min(Math.max(0,n),6)),JV={kernelName:Ga,backendName:"cpu",kernelFunc:TN};function yp(n,t,e,s,r){if("linear"===e)return or({inputs:{x:t},backend:n});if("relu"===e)return kN({inputs:{x:t},backend:n});if("elu"===e)return CN({inputs:{x:t},backend:n});if("relu6"===e)return TN({inputs:{x:t},backend:n});if("prelu"===e)return IN({inputs:{x:t,alpha:s},backend:n});if("leakyrelu"===e)return NN({inputs:{x:t},backend:n,attrs:{alpha:r}});if("sigmoid"===e)return iN({inputs:{x:t},backend:n});throw new Error(`Activation ${e} has not been implemented for the CPU backend.`)}function Ct(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{shape:o}=s,a=q(r.shape),i=Qp(o,a),l=q(i);C(a===l,()=>`The new shape (${i}) has ${l} elements and the old shape (${r.shape}) has ${a} elements. The new shape and old shape must have the same number of elements.`),e.incRef(r.dataId);const u=e.data.get(r.dataId);if(null!=u.complexTensorInfos){const h=u.complexTensorInfos.imag;u.complexTensorInfos.real.shape=i,h.shape=i}return{dataId:r.dataId,shape:i,dtype:r.dtype}}const eW={kernelName:Ml,backendName:"cpu",kernelFunc:Ct};function $N(n){const{inputs:t,backend:e,attrs:s}=n,{a:r,b:o}=t,{transposeA:a,transposeB:i}=s;Ne([r,o],"matMul");const l=r.shape.length,u=o.shape.length,c=a?r.shape[l-2]:r.shape[l-1],h=i?o.shape[u-1]:o.shape[u-2],d=a?r.shape[l-1]:r.shape[l-2],p=i?o.shape[u-2]:o.shape[u-1],f=r.shape.slice(0,-2),g=o.shape.slice(0,-2),m=q(f),y=q(g),b=Ve(r.shape.slice(0,-2),o.shape.slice(0,-2)).concat([d,p]);C(c===h,()=>`Error in matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${r.shape} and ${o.shape} and transposeA=${a} and transposeB=${i} must match.`);const S=i?[y,p,h]:[y,h,p],N=Ct({inputs:{x:r},backend:e,attrs:{shape:a?[m,c,d]:[m,d,c]}}),k=Ct({inputs:{x:o},backend:e,attrs:{shape:S}}),T=a?N.shape[1]:N.shape[2],$=a?N.shape[2]:N.shape[1],R=i?k.shape[1]:k.shape[2],M=Math.max(m,y),V=e.data.get(N.dataId).values,W=e.data.get(k.dataId).values,H=Ae(N.shape),K=Ae(k.shape),[U,Y,X]=a?[H[0],1,H[1]]:[H[0],H[1],1],[Q,re,ae]=i?[1,K[1],K[0]]:[K[1],1,K[0]],j=$*R,J=Ge([M,$,R],N.dtype),ue=J.values,le=e.blockSize;for(let pe=0;pe<M;pe++){const xe=pe%m,Ee=pe%y;for(let Re=0;Re<$;Re+=le){const Pe=Math.min(Re+le,$);for(let ze=0;ze<R;ze+=le){const Ze=Math.min(ze+le,R);for(let ct=0;ct<T;ct+=le){const wt=Math.min(ct+le,T);for(let pt=Re;pt<Pe;pt++)for(let xt=ze;xt<Ze;xt++){let Dt=0;for(let kt=ct;kt<wt;kt++)Dt+=V[xe*U+pt*Y+kt*X]*W[kt*Q+xt*re+Ee*ae];ue[pe*j+(pt*R+xt)]+=Dt}}}}}return e.disposeIntermediateTensorInfo(N),e.disposeIntermediateTensorInfo(k),e.makeTensorInfo(b,J.dtype,J.values)}const tW={kernelName:tl,backendName:"cpu",kernelFunc:$N},sW={kernelName:Ql,backendName:"cpu",kernelFunc:function nW(n){const{inputs:t,backend:e,attrs:s}=n,{a:r,b:o,bias:a,preluActivationWeights:i}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;let d,p,f;const g=[];d=$N({inputs:{a:r,b:o},attrs:{transposeA:l,transposeB:u},backend:e}),a&&(p=Fi({inputs:{a:d,b:a},backend:e}),g.push(d),d=p),c&&(f=yp(e,d,c,i,h),g.push(d),d=f);for(const y of g)e.disposeIntermediateTensorInfo(y);return d}},rW=mt(ha,n=>Math.acos(n)),oW={kernelName:ha,backendName:"cpu",kernelFunc:rW},aW=mt(da,n=>Math.acosh(n)),iW={kernelName:da,backendName:"cpu",kernelFunc:aW},uW={kernelName:Zi,backendName:"cpu",kernelFunc:function lW(n){const{inputs:t,backend:e}=n,s=t;Ne(t,"addN");const r=s.map(i=>e.data.get(i.dataId).values),o=Ge(s[0].shape,s[0].dtype),a=o.values;for(let i=0;i<s.length;i++){const l=r[i];for(let u=0;u<a.length;u++)a[u]+=l[u]}return e.makeTensorInfo(o.shape,o.dtype,o.values)}},hW={kernelName:Cc,backendName:"cpu",kernelFunc:function cW(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s;Ne(r,"all");const i=je(o,r.shape);let l=i;const u=_t(l,r.shape.length);let c=r;null!=u&&(c=jn({inputs:{x:r},backend:e,attrs:{perm:u}}),l=Bt(l.length,r.shape.length)),bn("all",l,c.shape.length);const[h,d]=cn(c.shape,l),p=q(d),f=mn(q(h),c.dtype),g=e.data.get(c.dataId).values;for(let y=0;y<f.length;++y){const x=y*p;let b=g[x];for(let w=0;w<p;++w)b=b&&g[x+w];f[y]=b}null!=u&&e.disposeIntermediateTensorInfo(c);const m=e.makeTensorInfo(h,c.dtype,f);if(a){const x=Ct({inputs:{x:m},backend:e,attrs:{shape:zt(h,i)}});return e.disposeIntermediateTensorInfo(m),x}return m}},pW={kernelName:Nc,backendName:"cpu",kernelFunc:function dW(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s;Ne(r,"any");const i=je(o,r.shape);let l=i;const u=_t(l,r.shape.length);let c=r;null!=u&&(c=jn({inputs:{x:r},backend:e,attrs:{perm:u}}),l=Bt(l.length,r.shape.length)),bn("any",l,c.shape.length);const[h,d]=cn(c.shape,l),p=q(d),f=mn(q(h),c.dtype),g=e.data.get(c.dataId).values;for(let y=0;y<f.length;++y){const x=y*p;let b=g[x];for(let w=0;w<p;++w)b=b||g[x+w];f[y]=b}null!=u&&e.disposeIntermediateTensorInfo(c);const m=e.makeTensorInfo(h,c.dtype,f);if(a){const x=Ct({inputs:{x:m},backend:e,attrs:{shape:zt(h,i)}});return e.disposeIntermediateTensorInfo(m),x}return m}},mW={kernelName:Yi,backendName:"cpu",kernelFunc:function fW(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o}=s;Ne(r,"argMax");let a=je(o,r.shape);const i=_t(a,r.shape.length);let l=r;const u=[];null!=i&&(l=jn({inputs:{x:r},backend:e,attrs:{perm:i}}),u.push(l),a=Bt(a.length,l.shape.length)),a=[a[0]],bn("argMax",a,l.shape.length);const[c,h]=cn(l.shape,a),p=mn(q(c),"int32"),f=q(h),g=e.data.get(l.dataId).values;for(let m=0;m<p.length;++m){const y=m*f;let x=g[y],b=0;for(let w=0;w<f;++w){const S=g[y+w];S>x&&(x=S,b=w)}p[m]=b}return u.forEach(m=>e.disposeIntermediateTensorInfo(m)),e.makeTensorInfo(c,"int32",p)}},yW={kernelName:Qi,backendName:"cpu",kernelFunc:function gW(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o}=s;Ne(r,"argMin");let a=je(o,r.shape);const i=_t(a,r.shape.length);let l=r;const u=[];null!=i&&(l=jn({inputs:{x:r},backend:e,attrs:{perm:i}}),u.push(l),a=Bt(a.length,l.shape.length)),a=[a[0]],bn("argMin",a,l.shape.length);const[c,h]=cn(l.shape,a),p=mn(q(c),"int32"),f=q(h),g=e.data.get(l.dataId).values;for(let m=0;m<p.length;++m){const y=m*f;let x=g[y],b=0;for(let w=0;w<f;++w){const S=g[y+w];S<x&&(x=S,b=w)}p[m]=b}return u.forEach(m=>e.disposeIntermediateTensorInfo(m)),e.makeTensorInfo(c,"int32",p)}},xW=mt(pa,n=>Math.asin(n)),bW={kernelName:pa,backendName:"cpu",kernelFunc:xW},wW=mt(fa,n=>Math.asinh(n)),vW={kernelName:fa,backendName:"cpu",kernelFunc:wW},SW=mt(ma,n=>Math.atan(n)),CW={kernelName:ma,backendName:"cpu",kernelFunc:SW},NW=Wt((n,t)=>Math.atan2(n,t)),IW=rn(ya,NW),kW={kernelName:ya,backendName:"cpu",kernelFunc:IW},TW=mt(ga,n=>Math.atanh(n)),$W={kernelName:ga,backendName:"cpu",kernelFunc:TW};function gx(n,t,e,s,r,o){const a=r.strideHeight,i=r.strideWidth,l=r.dilationHeight,u=r.dilationWidth,c=r.effectiveFilterHeight,h=r.effectiveFilterWidth,d=r.padInfo.top,p=r.padInfo.left,f="max"===o?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,g=Ge(r.outShape,e),m=g.values,y=r.outShape[1]*r.outShape[2]*r.outShape[3],x=r.outShape[2]*r.outShape[3],b=r.outShape[3];for(let w=0;w<r.batchSize;++w){const S=w*y,N=w*s[0];for(let k=0;k<r.inChannels;++k)for(let T=0;T<r.outHeight;++T){const $=T*a-d,R=Math.max(0,$),M=Math.min(r.inHeight,c+$),V=S+T*x;for(let W=0;W<r.outWidth;++W){const H=W*i-p,K=Math.max(0,H),U=Math.min(r.inWidth,h+H);let Y=f,X=0,Q=0;for(let ae=R;ae<M;ae+=l){const j=N+ae*s[1];for(let J=K;J<U;J+=u){const le=n[j+J*s[2]+k];"max"===o&&le>Y?Y=le:"avg"===o&&(X+=le,Q++)}if(isNaN(Y))break}m[V+W*b+k]="avg"===o?X/Q:Y}}}return g}function EN(n,t,e,s,r=!1,o=!1){const a=Ge(s.outShape,"int32"),i=s.strideHeight,l=s.strideWidth,u=s.dilationHeight,c=s.dilationWidth,h=s.effectiveFilterHeight,d=s.effectiveFilterWidth,p=s.padInfo.top,f=s.padInfo.left,g=Ge(t,e,n);for(let m=0;m<s.batchSize;++m)for(let y=0;y<s.inChannels;++y)for(let x=0;x<s.outHeight;++x){const b=x*i-p;let w=b;for(;w<0;)w+=u;const S=Math.min(s.inHeight,h+b);for(let N=0;N<s.outWidth;++N){const k=N*l-f;let T=k;for(;T<0;)T+=c;const $=Math.min(s.inWidth,d+k);let R=Number.NEGATIVE_INFINITY,M=-1;for(let V=w;V<S;V+=u){const W=V-b;for(let H=T;H<$;H+=c){const K=H-k,U=g.get(m,V,H,y);U>R&&(R=U,M=r?o?((m*s.inHeight+V)*s.inWidth+H)*s.inChannels+y:(V*s.inWidth+H)*s.inChannels+y:W*d+K)}}a.set(M,m,x,N,y)}}return a}function _N(n,t,e,s,r,o){const a=r.strideDepth,i=r.strideHeight,l=r.strideWidth,u=r.dilationDepth,c=r.dilationHeight,h=r.dilationWidth,d=r.effectiveFilterDepth,p=r.effectiveFilterHeight,f=r.effectiveFilterWidth,g=r.padInfo.front,m=r.padInfo.top,y=r.padInfo.left,x="max"===o?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,b=Ge(r.outShape,e),w=b.values,S=r.outShape[1]*r.outShape[2]*r.outShape[3]*r.outShape[4],N=r.outShape[2]*r.outShape[3]*r.outShape[4],k=r.outShape[3]*r.outShape[4],T=r.outShape[4];for(let $=0;$<r.batchSize;++$){const R=$*S,M=$*s[0];for(let V=0;V<r.inChannels;++V)for(let W=0;W<r.outDepth;++W){const H=W*a-g;let K=H;for(;K<0;)K+=u;const U=Math.min(r.inDepth,d+H),Y=R+W*N;for(let X=0;X<r.outHeight;++X){const Q=X*i-m;let re=Q;for(;re<0;)re+=c;const ae=Math.min(r.inHeight,p+Q),j=Y+X*k;for(let J=0;J<r.outWidth;++J){const ue=J*l-y;let le=ue;for(;le<0;)le+=h;const pe=Math.min(r.inWidth,f+ue),xe=j+J*T;let Ee=x,Re=0,Pe=0;for(let Ze=K;Ze<U;Ze+=u){const ct=M+Ze*s[1];for(let wt=re;wt<ae;wt+=c){const pt=ct+wt*s[2];for(let xt=le;xt<pe;xt+=h){const kt=n[pt+xt*s[3]+V];if("max"===o&&kt>Ee?Ee=kt:"avg"===o&&(Re+=kt,Pe++),isNaN(Ee))break}if(isNaN(Ee))break}if(isNaN(Ee))break}w[xe+V]="avg"===o?Re/Math.max(Pe,1):Ee}}}}return b}const AW={kernelName:Ji,backendName:"cpu",kernelFunc:function _W(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t;Ne(r,"avgPool");const{filterSize:o,strides:a,pad:i,dimRoundingMode:l}=s;C(xn(a,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${a} and dilations '1'`);const c=bs(r.shape,o,a,1,i,l);let h;if(1===c.filterWidth&&1===c.filterHeight&&Ye(c.inShape,c.outShape))h=or({inputs:{x:r},backend:e});else{const d=e.data.get(r.dataId).values,p=Ae(r.shape),f=gx(d,0,r.dtype,p,c,"avg");h=e.makeTensorInfo(c.outShape,r.dtype,f.values)}return h}},DW={kernelName:el,backendName:"cpu",kernelFunc:function RW(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{filterSize:o,strides:a,pad:i,dimRoundingMode:l,dataFormat:u}=s;Ne(r,"avgPool3d");const c=xr(r.shape,o,a,1,i,l,u),d=_N(e.data.get(r.dataId).values,0,r.dtype,Ae(r.shape),c,"avg");return e.makeTensorInfo(d.shape,"float32",d.values)}},OW={kernelName:kc,backendName:"cpu",kernelFunc:function FW(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o}=t,{filterSize:a,strides:i,pad:l,dimRoundingMode:u}=s;Ne([r,o],"avgPool3DGrad");const c=xr(o.shape,a,i,1,l,u),h=c.strideDepth,d=c.strideHeight,p=c.strideWidth,f=c.filterDepth,g=c.filterHeight,m=c.filterWidth,y=c.dilationDepth,x=c.dilationHeight,b=c.dilationWidth,w=c.effectiveFilterDepth,S=c.effectiveFilterHeight,N=c.effectiveFilterWidth,k=w-1-c.padInfo.front,T=N-1-c.padInfo.left,$=S-1-c.padInfo.top,R=Ge(o.shape,"float32"),M=1/(f*g*m),V=e.bufferSync(r);for(let W=0;W<c.batchSize;++W)for(let H=0;H<c.inChannels;++H)for(let K=0;K<c.inDepth;++K)for(let U=0;U<c.inHeight;++U)for(let Y=0;Y<c.inWidth;++Y){const X=K-k,Q=U-$,re=Y-T;let ae=0;for(let j=0;j<w;j+=y){const J=(X+j)/h;if(!(J<0||J>=c.outDepth||Math.floor(J)!==J))for(let ue=0;ue<S;ue+=x){const le=(Q+ue)/d;if(!(le<0||le>=c.outHeight||Math.floor(le)!==le))for(let pe=0;pe<N;pe+=b){const xe=(re+pe)/p;xe<0||xe>=c.outWidth||Math.floor(xe)!==xe||(ae+=V.get(W,J,le,xe,H))}}}R.set(ae*M,W,K,U,Y,H)}return e.makeTensorInfo(R.shape,R.dtype,R.values)}},PW={kernelName:Ic,backendName:"cpu",kernelFunc:function LW(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o}=t,a=o;Ne([r,o],"avgPoolGrad");const{filterSize:i,strides:l,pad:u}=s,c=bs(a.shape,i,l,1,u),h=c.strideHeight,d=c.strideWidth,p=c.filterHeight,f=c.filterWidth,g=c.dilationHeight,m=c.dilationWidth,y=c.effectiveFilterHeight,x=c.effectiveFilterWidth,b=x-1-c.padInfo.left,w=y-1-c.padInfo.top,S=Ge(a.shape,"float32"),N=1/(p*f),k=e.data.get(r.dataId).values,T=Ge(r.shape,"float32",k);for(let $=0;$<c.batchSize;++$)for(let R=0;R<c.inChannels;++R)for(let M=0;M<c.inHeight;++M)for(let V=0;V<c.inWidth;++V){const W=M-w,H=V-b;let K=0;for(let U=0;U<y;U+=g){const Y=(W+U)/h;if(!(Y<0||Y>=c.outHeight||Math.floor(Y)!==Y))for(let X=0;X<x;X+=m){const Q=(H+X)/d;Q<0||Q>=c.outWidth||Math.floor(Q)!==Q||(K+=T.get($,Y,Q,R))}}S.set(K*N,$,M,V,R)}return e.makeTensorInfo(S.shape,S.dtype,S.values)}},zW={kernelName:fl,backendName:"cpu",kernelFunc:function MW(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,scale:o,offset:a,mean:i,variance:l}=t;C(i.shape.length===l.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),C(null==a||i.shape.length===a.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),C(null==o||i.shape.length===o.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks."),Ne([r,i,l,o,a],"batchNorm");let{varianceEpsilon:u}=s;null==u&&(u=.001);const c=e.data.get(r.dataId).values,h=e.data.get(i.dataId).values,d=e.data.get(l.dataId).values,p=o?e.data.get(o.dataId).values:new Float32Array([1]),f=a?e.data.get(a.dataId).values:new Float32Array([0]),g=new Float32Array(c.length),m=f.length,y=p.length,x=d.length,b=h.length;let w=0,S=0,N=0,k=0;for(let T=0;T<c.length;++T)g[T]=f[w++]+(c[T]-h[S++])*p[N++]/Math.sqrt(d[k++]+u),w>=m&&(w=0),S>=b&&(S=0),N>=y&&(N=0),k>=x&&(k=0);return e.makeTensorInfo(r.shape,r.dtype,g)}},VW={kernelName:nl,backendName:"cpu",kernelFunc:function BW(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{blockShape:o,crops:a}=s;Ne([r],"batchToSpaceND");const i=o.reduce((y,x)=>y*x),l=Du(r.shape,o,i),u=Fu(l.length,o.length),c=Ou(r.shape,o,i),h=Ng(a,o.length),d=Ig(c,a,o.length),p=Ct({inputs:{x:r},backend:e,attrs:{shape:l}}),f=jn({inputs:{x:p},backend:e,attrs:{perm:u}}),g=Ct({inputs:{x:f},backend:e,attrs:{shape:c}}),m=Jo({inputs:{x:g},backend:e,attrs:{begin:h,size:d}});return e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(g),m}},UW={kernelName:Tc,backendName:"cpu",kernelFunc:function WW(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,weights:o}=t,{size:a}=s,u=hx(e.data.get(r.dataId).values,e.data.get(o.dataId).values,o.dtype,o.shape,a);return e.makeTensorInfo([a],o.dtype,u)}},HW={kernelName:$c,backendName:"cpu",kernelFunc:function GW(n){const{inputs:t,backend:e}=n,{s0:s,s1:r}=t,o=e.data.get(s.dataId).values,a=e.data.get(r.dataId).values,i=Ve(Array.from(o),Array.from(a));return e.makeTensorInfo([i.length],"int32",Int32Array.from(i))}},jW=mt(wa,(n,t)=>n>t.clipValueMax?t.clipValueMax:n<t.clipValueMin?t.clipValueMin:n),KW={kernelName:wa,backendName:"cpu",kernelFunc:jW},qW={kernelName:rl,backendName:"cpu",kernelFunc:n=>{const{x:t}=n.inputs,e=n.backend,s=new Float32Array(q(t.shape)),r=e.data.get(t.dataId),a=r.complexTensorInfos.imag,i=e.data.get(r.complexTensorInfos.real.dataId).values,l=e.data.get(a.dataId).values;for(let u=0;u<i.length;u++)s[u]=Math.hypot(i[u],l[u]);return e.makeOutput(s,t.shape,"float32")}};function Oi(n){const{inputs:t,backend:e}=n,{input:s}=t,r=e.data.get(s.dataId).complexTensorInfos.imag,o=e.data.get(r.dataId).values;return e.makeTensorInfo(r.shape,r.dtype,o)}const XW={kernelName:Zc,backendName:"cpu",kernelFunc:Oi};function Li(n){const{inputs:t,backend:e,attrs:s}=n,{axis:r}=s,o=je(r,t[0].shape)[0];vg(t.map(g=>g.shape),o);let i=Js(t.map(g=>g.shape),o);if(0===q(i))return e.makeTensorInfo(i,t[0].dtype,[]);const l=t.filter(g=>q(g.shape)>0);if(1===l.length)return or({inputs:{x:l[0]},backend:e});if("complex64"===l[0].dtype){const g=l.map(w=>Yo({inputs:{input:w},backend:e})),m=l.map(w=>Oi({inputs:{input:w},backend:e})),y=Li({inputs:g,backend:e,attrs:{axis:o}}),x=Li({inputs:m,backend:e,attrs:{axis:o}}),b=ns({inputs:{real:y,imag:x},backend:e});return g.forEach(w=>e.disposeIntermediateTensorInfo(w)),m.forEach(w=>e.disposeIntermediateTensorInfo(w)),e.disposeIntermediateTensorInfo(y),e.disposeIntermediateTensorInfo(x),b}const u=l.map(g=>{const y=[-1,q(g.shape.slice(o))];return Ct({inputs:{x:g},backend:e,attrs:{shape:y}})}),c=u.map(g=>({vals:e.data.get(g.dataId).values,shape:g.shape}));i=Js(u.map(g=>g.shape),1);const d=_C(c,i,t[0].dtype,1===u[0].shape[0]),p=Js(l.map(g=>g.shape),o),f=e.makeTensorInfo(p,t[0].dtype,d);return u.forEach(g=>e.disposeIntermediateTensorInfo(g)),f}const ZW={kernelName:ol,backendName:"cpu",kernelFunc:Li};function AN(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o}=t,{strides:a,pad:i,dataFormat:l,dilations:u,dimRoundingMode:c}=s;Ne([r,o],"conv2d");const h=br(l),d=ln(r.shape,o.shape,a,u,i,c,!1,h),p=d.filterHeight,f=d.filterWidth,g=d.dilationHeight,m=d.dilationWidth,y=d.padInfo.left,x=d.padInfo.top,b="channelsLast"===d.dataFormat,w=new Ht(d.outShape,r.dtype),S=Ae(r.shape),N=Ae(o.shape),k=S[0],T=b?S[1]:S[2],$=b?S[2]:1,R=b?1:S[1],M=w.strides[0],V=b?w.strides[1]:w.strides[2],W=b?w.strides[2]:1,H=b?1:w.strides[1],K=e.data.get(r.dataId).values,U=e.data.get(o.dataId).values,Y=w.values;for(let X=0;X<d.batchSize;++X){const Q=X*k,re=X*M;for(let ae=0;ae<d.outHeight;++ae){const j=re+ae*V,J=ae*d.strideHeight-x;for(let ue=0;ue<p;++ue){const le=J+ue*g;if(le<0||le>=d.inHeight)continue;const pe=ue*N[0],xe=Q+le*T;for(let Ee=0;Ee<d.outWidth;++Ee){const Re=j+Ee*W,Pe=Ee*d.strideWidth-y;for(let ze=0;ze<f;++ze){const Ze=Pe+ze*m;if(Ze<0||Ze>=d.inWidth)continue;const wt=xe+Ze*$;let pt=pe+ze*N[1];for(let xt=0;xt<d.inChannels;++xt){const Dt=K[wt+xt*R];for(let kt=0;kt<d.outChannels;++kt)Y[Re+kt*H]+=Dt*U[pt+kt];pt+=d.outChannels}}}}}}return e.makeTensorInfo(w.shape,w.dtype,Y)}const YW={kernelName:al,backendName:"cpu",kernelFunc:AN},JW={kernelName:_c,backendName:"cpu",kernelFunc:function QW(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,dy:o}=t,{strides:a,pad:i,dataFormat:l,dimRoundingMode:u,filterShape:c}=s;Ne([r,o],"conv2dBackpropFilter");const h=br(l),d=ln(r.shape,c,a,1,i,u,!1,h),{strideHeight:p,strideWidth:f,filterHeight:g,filterWidth:m}=d,y="channelsLast"===d.dataFormat,x=new Ht(d.filterShape,"float32"),b=d.padInfo.left,w=d.padInfo.top,S=e.data.get(r.dataId).values,N=e.data.get(o.dataId).values,k=new Ht(r.shape,r.dtype,S),T=new Ht(o.shape,o.dtype,N);for(let $=0;$<g;++$){const R=Math.max(0,Math.ceil((w-$)/p)),M=Math.min(d.outHeight,(d.inHeight+w-$)/p);for(let V=0;V<m;++V){const W=Math.max(0,Math.ceil((b-V)/f)),H=Math.min(d.outWidth,(d.inWidth+b-V)/f);for(let K=0;K<d.inChannels;++K)for(let U=0;U<d.outChannels;++U){let Y=0;for(let X=0;X<d.batchSize;++X)for(let Q=R;Q<M;++Q){const re=$+Q*p-w;for(let ae=W;ae<H;++ae){const j=V+ae*f-b;Y+=y?k.get(X,re,j,K)*T.get(X,Q,ae,U):k.get(X,K,re,j)*T.get(X,U,Q,ae)}}x.set(Y,$,V,K,U)}}}return e.makeTensorInfo(x.shape,x.dtype,x.values)}},t4={kernelName:il,backendName:"cpu",kernelFunc:function e4(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,filter:o}=t,{inputShape:a,strides:i,pad:l,dataFormat:u,dimRoundingMode:c}=s;Ne([r,o],"conv2dBackpropInput");const h=Ae(o.shape),d=Ae(r.shape);let p=br(u);const f=ln(a,o.shape,i,1,l,c,!1,p),g=new Ht(f.inShape,"float32"),m=g.values,y=e.data.get(r.dataId).values,x=e.data.get(o.dataId).values,[b,w,S]=h,{batchSize:N,filterHeight:k,filterWidth:T,inChannels:$,inHeight:R,inWidth:M,outChannels:V,outHeight:W,outWidth:H,strideHeight:K,strideWidth:U}=f;p=f.dataFormat;const Y=k-1-f.padInfo.top,X=T-1-f.padInfo.left,Q="channelsLast"===p,re=g.strides[0],ae=Q?g.strides[1]:g.strides[2],j=Q?g.strides[2]:1,J=Q?1:g.strides[1],ue=d[0],le=Q?d[1]:d[2],pe=Q?d[2]:1,xe=Q?1:d[1];for(let Ee=0;Ee<N;++Ee)for(let Re=0;Re<$;++Re)for(let Pe=0;Pe<R;++Pe){const ze=Pe-Y,Ze=Math.max(0,Math.ceil(ze/K)),ct=Math.min(W,(k+ze)/K);for(let wt=0;wt<M;++wt){const pt=wt-X,xt=Math.max(0,Math.ceil(pt/U)),Dt=Math.min(H,(T+pt)/U);let kt=0;for(let Nn=Ze;Nn<ct;++Nn){const ho=Nn*K-ze;for(let ys=xt;ys<Dt;++ys){const Gs=ue*Ee+le*Nn+pe*ys,Rr=b*(k-1-ho)+w*(T-1-(ys*U-pt))+S*Re;for(let po=0;po<V;++po)kt+=y[Gs+xe*po]*x[Rr+po]}}m[re*Ee+ae*Pe+j*wt+J*Re]=kt}}return e.makeTensorInfo(g.shape,g.dtype,g.values)}},s4={kernelName:ll,backendName:"cpu",kernelFunc:function n4(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o}=t,{strides:a,pad:i,dilations:l}=s;Ne([r,o],"conv3d");const u=Vr(r.shape,o.shape,a,l,i),{filterDepth:c,filterHeight:h,filterWidth:d,dilationDepth:p,dilationHeight:f,dilationWidth:g,padInfo:m}=u,y=m.front,x=m.left,b=m.top,w=new Ht(u.outShape,r.dtype),S=e.data.get(r.dataId).values,N=e.data.get(o.dataId).values,k=w.values,T=Ae(r.shape),$=Ae(o.shape);for(let R=0;R<u.batchSize;++R){const M=R*T[0],V=R*w.strides[0];for(let W=0;W<u.outDepth;++W){const H=V+W*w.strides[1],K=W*u.strideDepth-y;for(let U=0;U<c;++U){const Y=K+U*p;if(Y<0||Y>=u.inDepth)continue;const X=U*$[0],Q=M+Y*T[1];for(let re=0;re<u.outHeight;++re){const ae=H+re*w.strides[2],j=re*u.strideHeight-b;for(let J=0;J<h;++J){const ue=j+J*f;if(ue<0||ue>=u.inHeight)continue;const le=X+J*$[1],pe=Q+ue*T[2];for(let xe=0;xe<u.outWidth;++xe){const Ee=ae+xe*u.outChannels,Re=xe*u.strideWidth-x;for(let Pe=0;Pe<d;++Pe){const ze=Re+Pe*g;if(ze<0||ze>=u.inWidth)continue;const ct=pe+ze*u.inChannels;let wt=le+Pe*$[2];for(let pt=0;pt<u.inChannels;++pt){const xt=S[ct+pt];for(let Dt=0;Dt<u.outChannels;++Dt)k[Ee+Dt]+=xt*N[wt+Dt];wt+=u.outChannels}}}}}}}}return e.makeTensorInfo(w.shape,w.dtype,w.values)}},o4={kernelName:Ac,backendName:"cpu",kernelFunc:function r4(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,dy:o}=t,{strides:a,pad:i,filterShape:l}=s;Ne([r,o],"conv3dBackpropFilterV2");const u=Ae(r.shape),c=Ae(o.shape),h=Vr(r.shape,l,a,1,i),d=h.strideDepth,p=h.strideHeight,f=h.strideWidth,g=h.filterDepth,m=h.filterHeight,y=h.filterWidth,x=new Ht(h.filterShape,"float32"),b=x.values,[w,S,N,k]=x.strides,T=e.data.get(o.dataId).values,[$,R,M,V]=c,W=e.data.get(r.dataId).values,[H,K,U,Y]=u,X=h.padInfo.front,Q=h.padInfo.left,re=h.padInfo.top;for(let ae=0;ae<g;++ae){const j=Math.max(0,Math.ceil((X-ae)/d)),J=Math.min(h.outDepth,(h.inDepth+X-ae)/d),ue=ae*w;for(let le=0;le<m;++le){const pe=Math.max(0,Math.ceil((re-le)/p)),xe=Math.min(h.outHeight,(h.inHeight+re-le)/p),Ee=le*S+ue;for(let Re=0;Re<y;++Re){const Pe=Math.max(0,Math.ceil((Q-Re)/f)),ze=Math.min(h.outWidth,(h.inWidth+Q-Re)/f),Ze=Re*N+Ee;for(let ct=0;ct<h.inChannels;++ct){const wt=ct*k+Ze;for(let pt=0;pt<h.outChannels;++pt){let xt=0;for(let Dt=0;Dt<h.batchSize;++Dt){const kt=Dt*H,Ar=Dt*$;for(let Nn=j;Nn<J;++Nn){const ys=(ae+Nn*d-X)*K+kt,ca=Nn*R+Ar;for(let Gs=pe;Gs<xe;++Gs){const po=(le+Gs*p-re)*U+ys,fo=Gs*M+ca;for(let mo=Pe;mo<ze;++mo)xt+=W[(Re+mo*f-Q)*Y+po+ct]*T[mo*V+fo+pt]}}}b[wt+pt]=xt}}}}}return e.makeTensorInfo(x.shape,x.dtype,x.values)}},i4={kernelName:Rc,backendName:"cpu",kernelFunc:function a4(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,filter:o}=t,{pad:a,strides:i,inputShape:l}=s;Ne([r],"conv3dBackpropInputV2");const u=Ae(r.shape),c=Ae(o.shape),h=Vr(l,o.shape,i,1,a),d=new Ht(h.inShape,"float32"),p=d.values,[f,g,m,y]=d.strides,x=e.data.get(r.dataId).values,[b,w,S,N]=u,k=e.data.get(o.dataId).values,[T,$,R,M]=c,{batchSize:V,filterDepth:W,filterHeight:H,filterWidth:K,inChannels:U,inDepth:Y,inHeight:X,inWidth:Q,outChannels:re,outDepth:ae,outHeight:j,outWidth:J,strideDepth:ue,strideHeight:le,strideWidth:pe}=h,xe=W-1-h.padInfo.front,Ee=H-1-h.padInfo.top,Re=K-1-h.padInfo.left;for(let Pe=0;Pe<V;++Pe)for(let ze=0;ze<U;++ze)for(let Ze=0;Ze<Y;++Ze){const ct=Ze-xe,wt=Math.max(0,Math.ceil(ct/ue)),pt=Math.min(ae,(W+ct)/ue);for(let xt=0;xt<X;++xt){const Dt=xt-Ee,kt=Math.max(0,Math.ceil(Dt/le)),Ar=Math.min(j,(H+Dt)/le);for(let Nn=0;Nn<Q;++Nn){const ho=Nn-Re,ys=Math.max(0,Math.ceil(ho/pe)),ca=Math.min(J,(K+ho)/pe);let Gs=0;for(let Rr=wt;Rr<pt;++Rr){const po=Rr*ue-ct;for(let fo=kt;fo<Ar;++fo){const mo=fo*le-Dt;for(let mc=ys;mc<ca;++mc){const rb=b*Pe+w*Rr+S*fo+N*mc,Y9=T*(W-1-po)+$*(H-1-mo)+R*(K-1-(mc*pe-ho))+M*ze;for(let Wp=0;Wp<re;++Wp)Gs+=x[rb+Wp]*k[Y9+Wp]}}}p[f*Pe+g*Ze+m*xt+y*Nn+ze]=Gs}}}return e.makeTensorInfo(d.shape,d.dtype,d.values)}},l4=mt(va,n=>Math.cos(n)),u4={kernelName:va,backendName:"cpu",kernelFunc:l4},c4=mt(Sa,n=>Math.cosh(n)),h4={kernelName:Sa,backendName:"cpu",kernelFunc:c4},p4={kernelName:Fc,backendName:"cpu",kernelFunc:function d4(n){const{inputs:t,backend:e,attrs:s}=n,{image:r,boxes:o,boxInd:a}=t,{cropSize:i,method:l,extrapolationValue:u}=s,[c,h,d,p]=r.shape,f=o.shape[0],[g,m]=i,y=Ge([f,g,m,p],"float32"),x=e.data.get(o.dataId).values,b=e.data.get(a.dataId).values,w=e.data.get(r.dataId).values,S=Ae(r.shape),N=Ae(y.shape);for(let k=0;k<f;k++){const T=4*k,$=x[T],R=x[T+1],M=x[T+2],V=x[T+3],W=b[k];if(W>=c)continue;const H=g>1?(M-$)*(h-1)/(g-1):0,K=m>1?(V-R)*(d-1)/(m-1):0;for(let U=0;U<g;U++){const Y=g>1?$*(h-1)+U*H:.5*($+M)*(h-1);if(Y<0||Y>h-1)for(let X=0;X<m;X++)for(let Q=0;Q<p;Q++)y.values[Q+X*N[2]+U*N[1]+k*N[0]]=u;else if("bilinear"===l){const X=Math.floor(Y),Q=Math.ceil(Y),re=Y-X;for(let ae=0;ae<m;ae++){const j=m>1?R*(d-1)+ae*K:.5*(R+V)*(d-1);if(j<0||j>d-1){for(let pe=0;pe<p;pe++)y.values[pe+ae*N[2]+U*N[1]+k*N[0]]=u;continue}const J=Math.floor(j),ue=Math.ceil(j),le=j-J;for(let pe=0;pe<p;pe++){let xe=pe+J*S[2]+X*S[1]+W*S[0];const Ee=w[xe];xe=pe+ue*S[2]+X*S[1]+W*S[0];const Re=w[xe];xe=pe+J*S[2]+Q*S[1]+W*S[0];const Pe=w[xe];xe=pe+ue*S[2]+Q*S[1]+W*S[0];const ze=w[xe],Ze=Ee+(Re-Ee)*le;xe=pe+ae*N[2]+U*N[1]+k*N[0],y.values[xe]=Ze+(Pe+(ze-Pe)*le-Ze)*re}}}else for(let X=0;X<m;++X){const Q=m>1?R*(d-1)+X*K:.5*(R+V)*(d-1);if(Q<0||Q>d-1){for(let j=0;j<p;j++)y.values[j+X*N[2]+U*N[1]+k*N[0]]=u;continue}const re=Math.round(Q),ae=Math.round(Y);for(let j=0;j<p;j++)y.values[j+X*N[2]+U*N[1]+k*N[0]]=w[j+re*S[2]+ae*S[1]+W*S[0]]}}}return e.makeTensorInfo(y.shape,y.dtype,y.values)}},m4={kernelName:Dc,backendName:"cpu",kernelFunc:function f4(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,exclusive:a,reverse:i}=s;Ne(r,"cumprod");const l=_t([o],r.shape.length);let u=r;null!=l&&(u=jn({inputs:{x:r},backend:e,attrs:{perm:l}}));const c=Bt(1,r.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumprod in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const h=Pn(u.dtype,"int32"),d=Sc(q(u.shape),h),p=e.data.get(u.dataId).values,f=u.shape[u.shape.length-1],g=i?(y,x)=>y+f-x-1:(y,x)=>y+x;for(let y=0;y<p.length;y+=f)for(let x=0;x<f;x++){const b=g(y,x);if(0===x)d[b]=a?1:p[b];else{const w=g(y,x-1);d[b]=a?p[w]*d[w]:p[b]*d[w]}}const m=e.makeTensorInfo(u.shape,h,d);if(null!=l){const x=jn({inputs:{x:m},backend:e,attrs:{perm:Ur(l)}});return e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(u),x}return m}},y4={kernelName:ul,backendName:"cpu",kernelFunc:function g4(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,exclusive:a,reverse:i}=s;Ne(r,"cumsum");const l=_t([o],r.shape.length);let u=r;null!=l&&(u=jn({inputs:{x:r},backend:e,attrs:{perm:l}}));const c=Bt(1,r.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const h=Pn(u.dtype,"int32"),d=mn(q(u.shape),h),p=e.data.get(u.dataId).values,f=u.shape[u.shape.length-1],g=i?(y,x)=>y+f-x-1:(y,x)=>y+x;for(let y=0;y<p.length;y+=f)for(let x=0;x<f;x++){const b=g(y,x);if(0===x)d[b]=a?0:p[b];else{const w=g(y,x-1);d[b]=a?p[w]+d[w]:p[b]+d[w]}}const m=e.makeTensorInfo(u.shape,h,d);if(null!=l){const x=jn({inputs:{x:m},backend:e,attrs:{perm:Ur(l)}});return e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(u),x}return m}},b4={kernelName:Oc,backendName:"cpu",kernelFunc:function x4(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,weights:o}=t,{size:a,binaryOutput:i}=s;if(1===r.shape.length){const c=hx(e.data.get(r.dataId).values,e.data.get(o.dataId).values,o.dtype,o.shape,a);return e.makeTensorInfo([a],o.dtype,c)}if(2===r.shape.length){const c=TC(e.bufferSync(r),e.bufferSync(o),a,i);return e.makeTensorInfo(c.shape,o.dtype,c.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}},v4={kernelName:Lc,backendName:"cpu",kernelFunc:function w4(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{blockSize:o,dataFormat:a}=s;C("NHWC"===a,()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${a}`);const i=r.shape[0],l=r.shape[1],u=r.shape[2],c=r.shape[3],h=l*o,d=u*o,p=c/(o*o),f=e.data.get(r.dataId).values,g=new Float32Array(i*h*d*p);let m=0;for(let y=0;y<i;++y)for(let x=0;x<h;++x){const b=Math.floor(x/o),w=x%o;for(let S=0;S<d;++S){const N=Math.floor(S/o),T=(w*o+S%o)*p;for(let $=0;$<p;++$)g[m++]=f[$+T+c*(N+u*(b+l*y))]}}return e.makeTensorInfo([i,h,d,p],r.dtype,g)}};function RN(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o}=t,{strides:a,pad:i,dilations:l,dimRoundingMode:u}=s;Ne([r,o],"depthwiseConv2DNative");const c=Ae(r.shape),h=Ae(o.shape);let d=l;null==d&&(d=[1,1]),C(xn(a,d),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${a} and dilations '${d}'`);const p=ln(r.shape,o.shape,a,d,i,u,!0),{filterHeight:f,filterWidth:g,dilationHeight:m,dilationWidth:y,padInfo:x}=p,b=x.left,w=x.top,S=p.outChannels/p.inChannels,N=new Ht(p.outShape,r.dtype),k=e.data.get(r.dataId).values,T=e.data.get(o.dataId).values,$=N.values;for(let R=0;R<p.batchSize;++R){const M=R*c[0],V=R*N.strides[0];for(let W=0;W<p.outHeight;++W){const H=V+W*N.strides[1],K=W*p.strideHeight-w;for(let U=0;U<f;++U){const Y=K+U*m;if(Y<0||Y>=p.inHeight)continue;const X=U*h[0],Q=M+Y*c[1];for(let re=0;re<p.outWidth;++re){const ae=H+re*N.strides[2],j=re*p.strideWidth-b;for(let J=0;J<g;++J){const ue=j+J*y;if(ue<0||ue>=p.inWidth)continue;const pe=Q+ue*p.inChannels;let xe=ae,Ee=X+J*h[1];for(let Re=0;Re<p.inChannels;++Re){const Pe=k[pe+Re];for(let ze=0;ze<S;++ze)$[xe+ze]+=Pe*T[Ee+ze];xe+=S,Ee+=S}}}}}}return e.makeTensorInfo(N.shape,N.dtype,N.values)}const S4={kernelName:cl,backendName:"cpu",kernelFunc:RN},N4={kernelName:Pc,backendName:"cpu",kernelFunc:function C4(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,dy:o}=t,{strides:a,dilations:i,pad:l,dimRoundingMode:u,filterShape:c}=s;Ne([r,o],"depthwiseConv2dNativeBackpropFilter");const h=ln(r.shape,c,a,i,l,u,!0),{strideHeight:d,strideWidth:p,filterHeight:f,filterWidth:g}=h,m=new Ht(h.filterShape,"float32"),y=h.padInfo.left,x=h.padInfo.top,b=h.outChannels/h.inChannels,w=e.data.get(r.dataId).values,S=new Ht(r.shape,r.dtype,w),N=e.data.get(o.dataId).values,k=new Ht(o.shape,o.dtype,N);for(let T=0;T<f;++T){const $=Math.max(0,Math.ceil((x-T)/d)),R=Math.min(h.outHeight,(h.inHeight+x-T)/d);for(let M=0;M<g;++M){const V=Math.max(0,Math.ceil((y-M)/p)),W=Math.min(h.outWidth,(h.inWidth+y-M)/p);for(let H=0;H<h.outChannels;++H){const K=Math.trunc(H/b),U=H%b;let Y=0;for(let X=0;X<h.batchSize;++X)for(let Q=$;Q<R;++Q){const re=T+Q*d-x;for(let ae=V;ae<W;++ae)Y+=S.get(X,re,M+ae*p-y,K)*k.get(X,Q,ae,H)}m.set(Y,T,M,K,U)}}}return e.makeTensorInfo(m.shape,m.dtype,m.values)}},k4={kernelName:Mc,backendName:"cpu",kernelFunc:function I4(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,filter:o}=t,{strides:a,dilations:i,pad:l,dimRoundingMode:u,inputShape:c}=s;Ne([r,o],"depthwiseConv2DNativeBackpropInput");const h=Ae(r.shape),d=Ae(o.shape),p=ln(c,o.shape,a,i,l,u,!0),f=new Ht(p.inShape,"float32"),g=f.values,[m,y,x]=f.strides,b=e.data.get(r.dataId).values,[w,S,N]=h,k=e.data.get(o.dataId).values,[T,$,R]=d,{batchSize:M,filterHeight:V,filterWidth:W,inChannels:H,inHeight:K,inWidth:U,outChannels:Y,outHeight:X,outWidth:Q,strideHeight:re,strideWidth:ae}=p,j=V-1-p.padInfo.top,J=W-1-p.padInfo.left,ue=Y/H;for(let le=0;le<M;++le)for(let pe=0;pe<H;++pe)for(let xe=0;xe<K;++xe){const Ee=xe-j,Re=Math.max(0,Math.ceil(Ee/re)),Pe=Math.min(X,(V+Ee)/re);for(let ze=0;ze<U;++ze){const Ze=ze-J,ct=Math.max(0,Math.ceil(Ze/ae)),wt=Math.min(Q,(W+Ze)/ae);let pt=0;for(let xt=Re;xt<Pe;++xt){const Dt=xt*re-Ee;for(let kt=ct;kt<wt;++kt){const Nn=w*le+S*xt+N*kt,ho=T*(V-1-Dt)+$*(W-1-(kt*ae-Ze))+R*pe;for(let ys=0;ys<ue;++ys)pt+=b[Nn+(pe*ue+ys)]*k[ho+ys]}}g[m*le+y*xe+x*ze+pe]=pt}}return e.makeTensorInfo(f.shape,f.dtype,f.values)}},$4={kernelName:zc,backendName:"cpu",kernelFunc:function T4(n){const{inputs:t,backend:e}=n,{x:s}=t,r=q(s.shape),o=e.data.get(s.dataId).values,a=Ge([r,r],s.dtype),i=a.values;for(let u=0;u<o.length;u++)i[u*r+u]=o[u];const l=[...s.shape,...s.shape];return e.makeTensorInfo(l,a.dtype,a.values)}},E4={kernelName:hl,backendName:"cpu",kernelFunc:({inputs:n,backend:t,attrs:e})=>{const{x:s,filter:r}=n,{strides:o,pad:a,dilations:i}=e,l=t,u=l.data.get(s.dataId).values,c=s.shape.length,h=l.data.get(r.dataId).values,d=r.shape.length,{batchSize:p,inHeight:f,inWidth:g,inChannels:m,outHeight:y,outWidth:x,padInfo:b,strideHeight:w,strideWidth:S,filterHeight:N,filterWidth:k,dilationHeight:T,dilationWidth:$,outShape:R}=du(s.shape,r.shape,o,a,"NHWC",i),M=q(R),V=R.length,W=Ot(s.dtype,M);for(let K=0;K<p;++K)for(let U=0;U<y;++U){const Y=U*w-b.top;for(let X=0;X<x;++X){const Q=X*S-b.left;for(let re=0;re<m;++re){let ae=Number.MIN_SAFE_INTEGER;for(let J=0;J<N;++J){const ue=Y+J*T;if(ue>=0&&ue<f)for(let le=0;le<k;++le){const pe=Q+le*$;if(pe>=0&&pe<g){const xe=Ts([K,ue,pe,re],c,Ae(s.shape)),Ee=Ts([J,le,re],d,Ae(r.shape)),Re=u[xe]+h[Ee];Re>ae&&(ae=Re)}}}W[Ts([K,U,X,re],V,Ae(R))]=ae}}}return{dataId:l.write(Pr(W,s.dtype),R,s.dtype),shape:R,dtype:s.dtype}}},_4={kernelName:Vc,backendName:"cpu",kernelFunc:({inputs:n,backend:t,attrs:e})=>{const{x:s,filter:r,dy:o}=n,{strides:a,pad:i,dilations:l}=e,u=t,c=os(s.shape,u.data.get(s.dataId).values),h=os(r.shape,u.data.get(r.dataId).values),{batchSize:d,inHeight:p,inWidth:f,inChannels:g,outHeight:m,outWidth:y,padInfo:x,strideHeight:b,strideWidth:w,filterHeight:S,filterWidth:N,dilationHeight:k,dilationWidth:T,outShape:$}=du(s.shape,r.shape,a,i,"NHWC",l);C(o.rank===$.length,()=>`Error in ${Vc}, dy must have the same rank as output ${$.length}, but got ${o.rank}`);const R=os($,u.data.get(o.dataId).values),M=ef(r.shape,r.dtype);for(let W=0;W<d;++W)for(let H=0;H<m;++H){const K=H*b-x.top;for(let U=0;U<y;++U){const Y=U*w-x.left;for(let X=0;X<g;++X){let Q=Number.MIN_SAFE_INTEGER,re=0,ae=0;for(let j=0;j<S;++j){const J=K+j*k;if(J>=0&&J<p)for(let ue=0;ue<N;++ue){const le=Y+ue*T;if(le>=0&&le<f){const pe=c[W][J][le][X]+h[j][ue][X];pe>Q&&(Q=pe,re=j,ae=ue)}}}M[re][ae][X]+=R[W][H][U][X]}}}return{dataId:u.write(Pr(M,s.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},A4={kernelName:Bc,backendName:"cpu",kernelFunc:({inputs:n,backend:t,attrs:e})=>{const{x:s,filter:r,dy:o}=n,{strides:a,pad:i,dilations:l}=e,u=t,c=os(s.shape,u.data.get(s.dataId).values),h=os(r.shape,u.data.get(r.dataId).values),{batchSize:d,inHeight:p,inWidth:f,inChannels:g,outHeight:m,outWidth:y,padInfo:x,strideHeight:b,strideWidth:w,filterHeight:S,filterWidth:N,dilationHeight:k,dilationWidth:T,outShape:$}=du(s.shape,r.shape,a,i,"NHWC",l);C(o.rank===$.length,()=>`Error in ${Bc}, dy must have the same rank as output ${$.length}, but got ${o.rank}`);const R=os($,u.data.get(o.dataId).values),M=ef(s.shape,s.dtype);for(let W=0;W<d;++W)for(let H=0;H<m;++H){const K=H*b-x.top;for(let U=0;U<y;++U){const Y=U*w-x.left;for(let X=0;X<g;++X){let Q=Number.MIN_SAFE_INTEGER,re=K<0?0:K,ae=Y<0?0:Y;for(let j=0;j<S;++j){const J=K+j*k;if(J>=0&&J<p)for(let ue=0;ue<N;++ue){const le=Y+ue*T;if(le>=0&&le<f){const pe=c[W][J][le][X]+h[j][ue][X];pe>Q&&(Q=pe,re=J,ae=le)}}}M[W][re][ae][X]+=R[W][H][U][X]}}}return{dataId:u.write(Pr(M,s.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},D4={kernelName:Wc,backendName:"cpu",kernelFunc:function R4(n){const{inputs:t,backend:e,attrs:s}=n,{image:r}=t,{canvas:o,options:a}=s,{contextOptions:i,imageOptions:l}=a||{},u=l?.alpha||1,c=i?.contextType||"2d";if("2d"!==c)throw new Error(`Context type ${i.contextType} is not supported by the CPU backend.`);const h=o.getContext(c,i?.contextAttributes||{});if(null==h)throw new Error(`Could not get the context with ${c} type.`);const[d,p]=r.shape.slice(0,2),f=2===r.shape.length?1:r.shape[2],g=e.data.get(r.dataId).values,m="float32"===r.dtype?255:1,y=new Uint8ClampedArray(p*d*4);for(let b=0;b<d*p;++b){const w=[0,0,0,255*u];for(let N=0;N<f;N++){const k=g[b*f+N];if("float32"===r.dtype){if(k<0||k>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${k}.`)}else if("int32"===r.dtype&&(k<0||k>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${k}.`);1===f?(w[0]=k*m,w[1]=k*m,w[2]=k*m):w[N]=k*m}const S=4*b;y[S+0]=Math.round(w[0]),y[S+1]=Math.round(w[1]),y[S+2]=Math.round(w[2]),y[S+3]=Math.round(w[3])}o.width=p,o.height=d;const x=new ImageData(y,p,d);return h.putImageData(x,0,0),r}};function tc(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s;let i;Ne(r,"sum"),i="bool"===r.dtype?oo({inputs:{x:r},backend:e,attrs:{dtype:"int32"}}):or({inputs:{x:r},backend:e});const l=i.shape.length,u=je(o,i.shape),c=_t(u,l);let h=u,d=i;null!=c&&(d=jn({inputs:{x:i},backend:e,attrs:{perm:c}}),h=Bt(h.length,l)),bn("sum",h,d.shape.length);const[p,f]=cn(d.shape,h);let m=fp(e,p,Pn(d.dtype,"int32"));const y=q(f),x=e.data.get(m.dataId).values,b=e.data.get(d.dataId).values;for(let w=0;w<x.length;++w){const S=w*y;let N=0;for(let k=0;k<y;++k)N+=b[S+k];x[w]=N}if(a){const S=m;m=Ct({inputs:{x:m},backend:e,attrs:{shape:zt(m.shape,u)}}),e.disposeIntermediateTensorInfo(S)}return e.disposeIntermediateTensorInfo(i),null!=c&&e.disposeIntermediateTensorInfo(d),m}const F4={kernelName:Gl,backendName:"cpu",kernelFunc:tc},L4={kernelName:Uc,backendName:"cpu",kernelFunc:function O4(n){const{inputs:t,backend:e,attrs:s}=n,{equation:r}=s,o=t,{allDims:a,summedDims:i,idDims:l}=Fg(r,o.length);Lg(a.length,l,o);const{path:u,steps:c}=Pg(i,l),h=c.length;let d=null,p=a.length;const f=[];for(let g=0;g<h;++g){for(const m of c[g]){const{permutationIndices:y,expandDims:x}=Og(p,l[m]);let b;Mg(y)?b=o[m]:(b=jn({inputs:{x:o[m]},backend:e,attrs:{perm:y}}),f.push(b));const w=b.shape.slice();for(let S=0;S<x.length;++S)w.splice(x[S],0,1);Ye(b.shape,w)||(b=Ct({inputs:{x:b},backend:e,attrs:{shape:w}}),f.push(b)),null===d?d=b:(d=mp({inputs:{a:b,b:d},backend:e}),f.push(d))}g<h-1&&(u[g]>=0&&(d=tc({inputs:{x:d},backend:e,attrs:{axis:u[g]-(a.length-p),keepDims:!1}}),f.push(d)),p--)}for(const g of f)g!==d&&e.disposeIntermediateTensorInfo(g);return d}},M4={kernelName:Gc,backendName:"cpu",kernelFunc:function P4(n){const{inputs:t,backend:e}=n,{dy:s,y:r}=t;Ne([s,r],"eluGrad");const o=new Float32Array(q(r.shape)),a=e.data.get(r.dataId).values,i=e.data.get(s.dataId).values;for(let l=0;l<a.length;++l){const u=a[l];o[l]=u>=0?i[l]:i[l]*(u+1)}return e.makeTensorInfo(r.shape,"float32",o)}},z4=kg,B4=Tg,V4=$g,W4=Eg,U4=_g,G4=Ag,H4=mt(Ia,n=>{const t=Math.sign(n),e=Math.abs(n),s=1/(1+z4*e);return t*(1-((((G4*s+U4)*s+W4)*s+V4)*s+B4)*s*Math.exp(-e*e))}),j4={kernelName:Ia,backendName:"cpu",kernelFunc:H4};function xp(n){const{inputs:t,backend:e,attrs:s}=n,{input:r}=t,{dim:o}=s,a=r.shape.length,i=r.shape.slice();let l=o;return o<0&&(C(-(a+1)<=o,()=>`Axis must be in the interval [${-(a+1)}, ${a}]`),l=a+o+1),i.splice(l,0,1),Ct({inputs:{x:r},backend:e,attrs:{shape:i}})}const K4={kernelName:pl,backendName:"cpu",kernelFunc:xp},q4=Wt((n,t)=>n/t),yx=rn(Ca,q4),xx={kernelName:Ca,backendName:"cpu",kernelFunc:yx};function DN(n,t,e){const s=n.shape,r=s[0],o=s[1],a=e.data.get(n.dataId),i=a.complexTensorInfos.real,l=a.complexTensorInfos.imag,u=[r,o],c=q(u),h=on("float32",c),d=on("float32",c);for(let m=0;m<r;m++){const y=Jo({inputs:{x:i},backend:e,attrs:{begin:[m,0],size:[1,o]}}),x=Jo({inputs:{x:l},backend:e,attrs:{begin:[m,0],size:[1,o]}}),b=ns({inputs:{real:y,imag:x},backend:e}),{real:w,imag:S}=X4(b,t,e),N=Nr(w,S);for(let k=0;k<o;k++){const T=Rg(N,k);h[m*o+k]=T.real,d[m*o+k]=T.imag}e.disposeIntermediateTensorInfo(y),e.disposeIntermediateTensorInfo(x),e.disposeIntermediateTensorInfo(b)}const p=e.makeTensorInfo(u,"float32",h),f=e.makeTensorInfo(u,"float32",d),g=ns({inputs:{real:p,imag:f},backend:e});return e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),g}function X4(n,t,e){const s=q(n.shape),r=e.data.get(n.dataId),o=e.data.get(r.complexTensorInfos.real.dataId).values,a=e.data.get(r.complexTensorInfos.imag.dataId).values;if(function Z4(n){return 0==(n&n-1)}(s)){const i=bx(o,a,s,t,e),l=[n.shape[0],n.shape[1]];if(t){const u=e.makeTensorInfo(l,"float32",i.real),c=e.makeTensorInfo(l,"float32",i.imag),h=e.makeTensorInfo([],"float32",dr(s,"float32")),d=or({inputs:{x:h},backend:e}),p=xx.kernelFunc({inputs:{a:u,b:h},backend:e}),f=xx.kernelFunc({inputs:{a:c,b:d},backend:e}),g=e.data.get(p.dataId).values,m=e.data.get(f.dataId).values;return e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(c),e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),{real:g,imag:m}}return i}{const l=function Y4(n,t,e){const s=new Float32Array(2*t);for(let r=0;r<t;r++){let o=0,a=0;for(let i=0;i<t;i++){const l=Hw(r*i,t,e),u=Rg(n,i);o+=u.real*l.real-u.imag*l.imag,a+=u.real*l.imag+u.imag*l.real}e&&(o/=t,a/=t),Uw(s,o,a,r)}return s}(Nr(o,a),s,t);return Bw(l)}}function bx(n,t,e,s,r){if(1===e)return{real:n,imag:t};const o=Nr(n,t),a=e/2,i=Vw(o),l=i.real,u=i.imag,c=[l.length],h=r.makeTensorInfo(c,"float32",l),d=r.makeTensorInfo(c,"float32",u),p=ns({inputs:{real:h,imag:d},backend:r}),f=Ww(o),g=f.real,m=f.imag,y=[g.length],x=r.makeTensorInfo(y,"float32",g),b=r.makeTensorInfo(y,"float32",m),w=ns({inputs:{real:x,imag:b},backend:r}),S=bx(l,u,a,s,r),N=S.real,k=S.imag,T=[N.length],$=r.makeTensorInfo(T,"float32",N),R=r.makeTensorInfo(T,"float32",k),M=ns({inputs:{real:$,imag:R},backend:r}),V=bx(g,m,a,s,r),W=V.real,H=V.imag,K=[W.length],U=r.makeTensorInfo(K,"float32",W),Y=r.makeTensorInfo(K,"float32",H),X=ns({inputs:{real:U,imag:Y},backend:r}),Q=Gw(e,s),re=[Q.real.length],ae=r.makeTensorInfo(re,"float32",Q.real),j=r.makeTensorInfo(re,"float32",Q.imag),J=ns({inputs:{real:ae,imag:j},backend:r}),ue=mp({inputs:{a:J,b:X},backend:r}),le=Fi({inputs:{a:M,b:ue},backend:r}),pe=mx({inputs:{a:M,b:ue},backend:r}),xe=Yo({inputs:{input:le},backend:r}),Ee=Yo({inputs:{input:pe},backend:r}),Re=Oi({inputs:{input:le},backend:r}),Pe=Oi({inputs:{input:pe},backend:r}),ze=Li({inputs:[xe,Ee],backend:r,attrs:{axis:0}}),Ze=Li({inputs:[Re,Pe],backend:r,attrs:{axis:0}}),ct=r.data.get(ze.dataId).values,wt=r.data.get(Ze.dataId).values;return r.disposeIntermediateTensorInfo(h),r.disposeIntermediateTensorInfo(d),r.disposeIntermediateTensorInfo(p),r.disposeIntermediateTensorInfo(x),r.disposeIntermediateTensorInfo(b),r.disposeIntermediateTensorInfo(w),r.disposeIntermediateTensorInfo($),r.disposeIntermediateTensorInfo(R),r.disposeIntermediateTensorInfo(M),r.disposeIntermediateTensorInfo(U),r.disposeIntermediateTensorInfo(Y),r.disposeIntermediateTensorInfo(X),r.disposeIntermediateTensorInfo(ae),r.disposeIntermediateTensorInfo(j),r.disposeIntermediateTensorInfo(J),r.disposeIntermediateTensorInfo(ue),r.disposeIntermediateTensorInfo(le),r.disposeIntermediateTensorInfo(pe),r.disposeIntermediateTensorInfo(xe),r.disposeIntermediateTensorInfo(Re),r.disposeIntermediateTensorInfo(Ee),r.disposeIntermediateTensorInfo(Pe),r.disposeIntermediateTensorInfo(ze),r.disposeIntermediateTensorInfo(Ze),{real:ct,imag:wt}}const J4={kernelName:Hc,backendName:"cpu",kernelFunc:function Q4(n){const{inputs:t,backend:e}=n,{input:s}=t,r=q(s.shape),o=s.shape[s.shape.length-1],i=Ct({inputs:{x:s},backend:e,attrs:{shape:[r/o,o]}}),l=DN(i,!1,e),u=Ct({inputs:{x:l},backend:e,attrs:{shape:s.shape}});return e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(l),u}};function wx(n){const{backend:t,attrs:e}=n,{shape:s,value:r,dtype:o}=e,a=o||bo(r),i=Ot(a,q(s));return function tU(n,t,e){n.fill(t)}(i,r),t.makeTensorInfo(s,a,i)}const eU={kernelName:jc,backendName:"cpu",kernelFunc:wx},nU={kernelName:Kc,backendName:"cpu",kernelFunc:({inputs:n,backend:e})=>{const{image:s}=n,r=e,o=on(s.dtype,q(s.shape)),[a,i,l,u]=s.shape,c=r.data.get(s.dataId).values;for(let d=0;d<a;d++){const p=d*l*i*u;for(let f=0;f<i;f++){const g=f*(l*u);for(let m=0;m<l;m++){const y=m*u;for(let x=0;x<u;x++){const b=Math.round(l-m-1),w=p+g+y+x;let S=c[w];b>=0&&b<l&&(S=c[p+g+b*u+x]),o[w]=S}}}}return{dataId:r.write(o,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},rU={kernelName:Jl,backendName:"cpu",kernelFunc:function sU(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o,bias:a,preluActivationWeights:i}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=s;let g=AN({inputs:{x:r,filter:o},backend:e,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d}});if(a){const m=g;if("NCHW"===c&&1===a.shape.length&&1!==a.shape[0]){const y=Ct({inputs:{x:a},backend:e,attrs:{shape:[a.shape[0],1,1]}});g=Fi({inputs:{a:g,b:y},backend:e}),e.disposeIntermediateTensorInfo(y)}else g=Fi({inputs:{a:g,b:a},backend:e});e.disposeIntermediateTensorInfo(m)}if(p){const m=g;if("NCHW"===c&&"prelu"===p&&1===i.shape.length&&1!==i.shape[0]){const y=Ct({inputs:{x:i},backend:e,attrs:{shape:[i.shape[0],1,1]}});g=yp(e,g,p,y,f),e.disposeIntermediateTensorInfo(y)}else g=yp(e,g,p,i,f);e.disposeIntermediateTensorInfo(m)}return g}},aU={kernelName:eu,backendName:"cpu",kernelFunc:function oU(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o,bias:a,preluActivationWeights:i}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=s;let g=RN({inputs:{x:r,filter:o},backend:e,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d}});if(a){const m=g;g=Fi({inputs:{a:g,b:a},backend:e}),e.disposeIntermediateTensorInfo(m)}if(p){const m=g;g=yp(e,g,p,i,f),e.disposeIntermediateTensorInfo(m)}return g}},lU={kernelName:qc,backendName:"cpu",kernelFunc:function iU(n){const{inputs:t,backend:e}=n,{params:s,indices:r}=t,o=q(s.shape),a=r.shape,i=a[a.length-1],[l,u,c,h]=Hh(s,r);if(0===u)return e.makeTensorInfo(l,s.dtype,[]);const f=MC(e.data.get(r.dataId).values,e.bufferSync(s),s.dtype,u,i,c,h,s.shape,o);return e.makeTensorInfo(l,s.dtype,f.values)}},cU={kernelName:ml,backendName:"cpu",kernelFunc:function uU(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,indices:o}=t,{axis:a,batchDims:i}=s;Ne([r,o],"gatherV2");const l=je(a,r.shape)[0],u=e.data.get(o.dataId).values,c=r.shape[l];for(let w=0;w<u.length;++w){const S=u[w];C(S<=c-1&&S>=0,()=>`GatherV2: the index value ${S} is not in [0, ${c-1}]`)}let h=i;null==i&&(h=0);const d=q(o.shape),p=Vg(r,o,l,h),f=Ct({inputs:{x:r},backend:e,attrs:{shape:[p.batchSize,p.outerSize,p.dimSize,p.sliceSize]}}),g=Ct({inputs:{x:o},backend:e,attrs:{shape:[p.batchSize,d/p.batchSize]}}),m=[p.batchSize,p.outerSize,d/p.batchSize,p.sliceSize],y=e.bufferSync(g),b=zC(e.bufferSync(f),y,m);return e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(g),e.makeTensorInfo(p.outputShape,b.dtype,b.values)}},dU={kernelName:Xc,backendName:"cpu",kernelFunc:function hU(n){const{inputs:t,backend:e}=n,{input:s}=t,r=q(s.shape),o=s.shape[s.shape.length-1],i=Ct({inputs:{x:s},backend:e,attrs:{shape:[r/o,o]}}),l=DN(i,!0,e),u=Ct({inputs:{x:l},backend:e,attrs:{shape:s.shape}});return e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(l),u}},pU=mt(Ra,n=>Number.isFinite(n)?1:0,"bool"),fU={kernelName:Ra,backendName:"cpu",kernelFunc:pU},mU=mt(Da,n=>Math.abs(n)===1/0?1:0,"bool"),gU={kernelName:Da,backendName:"cpu",kernelFunc:mU},yU=mt(Fa,n=>Number.isNaN(n)?1:0,"bool"),xU={kernelName:Fa,backendName:"cpu",kernelFunc:yU},wU={kernelName:Yc,backendName:"cpu",kernelFunc:function bU(n){const{backend:t,attrs:e}=n,{start:s,stop:r,num:o}=e,a=GC(s,r,o);return t.makeTensorInfo([a.length],"float32",a)}},vU=mt(La,n=>Math.log1p(n)),SU={kernelName:La,backendName:"cpu",kernelFunc:vU},CU=Wt((n,t)=>n&&t),NU=rn(wl,CU,null,"bool"),IU={kernelName:wl,backendName:"cpu",kernelFunc:NU},kU=mt(vl,n=>n?0:1,"bool"),TU={kernelName:vl,backendName:"cpu",kernelFunc:kU},$U=Wt((n,t)=>n||t),EU=rn(Sl,$U,null,"bool"),_U={kernelName:Sl,backendName:"cpu",kernelFunc:EU},RU={kernelName:Cl,backendName:"cpu",kernelFunc:function AU(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{depthRadius:o,bias:a,alpha:i,beta:l}=s;Ne(r,"LRN");const u=r.shape[3],c=u-1,h=e.data.get(r.dataId).values,d=q(r.shape),p=new Float32Array(d);function f(g){const m=g%u;let y=g-m+Math.max(0,m-o);const x=g-m+Math.min(m+o,c);let b=0;for(;y<=x;y++){const w=h[y];b+=w*w}return b}for(let g=0;g<d;g++){const m=f(g),y=h[g]*Math.pow(a+i*m,-l);p[g]=y}return e.makeTensorInfo(r.shape,r.dtype,p)}},FU={kernelName:Qc,backendName:"cpu",kernelFunc:function DU(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,y:o,dy:a}=t,{depthRadius:i,bias:l,alpha:u,beta:c}=s;Ne(a,"LRNGrad");const h=q(a.shape),d=a.shape[3],p=e.data.get(a.dataId).values,f=e.data.get(r.dataId).values,g=e.data.get(o.dataId).values,m=new Float32Array(h),y=h;for(let x=0;x<y;x++){const b=x%d,w=x-b+Math.max(0,b-i),S=x-b+Math.min(d,b+i+1);let N=0;for(let k=w;k<S;k++)N+=Math.pow(f[k],2);N=u*N+l;for(let k=w;k<S;k++){let T=-2*u*c*f[k]*g[x]/N;x===k&&(T+=Math.pow(N,-c)),T*=p[x],m[k]+=T}}return e.makeTensorInfo(a.shape,r.dtype,m)}};function FN(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{reductionIndices:o,keepDims:a}=s,i=e;let l=r.shape;const u=l.length,c=je(o,l);let h=c;const d=_t(h,u);let p=i.data.get(r.dataId).values;if(null!=d){const w=new Array(u);for(let S=0;S<w.length;S++)w[S]=l[d[S]];p=px(p,l,r.dtype,d,w),h=Bt(h.length,u),l=w}Ne(r,"max"),bn("max",h,u);const[f,g]=cn(l,h),y=jC(p,q(g),f,r.dtype),x=i.write(y,f,r.dtype);let b=f;return a&&(b=zt(f,c)),{dataId:x,shape:b,dtype:r.dtype}}const OU={kernelName:Nl,backendName:"cpu",kernelFunc:FN},PU={kernelName:Il,backendName:"cpu",kernelFunc:function LU(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t;Ne(r,"maxPool");const{filterSize:o,strides:a,pad:i,dimRoundingMode:l}=s;C(xn(a,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '1'`);const c=bs(r.shape,o,a,1,i,l);let h;if(1===c.filterWidth&&1===c.filterHeight&&Ye(c.inShape,c.outShape))h=or({inputs:{x:r},backend:e});else{const d=e.data.get(r.dataId).values,p=Ae(r.shape),f=gx(d,0,r.dtype,p,c,"max");h=e.makeTensorInfo(c.outShape,r.dtype,f.values)}return h}},zU={kernelName:kl,backendName:"cpu",kernelFunc:function MU(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{filterSize:o,strides:a,pad:i,dimRoundingMode:l,dataFormat:u}=s;Ne(r,"maxPool3d");const c=xr(r.shape,o,a,1,i,l,u),d=_N(e.data.get(r.dataId).values,0,r.dtype,Ae(r.shape),c,"max");return e.makeTensorInfo(d.shape,"float32",d.values)}},VU={kernelName:eh,backendName:"cpu",kernelFunc:function BU(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o}=t,{filterSize:a,strides:i,pad:l,dimRoundingMode:u}=s;Ne([r,o],"maxPool3DGrad");const c=xr(o.shape,a,i,1,l,u),d=function EW(n,t){const e=Ge(t.outShape,"int32"),s=t.strideDepth,r=t.strideHeight,o=t.strideWidth,a=t.dilationDepth,i=t.dilationHeight,l=t.dilationWidth,u=t.effectiveFilterDepth,c=t.effectiveFilterHeight,h=t.effectiveFilterWidth,d=t.padInfo.front,p=t.padInfo.top,f=t.padInfo.left;for(let g=0;g<t.batchSize;++g)for(let m=0;m<t.inChannels;++m)for(let y=0;y<t.outDepth;++y){const x=y*s-d;let b=x;for(;b<0;)b+=a;const w=Math.min(t.inDepth,u+x);for(let S=0;S<t.outHeight;++S){const N=S*r-p;let k=N;for(;k<0;)k+=i;const T=Math.min(t.inHeight,c+N);for(let $=0;$<t.outWidth;++$){const R=$*o-f;let M=R;for(;M<0;)M+=l;const V=Math.min(t.inWidth,h+R);let W=Number.NEGATIVE_INFINITY,H=-1;for(let K=b;K<w;K+=a){const U=K-x;for(let Y=k;Y<T;Y+=i){const X=Y-N;for(let Q=M;Q<V;Q+=l){const re=Q-R,ae=n.get(g,K,Y,Q,m);ae>=W&&(W=ae,H=U*c*h+X*c+re)}}}e.set(H,g,y,S,$,m)}}}return e}(e.bufferSync(o),c),p=c.strideDepth,f=c.strideHeight,g=c.strideWidth,m=c.dilationDepth,y=c.dilationHeight,x=c.dilationWidth,b=c.effectiveFilterDepth,w=c.effectiveFilterHeight,S=c.effectiveFilterWidth,N=b-1-c.padInfo.front,k=S-1-c.padInfo.left,T=w-1-c.padInfo.top,$=Ge(o.shape,"float32"),R=e.bufferSync(r);for(let M=0;M<c.batchSize;++M)for(let V=0;V<c.inChannels;++V)for(let W=0;W<c.inDepth;++W)for(let H=0;H<c.inHeight;++H)for(let K=0;K<c.inWidth;++K){const U=W-N,Y=H-T,X=K-k;let Q=0;for(let re=0;re<b;re+=m){const ae=(U+re)/p;if(!(ae<0||ae>=c.outDepth||Math.floor(ae)!==ae))for(let j=0;j<w;j+=y){const J=(Y+j)/f;if(!(J<0||J>=c.outHeight||Math.floor(J)!==J))for(let ue=0;ue<S;ue+=x){const le=(X+ue)/g;if(le<0||le>=c.outWidth||Math.floor(le)!==le)continue;const Ee=b*w*S-1-d.get(M,ae,J,le,V)===re*w*S+j*S+ue?1:0;0!==Ee&&(Q+=R.get(M,ae,J,le,V)*Ee)}}}$.set(Q,M,W,H,K,V)}return e.makeTensorInfo($.shape,$.dtype,$.values)}},UU={kernelName:Jc,backendName:"cpu",kernelFunc:function WU(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o,output:a}=t,i=o;Ne([o,a],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,d=bs(i.shape,l,u,1,c,h),p=e.data.get(i.dataId).values,f=Ge(d.outShape,i.dtype,EN(p,i.shape,i.dtype,d).values),g=d.strideHeight,m=d.strideWidth,y=d.dilationHeight,x=d.dilationWidth,b=d.effectiveFilterHeight,w=d.effectiveFilterWidth,S=w-1-d.padInfo.left,N=b-1-d.padInfo.top,k=Ge(i.shape,"float32"),T=e.data.get(r.dataId).values,$=Ge(r.shape,"float32",T);for(let R=0;R<d.batchSize;++R)for(let M=0;M<d.inChannels;++M)for(let V=0;V<d.inHeight;++V)for(let W=0;W<d.inWidth;++W){const H=V-N,K=W-S;let U=0;for(let Y=0;Y<b;Y+=y){const X=(H+Y)/g;if(!(X<0||X>=d.outHeight||Math.floor(X)!==X))for(let Q=0;Q<w;Q+=x){const re=(K+Q)/m;if(re<0||re>=d.outWidth||Math.floor(re)!==re)continue;const J=b*w-1-f.get(R,X,re,M)===Y*w+Q?1:0;0!==J&&(U+=$.get(R,X,re,M)*J)}}k.set(U,R,V,W,M)}return e.makeTensorInfo(k.shape,k.dtype,k.values)}},HU={kernelName:th,backendName:"cpu",kernelFunc:({inputs:n,attrs:t,backend:e})=>{const{x:s}=n,{filterSize:r,strides:o,pad:a,includeBatchInIndex:i}=t,l=e;Ne(s,"MaxPoolWithArgmax");const u=l.data.get(s.dataId).values,c=bs(s.shape,r,o,[1,1],a),[h,d]=function GU(n,t,e,s,r){const a=gx(n,0,e,Ae(t),r,"max"),i=EN(n,t,e,r,!0,s);return[a.values,i.values]}(u,s.shape,s.dtype,i,c),p=l.write(h,c.outShape,s.dtype),f=l.write(d,c.outShape,s.dtype);return[{dataId:p,shape:c.outShape,dtype:s.dtype},{dataId:f,shape:c.outShape,dtype:"int32"}]}},KU={kernelName:Tl,backendName:"cpu",kernelFunc:function jU(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s,i=je(o,r.shape),c=q(cn(r.shape,i)[1]),h=[],d=e.makeTensorInfo([],"float32",new Float32Array([c]));h.push(d);const p=oo({inputs:{x:r},backend:e,attrs:{dtype:"float32"}});h.push(p);const f=yx({inputs:{a:p,b:d},backend:e});h.push(f);const g=tc({inputs:{x:f},backend:e,attrs:{axis:o,keepDims:a}});return h.forEach(m=>e.disposeIntermediateTensorInfo(m)),g}},XU={kernelName:$l,backendName:"cpu",kernelFunc:function qU(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s;Ne(r,"min");const i=je(o,r.shape);let l=i;const u=_t(l,r.shape.length);let c=r;null!=u&&(c=jn({inputs:{x:r},backend:e,attrs:{perm:u}}),l=Bt(l.length,r.shape.length)),bn("min",l,c.shape.length);const[h,d]=cn(c.shape,l),p=q(d),f=mn(q(h),c.dtype),g=e.data.get(c.dataId).values;for(let y=0;y<f.length;++y){const x=y*p;let b=g[x];for(let w=0;w<p;++w){const S=g[x+w];(Number.isNaN(S)||S<b)&&(b=S)}f[y]=b}null!=u&&e.disposeIntermediateTensorInfo(c);const m=e.makeTensorInfo(h,c.dtype,f);if(a){const x=Ct({inputs:{x:m},backend:e,attrs:{shape:zt(h,i)}});return e.disposeIntermediateTensorInfo(m),x}return m}},YU={kernelName:El,backendName:"cpu",kernelFunc:function ZU(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{paddings:o,mode:a}=s;Ne(r,"mirrorPad");const i=o.map((b,w)=>b[0]+r.shape[w]+b[1]),l=o.map(b=>b[0]),u=o.map((b,w)=>b[0]+r.shape[w]),c="reflect"===a?0:1,h=e.data.get(r.dataId).values,d=r.shape.length,p=Ae(r.shape),f=q(i),g=i.length,m=Ae(i),y=on(r.dtype,f);for(let b=0;b<f;b++){let w=wo(b,g,m);for(let N=0;N<g;N++)w[N]<l[N]?w[N]=2*l[N]-w[N]-c:w[N]>=u[N]&&(w[N]=2*(u[N]-1)-w[N]+c);w=w.map((N,k)=>N-l[k]);const S=Ts(w,d,p);y[b]=h[S]}return{dataId:e.write(y,i,r.dtype),shape:i,dtype:r.dtype}}},QU=Wt((n,t)=>{const e=n%t;return n<0&&t<0||n>=0&&t>=0?e:(e+t)%t}),JU=rn(za,QU),eG={kernelName:za,backendName:"cpu",kernelFunc:JU};function ON(n){const{inputs:t,backend:e,attrs:s}=n,{logits:r}=t,{dim:o}=s,a=r.shape.length;let i=o;if(-1===i&&(i=a-1),i!==a-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${a} and dim was ${i}`);const l=je([i],r.shape),u=FN({inputs:{x:r},backend:e,attrs:{reductionIndices:l,keepDims:!1}}),c=zt(u.shape,l),h=Ct({inputs:{x:u},backend:e,attrs:{shape:c}}),d=mx({inputs:{a:r,b:h},backend:e}),p=FC({inputs:{x:d},backend:e}),f=tc({inputs:{x:p},backend:e,attrs:{axis:l,keepDims:!1}}),g=Ct({inputs:{x:f},backend:e,attrs:{shape:c}}),m=yx({inputs:{a:p,b:g},backend:e});return e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(g),m}const tG={kernelName:Kl,backendName:"cpu",kernelFunc:ON},sG={kernelName:nh,backendName:"cpu",kernelFunc:function nG(n){const{inputs:t,backend:e,attrs:s}=n,{logits:r}=t,{numSamples:o,seed:a,normalized:i}=s;Ne(r,"multinomial");const l=i?r:ON({inputs:{logits:r},backend:e,attrs:{dim:-1}}),u=l.shape[0],c=l.shape[1],h=e.data.get(l.dataId).values,d=[u,o],p=mn(q(d),"int32");for(let f=0;f<u;++f){const g=f*c,m=new Float32Array(c-1);m[0]=h[g];for(let b=1;b<m.length;++b)m[b]=m[b-1]+h[g+b];const y=Ci.alea(a.toString()),x=f*o;for(let b=0;b<o;++b){const w=y();p[x+b]=m.length;for(let S=0;S<m.length;S++)if(w<m[S]){p[x+b]=S;break}}}return i||e.disposeIntermediateTensorInfo(l),e.makeTensorInfo(d,"int32",p)}},rG=Cd,aG={kernelName:sh,backendName:"cpu",kernelFunc:function oG(n){const{inputs:t,backend:e,attrs:s}=n,{boxes:r,scores:o}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:l}=s;Ne(r,"NonMaxSuppression");const u=e.data.get(r.dataId).values,c=e.data.get(o.dataId).values,{selectedIndices:h}=rG(u,c,a,i,l);return e.makeTensorInfo([h.length],"int32",new Int32Array(h))}},iG=Nd,uG={kernelName:rh,backendName:"cpu",kernelFunc:function lG(n){const{inputs:t,backend:e,attrs:s}=n,{boxes:r,scores:o}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:l,padToMaxOutputSize:u}=s;Ne(r,"NonMaxSuppressionPadded");const c=e.data.get(r.dataId).values,h=e.data.get(o.dataId).values,{selectedIndices:d,validOutputs:p}=iG(c,h,a,i,l,u);return[e.makeTensorInfo([d.length],"int32",new Int32Array(d)),e.makeTensorInfo([],"int32",new Int32Array([p]))]}},cG=Id,dG={kernelName:oh,backendName:"cpu",kernelFunc:function hG(n){const{inputs:t,backend:e,attrs:s}=n,{boxes:r,scores:o}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:l,softNmsSigma:u}=s;Ne(r,"NonMaxSuppressionWithScore");const c=e.data.get(r.dataId).values,h=e.data.get(o.dataId).values,d=a,p=i,f=l,g=u,{selectedIndices:m,selectedScores:y}=cG(c,h,d,p,f,g);return[e.makeTensorInfo([m.length],"int32",new Int32Array(m)),e.makeTensorInfo([y.length],"float32",new Float32Array(y))]}},fG={kernelName:Dl,backendName:"cpu",kernelFunc:function pG(n){const{inputs:t,backend:e,attrs:s}=n,{indices:r}=t,{dtype:o,depth:a,onValue:i,offValue:l}=s;Ne(r,"oneHot");const u=q(r.shape),c=new Float32Array(u*a);c.fill(l);const h=e.data.get(r.dataId).values;for(let d=0;d<u;++d)h[d]>=0&&h[d]<a&&(c[d*a+h[d]]=i);return e.makeTensorInfo([...r.shape,a],o,c)}};function bp(n){const{inputs:t,backend:e}=n,{x:s}=t;if("string"===s.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===s.dtype){const r=Yo({inputs:{input:s},backend:e}),o=bp({inputs:{x:r},backend:e}),a=Oi({inputs:{input:s},backend:e}),i=bp({inputs:{x:a},backend:e}),l=ns({inputs:{real:o,imag:i},backend:e});return e.disposeIntermediateTensorInfo(r),e.disposeIntermediateTensorInfo(o),e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(i),l}return wx({backend:e,attrs:{shape:s.shape,value:0,dtype:s.dtype}})}const mG={kernelName:Yl,backendName:"cpu",kernelFunc:bp},gG={kernelName:Rl,backendName:"cpu",kernelFunc:function LN(n){const{inputs:t,backend:e}=n,{x:s}=t;if("string"===s.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===s.dtype){const r=Yo({inputs:{input:s},backend:e}),o=LN({inputs:{x:r},backend:e}),a=Oi({inputs:{input:s},backend:e}),i=bp({inputs:{x:a},backend:e}),l=ns({inputs:{real:o,imag:i},backend:e});return e.disposeIntermediateTensorInfo(r),e.disposeIntermediateTensorInfo(o),e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(i),l}return wx({backend:e,attrs:{shape:s.shape,value:1,dtype:s.dtype}})}};function PN(n){const{inputs:t,backend:e,attrs:s}=n,{axis:r}=s;if(1===t.length)return xp({inputs:{input:t[0]},backend:e,attrs:{dim:r}});const o=t[0].shape,a=t[0].dtype;t.forEach(c=>{fn(o,c.shape,"All tensors passed to stack must have matching shapes"),C(a===c.dtype,()=>"All tensors passed to stack must have matching dtypes")});const i=[],u=Li({inputs:t.map(c=>{const h=xp({inputs:{input:c},backend:e,attrs:{dim:r}});return i.push(h),h}),backend:e,attrs:{axis:r}});return i.forEach(c=>e.disposeIntermediateTensorInfo(c)),u}const yG={kernelName:Fl,backendName:"cpu",kernelFunc:PN},MN={kernelName:Ol,backendName:"cpu",kernelFunc:function xG(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{paddings:o,constantValue:a}=s;Ne(r,"pad");const i=o.map((x,b)=>x[0]+r.shape[b]+x[1]),l=o.map(x=>x[0]),u=e.data.get(r.dataId).values,c=q(r.shape),h=r.shape.length,d=Ae(r.shape),p=q(i),f=i.length,g=Ae(i),m=on(r.dtype,p);0!==a&&m.fill(a);for(let x=0;x<c;x++)m[Ts(wo(x,h,d).map((N,k)=>N+l[k]),f,g)]=u[x];return{dataId:e.write(m,i,r.dtype),shape:i,dtype:r.dtype}}},bG=Wt((n,t)=>Math.pow(n,t)),wG=rn(Va,bG),vG={kernelName:Va,backendName:"cpu",kernelFunc:wG},CG={kernelName:ah,backendName:"cpu",kernelFunc:function SG(n){const{inputs:t,backend:e,attrs:s}=n,{paramsNestedSplits:r,paramsDenseValues:o,indices:a}=t,l=r.map(y=>e.data.get(y.dataId).values),u=r.map(y=>y.shape),c=e.data.get(o.dataId).values,h=e.data.get(a.dataId).values,[d,p,f]=JC(l,u,c,o.shape,o.dtype,h,a.shape),g=d.map(y=>e.makeTensorInfo([y.length],"int32",y)),m=e.makeTensorInfo(f,o.dtype,p);return g.concat([m])}},IG={kernelName:ih,backendName:"cpu",kernelFunc:function NG(n){const{inputs:t,backend:e}=n,{starts:s,limits:r,deltas:o}=t,a=e.data.get(s.dataId).values,i=e.data.get(r.dataId).values,l=e.data.get(o.dataId).values,[u,c]=tN(a,s.shape,s.dtype,i,r.shape,l,o.shape);return[e.makeTensorInfo([u.length],"int32",u),e.makeTensorInfo([c.length],s.dtype,c)]}},TG={kernelName:lh,backendName:"cpu",kernelFunc:function kG(n){const{inputs:t,backend:e,attrs:s}=n,{shape:r,values:o,defaultValue:a,rowPartitionTensors:i}=t,{rowPartitionTypes:l}=s,u=e.data.get(r.dataId).values,c=e.data.get(o.dataId).values,h=e.data.get(a.dataId).values,d=i.map(m=>e.data.get(m.dataId).values),p=i.map(m=>m.shape),[f,g]=rN(u,r.shape,c,o.shape,o.dtype,h,a.shape,d,p,l);return e.makeTensorInfo(f,o.dtype,g)}},EG={kernelName:uh,backendName:"cpu",kernelFunc:function $G(n){const{backend:t,attrs:e}=n,{start:s,stop:r,dtype:o,step:a}=e,i=oN(s,r,a,o);return t.makeTensorInfo([i.length],o,i)}},_G=mt(Wa,n=>1/n),AG={kernelName:Wa,backendName:"cpu",kernelFunc:_G},DG={kernelName:Bl,backendName:"cpu",kernelFunc:function RG(n){const{inputs:t,backend:e,attrs:s}=n,{images:r}=t,{alignCorners:o,halfPixelCenters:a,size:i}=s;Ne(r,"resizeBilinear");const l=Ae(r.shape),[u,c]=i,[h,d,p,f]=r.shape,g=e.data.get(r.dataId).values,m=new Float32Array(q([h,u,c,f])),y=[o&&u>1?d-1:d,o&&c>1?p-1:p],x=[o&&u>1?u-1:u,o&&c>1?c-1:c];let b=0;const w=y[0]/x[0],S=y[1]/x[1];for(let N=0;N<h;N++)for(let k=0;k<u;k++){let T;T=a?w*(k+.5)-.5:w*k;const $=Math.max(0,Math.floor(T)),R=T-$,M=Math.min(d-1,Math.ceil(T)),V=N*l[0]+$*l[1],W=N*l[0]+M*l[1];for(let H=0;H<c;H++){let K;K=a?S*(H+.5)-.5:S*H;const U=Math.max(0,Math.floor(K)),Y=K-U,X=Math.min(p-1,Math.ceil(K)),Q=V+U*l[2],re=W+U*l[2],ae=V+X*l[2],j=W+X*l[2];for(let J=0;J<f;J++){const ue=g[Q+J],le=g[re+J],Ee=ue+(g[ae+J]-ue)*Y;m[b++]=Ee+(le+(g[j+J]-le)*Y-Ee)*R}}}return e.makeTensorInfo([h,u,c,f],"float32",m)}},OG={kernelName:dh,backendName:"cpu",kernelFunc:function FG(n){const{inputs:t,backend:e,attrs:s}=n,{images:r,dy:o}=t,{alignCorners:a}=s;Ne([o,r],"resizeBilinearGrad");const i=Ae(r.shape),[l,u,c,h]=r.shape,[,d,p]=o.shape,f=new Float32Array(l*u*c*h),g=[a&&d>1?u-1:u,a&&p>1?c-1:c],m=[a&&d>1?d-1:d,a&&p>1?p-1:p],y=g[0]/m[0],x=g[1]/m[1],b=e.data.get(o.dataId).values;let w=0;for(let S=0;S<l;S++){const N=S*i[0];for(let k=0;k<d;k++){const T=k*y,$=Math.floor(T),R=Math.min(Math.ceil(T),u-1),M=N+$*i[1],V=N+R*i[1],W=T-$,H=1-W;for(let K=0;K<p;K++){const U=K*x,Y=Math.floor(U),X=Math.min(Math.ceil(U),c-1),Q=U-Y,re=1-Q,ae=M+Y*i[2],j=M+X*i[2],J=V+Y*i[2],ue=V+X*i[2],le=H*re,pe=H*Q,xe=W*re,Ee=W*Q;for(let Re=0;Re<h;Re++){const Pe=b[w++];f[ae+Re]+=Pe*le,f[j+Re]+=Pe*pe,f[J+Re]+=Pe*xe,f[ue+Re]+=Pe*Ee}}}}return e.makeTensorInfo([l,c,u,h],"float32",f)}},PG={kernelName:zl,backendName:"cpu",kernelFunc:function LG(n){const{inputs:t,backend:e,attrs:s}=n,{images:r}=t,{alignCorners:o,halfPixelCenters:a,size:i}=s;Ne(r,"resizeNearestNeighbor");const l=Ae(r.shape),[u,c]=i,[h,d,p,f]=r.shape,g=e.data.get(r.dataId).values,m=new Float32Array(h*u*c*f),y=[o&&u>1?d-1:d,o&&c>1?p-1:p],x=[o&&u>1?u-1:u,o&&c>1?c-1:c],b=y[0]/x[0],w=y[1]/x[1];let S=0;for(let N=0;N<h;N++){const k=N*l[0];for(let T=0;T<u;T++){const $=a?b*(T+.5):b*T;let R=Math.min(d-1,o?Math.round($):Math.floor($));a&&(R=Math.max(0,R));const M=k+R*l[1];for(let V=0;V<c;V++){const W=a?w*(V+.5):w*V;let H=Math.min(p-1,o?Math.round(W):Math.floor(W));a&&(H=Math.max(0,H));const K=M+H*l[2];for(let U=0;U<f;U++)m[S++]=g[K+U]}}}return e.makeTensorInfo([h,u,c,f],r.dtype,m)}},zG={kernelName:hh,backendName:"cpu",kernelFunc:function MG(n){const{inputs:t,backend:e,attrs:s}=n,{images:r,dy:o}=t,{alignCorners:a}=s;Ne([o,r],"resizeNearestNeighborGrad");const i=Ae(r.shape),l=Ae(o.shape),[u,c,h,d]=r.shape,[,p,f]=o.shape,g=new Float32Array(u*c*h*d),m=e.data.get(o.dataId).values,y=[a&&p>1?c-1:c,a&&f>1?h-1:h],x=[a&&p>1?p-1:p,a&&f>1?f-1:f],b=y[0]/x[0],w=y[1]/x[1],S=1/b,N=1/w,k=2*Math.ceil(S)+2,T=2*Math.ceil(N)+2;for(let $=0;$<u;$++){const R=$*i[0];for(let M=0;M<c;M++){const V=R+M*i[1],W=Math.floor(M*S),H=Math.floor(W-k/2);for(let K=0;K<h;K++){const U=V+K*i[2],Y=Math.floor(K*N),X=Math.floor(Y-T/2);for(let Q=0;Q<d;Q++){let re=0;for(let ae=0;ae<k;ae++){const j=ae+H;if(j<0||j>=p)continue;const J=R+j*l[1],ue=j*b;if(M===Math.min(c-1,a?Math.round(ue):Math.floor(ue)))for(let pe=0;pe<T;pe++){const xe=pe+X;if(xe<0||xe>=f)continue;const Ee=J+xe*l[2],Re=xe*w;K===Math.min(h-1,a?Math.round(Re):Math.floor(Re))&&(re+=m[Ee+Q])}}g[U+Q]=re}}}}return e.makeTensorInfo(r.shape,r.dtype,g)}},VG={kernelName:Vl,backendName:"cpu",kernelFunc:function BG(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{dims:o}=s;Ne(r,"reverse");const a=r.shape.length,i=je(o,r.shape);if(0===a)return or({inputs:{x:r},backend:e});const l=new Ht(r.shape,r.dtype),u=e.bufferSync(r);for(let c=0;c<l.size;c++){const h=l.indexToLoc(c),d=h.slice();i.forEach(p=>d[p]=r.shape[p]-1-d[p]),l.set(u.get(...d),...h)}return e.makeTensorInfo(l.shape,l.dtype,l.values)}},WG={kernelName:_h,backendName:"cpu",kernelFunc:({inputs:n,attrs:t,backend:e})=>{const{image:s}=n,{radians:r,fillValue:o,center:a}=t,i=e,l=on(s.dtype,q(s.shape)),[u,c,h,d]=s.shape,[p,f]=Cg(a,c,h),m=Math.sin(r),y=Math.cos(r),x=i.data.get(s.dataId).values;for(let w=0;w<u;w++){const S=w*h*c*d;for(let N=0;N<c;N++){const k=N*(h*d);for(let T=0;T<h;T++){const $=T*d;for(let R=0;R<d;R++){const M=[u,N,T,R],V=M[2],W=M[1];let H=(V-p)*y-(W-f)*m,K=(V-p)*m+(W-f)*y;H=Math.round(H+p),K=Math.round(K+f);let U=o;"number"!=typeof o&&(U=3===R?255:o[R]),H>=0&&H<h&&K>=0&&K<c&&(U=x[S+K*(h*d)+H*d+R]),l[S+k+$+R]=U}}}}return{dataId:i.write(l,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},UG=mt(Ha,n=>{const t=Math.floor(n);return n-t<.5?Math.floor(n):n-t>.5?Math.ceil(n):t%2==0?t:t+1}),GG={kernelName:Ha,backendName:"cpu",kernelFunc:UG},jG={kernelName:ph,backendName:"cpu",kernelFunc:function HG(n){const{inputs:t,backend:e,attrs:s}=n,{indices:r,updates:o}=t,{shape:a}=s,{sliceRank:i,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=Br(0,r,a),g=Qo(e.bufferSync(r),e.bufferSync(o),a,h,u,l,i,c,0,!0);return e.makeTensorInfo(a,g.dtype,g.values)}};function KG(n,t){let e=0,s=n.length,r=0;for(;e<s;)r=Math.floor((e+s)/2),n[r]<t?e=r+1:s=r;return s}function qG(n,t){let e=0,s=n.length,r=0;for(;e<s;)r=Math.floor((e+s)/2),n[r]<=t?e=r+1:s=r;return s}const YG={kernelName:mh,backendName:"cpu",kernelFunc:function ZG(n){const{inputs:t,backend:e,attrs:s}=n,{sortedSequence:r,values:o}=t,{side:a}=s,u=function XG(n,t,e,s,r,o){const a=Ot("int32",e*r);for(let i=0;i<e;++i){const l=n.slice(i*s,(i+1)*s),u=i*r;for(let c=0;c<r;++c)a[u+c]="left"===o?KG(l,t[c+u]):qG(l,t[c+u])}return a}(e.data.get(r.dataId).values,e.data.get(o.dataId).values,r.shape[0],r.shape[1],o.shape[1],a);return e.makeTensorInfo(o.shape,"int32",u)}},JG={kernelName:Wl,backendName:"cpu",kernelFunc:function QG(n){const{inputs:t,backend:e}=n,{condition:s,t:r,e:o}=t;Ne([s,r,o],"select");const a=s.shape.length,i=e.data.get(s.dataId).values,l=e.data.get(r.dataId).values,u=e.data.get(o.dataId).values,c=Pn(r.dtype,o.dtype),h=mn(q(r.shape),c);let d=0;const p=0===a||a>1||1===r.shape.length?1:q(r.shape.slice(1));for(let f=0;f<i.length;f++)for(let g=0;g<p;g++)h[d++]=1===i[f]?l[f]:u[f];return e.makeTensorInfo(r.shape,c,h)}},eH=Td,tH=$d,nH=mt(Ka,n=>n>=0?tH*n:eH*(Math.exp(n)-1)),sH={kernelName:Ka,backendName:"cpu",kernelFunc:nH},rH=mt(Za,n=>n<0?-1:n>0?1:0),oH={kernelName:Za,backendName:"cpu",kernelFunc:rH},aH=mt(qa,n=>Math.sin(n)),iH={kernelName:qa,backendName:"cpu",kernelFunc:aH},lH=mt(Xa,n=>Math.sinh(n)),uH={kernelName:Xa,backendName:"cpu",kernelFunc:lH},zN=Math.log(1.1920928955078125e-7)+2,cH=mt(Qa,n=>{const t=n>-zN,e=n<zN,s=Math.exp(n);let r;return r=e?s:t?n:Math.log(1+s),r}),hH={kernelName:Qa,backendName:"cpu",kernelFunc:cH},pH={kernelName:Hl,backendName:"cpu",kernelFunc:function dH(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{blockShape:o,paddings:a}=s;Ne([r],"spaceToBatchND");const i=q(o),l=[[0,0]];l.push(...a);for(let N=1+o.length;N<r.shape.length;++N)l.push([0,0]);const u=MN.kernelFunc({inputs:{x:r},backend:e,attrs:{paddings:l,constantValue:0}}),c=Du(u.shape,o,i,!1),h=Fu(c.length,o.length,!1),d=Ou(u.shape,o,i,!1),g=Ct({inputs:{x:u},backend:e,attrs:{shape:c}}),x=jn({inputs:{x:g},backend:e,attrs:{perm:h}}),S=Ct({inputs:{x},backend:e,attrs:{shape:d}});return e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(x),S}},mH={kernelName:gh,backendName:"cpu",kernelFunc:function fH(n){const{inputs:t,backend:e}=n,{indices:s,values:r,denseShape:o,defaultValue:a}=t;if(1!==o.shape.length)throw new Error(`Dense shape must be a vector, saw:\n        ${o.shape}`);if(2!==s.shape.length)throw new Error(`Indices must be a matrix, saw:\n        ${s.shape}`);if(1!==r.shape.length)throw new Error(`Values must be a vector, saw:\n        ${r.shape}`);if(0!==a.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${a.shape}`);const i=e.data.get(s.dataId).values,l=e.data.get(r.dataId).values,u=e.data.get(o.dataId).values,c=e.data.get(a.dataId).values[0],[h,d,p,f,g]=uN(i,s.shape,s.dtype,l,r.dtype,u,c);return[e.makeTensorInfo(d,s.dtype,h),e.makeTensorInfo([d[0]],r.dtype,p),e.makeTensorInfo([f.length],"bool",new Uint8Array(f.map(m=>Number(m)))),e.makeTensorInfo([g.length],s.dtype,new Int32Array(g))]}},yH={kernelName:yh,backendName:"cpu",kernelFunc:function gH(n){const{inputs:t,backend:e}=n,{inputIndices:s,inputShape:r,newShape:o}=t;if(2!==s.shape.length)throw new Error(`Input indices should be a matrix but received shape\n        ${s.shape}`);if(1!==r.shape.length)throw new Error(`Input shape should be a vector but received shape\n        ${r.shape}`);if(1!==o.shape.length)throw new Error(`Target shape should be a vector but received shape ${o.shape}`);const a=Array.from(e.data.get(r.dataId).values),i=e.data.get(s.dataId).values,l=Array.from(e.data.get(o.dataId).values),[u,c,h]=cN(i,s.shape,s.dtype,a,l);return[e.makeTensorInfo(c,s.dtype,u),e.makeTensorInfo([h.length],o.dtype,new Int32Array(h))]}},bH={kernelName:xh,backendName:"cpu",kernelFunc:function xH(n){const{inputs:t,backend:e}=n,{data:s,indices:r,segmentIds:o}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n          ${r.shape}`);if(1!==o.shape.length)throw new Error(`Segment ids should be a vector but received shape\n          ${o.shape}`);if(r.shape[0]!==o.shape[0])throw new Error("segmentIds and indices should have same size.");const a=e.data.get(s.dataId).values,i=e.data.get(r.dataId).values,l=e.data.get(o.dataId).values,[u,c]=fx(a,s.shape,s.dtype,i,l,!0);return e.makeTensorInfo(c,s.dtype,u)}},vH={kernelName:bh,backendName:"cpu",kernelFunc:function wH(n){const{inputs:t,backend:e}=n,{data:s,indices:r,segmentIds:o}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n         ${r.shape}`);if(1!==o.shape.length)throw new Error(`Segment ids should be a vector but received shape\n         ${o.shape}`);if(r.shape[0]!==o.shape[0])throw new Error("segmentIds and indices should have same size.");const a=e.data.get(s.dataId).values,i=e.data.get(r.dataId).values,l=e.data.get(o.dataId).values,[u,c]=fx(a,s.shape,s.dtype,i,l);return e.makeTensorInfo(c,s.dtype,u)}},CH={kernelName:wh,backendName:"cpu",kernelFunc:function SH(n){const{inputs:t,backend:e,attrs:s}=n,{sparseIndices:r,sparseValues:o,defaultValue:a}=t,{outputShape:i}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:h,outputSize:d}=Br(0,r,i),p=!1,f=e.bufferSync(r);let g;switch(o.dtype){case"bool":g=Qo(f,e.bufferSync(o),i,d,c,u,l,h,!!e.data.get(a.dataId).values[0],p);break;case"float32":case"int32":g=Qo(f,e.bufferSync(o),i,d,c,u,l,h,e.data.get(a.dataId).values[0],p);break;case"string":g=Qo(f,e.bufferSync(o),i,d,c,u,l,h,pr(e.data.get(a.dataId).values[0]),p);break;default:throw new Error(`Unsupported type ${o.dtype}`)}return e.makeTensorInfo(i,g.dtype,g.values)}},IH={kernelName:jl,backendName:"cpu",kernelFunc:function NH(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{numOrSizeSplits:o,axis:a}=s,i=je(a,r.shape)[0],l=zg(r,o,i),u=new Array(r.shape.length).fill(0),c=r.shape.slice();return l.map(h=>{const d=[...c];d[i]=h;const p=Jo({inputs:{x:r},backend:e,attrs:{begin:u,size:d}});return u[i]+=h,p})}},kH={kernelName:vh,backendName:"cpu",kernelFunc:({inputs:n,backend:t})=>{const{x:e}=n,s=t;Ne(e,"square");const r=s.data.get(e.dataId).values,o=new Float32Array(r.length);for(let i=0;i<r.length;++i){const l=r[i];o[i]=l*l}return{dataId:s.write(o,e.shape,e.dtype),shape:e.shape,dtype:e.dtype}}},TH=mt(oi,(n,t)=>{const e=t;return isNaN(n)?NaN:n>0?1:e.alpha}),$H={kernelName:oi,backendName:"cpu",kernelFunc:TH},_H={kernelName:Sh,backendName:"cpu",kernelFunc:function EH(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{begin:o,end:a,strides:i,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:d}=s;Ne(r,"stridedSlice");const{finalShapeSparse:p,finalShape:f,isIdentity:g,sliceDim0:m,isSimpleSlice:y,begin:x,end:b,strides:w}=rm(r.shape,o,a,i,l,u,c,h,d);let S;if(g)S=Ct({inputs:{x:r},backend:e,attrs:{shape:f}});else if(m||y){C(r.shape.length>=1,()=>`Input must have rank at least 1, got: ${r.shape.length}`);const N=tm(x,b,w),k=Jo({inputs:{x:r},backend:e,attrs:{begin:x,size:N}});S=Ct({inputs:{x:k},backend:e,attrs:{shape:f}}),e.disposeIntermediateTensorInfo(k)}else{const k=pN(p,e.bufferSync(r),w,x);S=e.makeTensorInfo(f,k.dtype,k.values)}return S}},RH={kernelName:Ch,backendName:"cpu",kernelFunc:function AH(n){const{inputs:t,backend:e,attrs:s}=n,{separator:r,nGramWidths:o,leftPad:a,rightPad:i,padWidth:l,preserveShortSequences:u}=s,{data:c,dataSplits:h}=t,d=e.data.get(c.dataId).values,p=e.data.get(h.dataId).values,[f,g]=fN(d,p,r,o,a,i,l,u);return[e.makeTensorInfo([f.length],"string",f),e.makeTensorInfo(h.shape,"int32",g)]}},FH={kernelName:Nh,backendName:"cpu",kernelFunc:function DH(n){const{inputs:t,backend:e,attrs:s}=n,{skipEmpty:r}=s,{input:o,delimiter:a}=t;if("string"!==o.dtype)throw new Error("Input must be of datatype string");if(1!==o.shape.length)throw new Error(`Input must be a vector, got shape: ${o.shape}`);if(0!==a.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${a.shape}`);const i=e.data.get(o.dataId).values,l=e.data.get(a.dataId).values[0],[u,c,h]=mN(i,l,r),d=c.length;return[e.makeTensorInfo([d,2],"int32",u),e.makeTensorInfo([d],"string",c),e.makeTensorInfo([2],"int32",new Int32Array(h))]}},LH={kernelName:Ih,backendName:"cpu",kernelFunc:function OH(n){const{inputs:t,backend:e,attrs:s}=n,{numBuckets:r}=s,{input:o}=t;if("string"!==o.dtype)throw new Error("Input must be of datatype string");if(r<=0)throw new Error("Number of buckets must be at least 1");const i=gN(e.data.get(o.dataId).values,r);return e.makeTensorInfo(o.shape,"int32",i)}},PH=mt(ni,n=>Math.tan(n)),MH={kernelName:ni,backendName:"cpu",kernelFunc:PH},zH=mt(si,n=>Math.tanh(n));function BN(n,t,e){switch(e){case"reflect":return function XH(n,t){let e=n;if(e<0)if(t<=1)e=0;else{const s=2*t;e<s&&(e=s*Math.trunc(-e/s)+e),e=e<-t?e+s:-e-1}else if(e>t-1)if(t<=1)e=0;else{const s=2*t;e-=s*Math.trunc(e/s),e>=t&&(e=s-e-1)}return Fr(0,e,t-1)}(n,t);case"wrap":return function ZH(n,t){let e=n;return e<0?t<=1?e=0:e+=t*(Math.trunc(-e/(t-1))+1):e>t-1&&(t<=1?e=0:e-=t*Math.trunc(e/(t-1))),Fr(0,e,t-1)}(n,t);case"nearest":return function QH(n,t){return Fr(0,n,t-1)}(n,t);default:return function YH(n,t){return n}(n)}}function nc(n,t,e,s,r,o,a,i,l,u,c){return 0<=i&&i<t&&0<=l&&l<e?n[a*s+i*r+l*o+u]:c}function JH(n,t,e,s,r,o,a,i,l,u,c){return nc(n,t,e,s,r,o,a,Math.round(i),Math.round(l),u,c)}function ej(n,t,e,s,r,o,a,i,l,u,c){const h=Math.floor(i),d=Math.floor(l),p=h+1,f=d+1;return(p-i)*((f-l)*nc(n,t,e,s,r,o,a,h,d,u,c)+(l-d)*nc(n,t,e,s,r,o,a,h,f,u,c))+(i-h)*((f-l)*nc(n,t,e,s,r,o,a,p,d,u,c)+(l-d)*nc(n,t,e,s,r,o,a,p,f,u,c))}const ij=[sW,MB,oW,iW,GB,uW,hW,pW,mW,yW,bW,vW,CW,kW,$W,AW,DW,OW,PW,tW,zW,VW,UW,jB,HW,WB,qB,KW,zB,qW,ZW,YW,JW,t4,s4,o4,i4,u4,h4,p4,m4,y4,b4,v4,S4,N4,k4,$4,E4,_4,A4,D4,L4,qV,M4,XB,j4,ZB,K4,QB,J4,eU,nU,eV,nV,rU,aU,lU,cU,rV,aV,BB,dU,XW,fU,gU,xU,XV,lV,cV,wU,dV,SU,IU,TU,_U,RU,FU,OU,fV,PU,zU,VU,UU,HU,KU,XU,gV,YU,eG,sG,xV,wV,aG,uG,dG,SV,fG,gG,yG,MN,vG,YV,IV,CG,IG,TG,EG,VB,xx,AG,QV,JV,eW,DG,OG,PG,zG,VG,WG,GG,DV,jG,YG,JG,sH,OV,oH,iH,uH,LV,tG,hH,pH,mH,yH,bH,vH,CH,IH,zV,kH,VV,UV,$H,_H,RH,FH,LH,KV,F4,MH,{kernelName:si,backendName:"cpu",kernelFunc:zH},{kernelName:fh,backendName:"cpu",kernelFunc:function VH(n){const{inputs:t,backend:e}=n,{tensor:s,indices:r,updates:o}=t,{sliceRank:a,numUpdates:i,sliceSize:l,strides:u,outputSize:c}=Br(0,r,s.shape),d=e.bufferSync(r),p=e.bufferSync(o),f=e.bufferSync(s),g=Qo(d,p,s.shape,c,l,i,a,u,f,!1);return e.makeTensorInfo(s.shape,g.dtype,g.values)}},{kernelName:ri,backendName:"cpu",kernelFunc:function UH(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{reps:o}=s;Ne(r,"tile");const a=xN(e.bufferSync(r),o);return e.makeTensorInfo(a.shape,a.dtype,a.values)}},{kernelName:kh,backendName:"cpu",kernelFunc:function HH(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{k:o,sorted:a}=s;Ne(r,"topk");const i=e.data.get(r.dataId).values,[l,u]=wN(i,r.shape,r.dtype,o,a);return[e.makeTensorInfo(l.shape,l.dtype,l.values),e.makeTensorInfo(u.shape,u.dtype,u.values)]}},{kernelName:Th,backendName:"cpu",kernelFunc:function KH(n){const{inputs:t,attrs:e,backend:s}=n,{image:r,transforms:o}=t,{interpolation:a,fillMode:i,fillValue:l,outputShape:u}=e,[c,h,d,p]=r.shape,[f,g]=u??[h,d],m=[c,f,g,p],y=Ae(r.shape),x=y[0],b=y[1],w=y[2],S=Ae(m),N=S[0],k=S[1],T=S[2],$=on(r.dtype,q(m));$.fill(l);const R=s.data.get(r.dataId).values,M=s.data.get(o.dataId).values;for(let W=0;W<c;++W){const H=1===o.shape[0]?M:M.subarray(8*W,8*W+8);for(let K=0;K<f;++K)for(let U=0;U<g;++U)for(let Y=0;Y<p;++Y){let X;const Q=H[6]*U+H[7]*K+1;if(0===Q)continue;const ae=(H[3]*U+H[4]*K+H[5])/Q,j=BN((H[0]*U+H[1]*K+H[2])/Q,d,i),J=BN(ae,h,i);switch(a){case"nearest":X=JH(R,h,d,x,b,w,W,J,j,Y,l);break;case"bilinear":X=ej(R,h,d,x,b,w,W,J,j,Y,l);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${a}`)}$[W*N+K*k+U*T+Y]=X}return s.makeTensorInfo(m,r.dtype,$)}return{dataId:s.write($,m,r.dtype),shape:r.shape,dtype:r.dtype}}},CV,{kernelName:$h,backendName:"cpu",kernelFunc:function tj(n){const{inputs:t,attrs:e,backend:s}=n,{axis:r}=e,{x:o}=t;Ne(o,"unique");const a=s.data.get(o.dataId).values,{outputValues:i,outputShape:l,indices:u}=vN(a,r,o.shape,o.dtype);return[s.makeTensorInfo(l,o.dtype,i),s.makeTensorInfo([u.length],"int32",u)]}},{kernelName:Xl,backendName:"cpu",kernelFunc:function sj(n){const{inputs:t,backend:e,attrs:s}=n,{value:r}=t;let{axis:o}=s;o<0&&(o+=r.shape.length);const a=r.shape.length,i=r.shape[o],l=new Array(a-1);let u=0;for(let p=0;p<a;p++)p!==o&&(l[u++]=r.shape[p]);const c=new Array(a).fill(0),h=r.shape.slice();h[o]=1;const d=new Array(i);for(let p=0;p<d.length;p++){c[o]=p;const f=Jo({inputs:{x:r},backend:e,attrs:{begin:c,size:h}});d[p]=Ct({inputs:{x:f},backend:e,attrs:{shape:l}}),e.disposeIntermediateTensorInfo(f)}return d}},{kernelName:Zl,backendName:"cpu",kernelFunc:function oj(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,segmentIds:o}=t,{numSegments:a}=s;Ne(r,"unsortedSegmentSum");const u=[],c=[],h=r.shape.length-o.shape.length;let d=o;for(let f=0;f<h;++f){const g=xp({inputs:{input:d},backend:e,attrs:{dim:f+1}});d=g,c.push(g)}for(let f=0;f<a;++f){const g=dr(f,"int32"),m=e.makeTensorInfo([],"int32",g),y=RC({inputs:{a:m,b:d},backend:e}),x=oo({inputs:{x:y},backend:e,attrs:{dtype:"float32"}}),b=mp({inputs:{a:x,b:r},backend:e}),w=tc({inputs:{x:b},backend:e,attrs:{axis:0,keepDims:!1}});u.push(w),c.push(m),c.push(y),c.push(x),c.push(b),c.push(w)}const p=PN({inputs:u,backend:e,attrs:{axis:0}});return c.forEach(f=>e.disposeIntermediateTensorInfo(f)),p}},mG];for(const n of ij)Rh(n);const io={},wp={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function VN(n,t){io[n]=t}function Us(n,t){if(!(n in io)||null!=t){const s=function uj(n,t){if(1!==n&&2!==n)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const e=t??function lj(n){if(!B().getBool("IS_SAFARI")&&typeof OffscreenCanvas<"u"&&2===n)return new OffscreenCanvas(300,150);if(typeof document<"u")return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(n);return e.addEventListener("webglcontextlost",s=>{s.preventDefault(),delete io[n]},!1),B().getBool("SOFTWARE_WEBGL_ENABLED")&&(wp.failIfMajorPerformanceCaveat=!1),1===n?e.getContext("webgl",wp)||e.getContext("experimental-webgl",wp):e.getContext("webgl2",wp)}(n,t);if(null===s)return console.log("Could not get context for WebGL version",n),null;io[n]=s}const e=io[n];return null==e||e.isContextLost()?(delete io[n],Us(n)):(e.disable(e.DEPTH_TEST),e.disable(e.STENCIL_TEST),e.disable(e.BLEND),e.disable(e.DITHER),e.disable(e.POLYGON_OFFSET_FILL),e.disable(e.SAMPLE_COVERAGE),e.enable(e.SCISSOR_TEST),e.enable(e.CULL_FACE),e.cullFace(e.BACK),io[n])}var vp=function(n){return n[n.DENSE=0]="DENSE",n[n.SHARED_BATCH=1]="SHARED_BATCH",n}(vp||{}),ks=function(n){return n[n.RENDER=0]="RENDER",n[n.UPLOAD=1]="UPLOAD",n[n.PIXELS=2]="PIXELS",n[n.DOWNLOAD=3]="DOWNLOAD",n}(ks||{}),kn=function(n){return n[n.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",n[n.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",n[n.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",n[n.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",n[n.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16",n}(kn||{});function sc(n,t){return[t,n]}function Sp(n){const t=q(n);return bc(Math.ceil(t/4))}function Pi(n,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(n/2))]}function vx(n,t){const e=n;let s,r,o,a,i,l,u,c,h,d;return 2===B().getNumber("WEBGL_VERSION")?(s=e.R32F,r=e.R16F,o=e.RGBA16F,a=e.RGBA32F,i=e.RED,u=4,c=1,h=e.HALF_FLOAT,d=e.FLOAT,l=e.RGBA8):(s=n.RGBA,r=n.RGBA,o=n.RGBA,a=e.RGBA,i=n.RGBA,u=4,c=4,h=null!=t?t.HALF_FLOAT_OES:null,d=n.FLOAT,l=n.RGBA),{internalFormatFloat:s,internalFormatHalfFloat:r,internalFormatPackedHalfFloat:o,internalFormatPackedFloat:a,textureFormatFloat:i,downloadTextureFormat:l,downloadUnpackNumChannels:u,defaultNumChannels:c,textureTypeHalfFloat:h,textureTypeFloat:d}}function me(n,t){const e=t();return B().getBool("DEBUG")&&function dj(n){const t=n.getError();if(t!==n.NO_ERROR)throw new Error("WebGL Error: "+UN(n,t))}(n),e}const pj=5.96e-8,fj=65504;function WN(n){return!!(B().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===n||pj<Math.abs(n)&&Math.abs(n)<fj)}function UN(n,t){switch(t){case n.NO_ERROR:return"NO_ERROR";case n.INVALID_ENUM:return"INVALID_ENUM";case n.INVALID_VALUE:return"INVALID_VALUE";case n.INVALID_OPERATION:return"INVALID_OPERATION";case n.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case n.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case n.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}function rc(n,t){return Er(n,()=>n.getExtension(t),'Extension "'+t+'" not supported on this browser.')}function GN(n,t){const e=Er(n,()=>n.createShader(n.VERTEX_SHADER),"Unable to create vertex WebGLShader.");if(me(n,()=>n.shaderSource(e,t)),me(n,()=>n.compileShader(e)),!1===n.getShaderParameter(e,n.COMPILE_STATUS))throw console.log(n.getShaderInfoLog(e)),new Error("Failed to compile vertex shader.");return e}function HN(n,t){const e=Er(n,()=>n.createShader(n.FRAGMENT_SHADER),"Unable to create fragment WebGLShader.");if(me(n,()=>n.shaderSource(e,t)),me(n,()=>n.compileShader(e)),B().get("ENGINE_COMPILE_ONLY"))return e;if(!1===n.getShaderParameter(e,n.COMPILE_STATUS))throw Sx(t,n.getShaderInfoLog(e)),new Error("Failed to compile fragment shader.");return e}const mj=/ERROR: [0-9]+:([0-9]+):/g;function Sx(n,t){const e=mj.exec(t);if(null==e)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(n);const s=+e[1],r=n.split("\n"),o=r.length.toString().length+2,a=r.map((h,d)=>xo((d+1).toString(),o)+h);let i=0;for(let h=0;h<a.length;h++)i=Math.max(a[h].length,i);const l=a.slice(0,s-1),u=a.slice(s-1,s),c=a.slice(s);console.log(l.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${xo(u[0],i)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}function jN(n){return Er(n,()=>n.createProgram(),"Unable to create WebGLProgram.")}function KN(n,t){if(me(n,()=>n.linkProgram(t)),!B().get("ENGINE_COMPILE_ONLY")&&!1===n.getProgramParameter(t,n.LINK_STATUS))throw console.log(n.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}function Cp(n,t){if(me(n,()=>n.validateProgram(t)),!1===n.getProgramParameter(t,n.VALIDATE_STATUS))throw console.log(n.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function qN(n,t){const e=Er(n,()=>n.createBuffer(),"Unable to create WebGLBuffer");return me(n,()=>n.bindBuffer(n.ARRAY_BUFFER,e)),me(n,()=>n.bufferData(n.ARRAY_BUFFER,t,n.STATIC_DRAW)),e}function XN(n,t){const e=Er(n,()=>n.createBuffer(),"Unable to create WebGLBuffer");return me(n,()=>n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,e)),me(n,()=>n.bufferData(n.ELEMENT_ARRAY_BUFFER,t,n.STATIC_DRAW)),e}function gj(){return 2===B().getNumber("WEBGL_VERSION")?1:4}function ZN(n){return Er(n,()=>n.createTexture(),"Unable to create WebGLTexture.")}function YN(n,t){const e=B().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(n<=0||t<=0)throw new Error(`Requested texture size [${n}x${t}] is invalid.`);if(n>e||t>e)throw new Error(`Requested texture size [${n}x${t}] greater than WebGL maximum on this browser / GPU [${e}x${e}].`)}function QN(n){return Er(n,()=>n.createFramebuffer(),"Unable to create WebGLFramebuffer.")}function Cx(n,t,e,s,r,o,a){const i=n.getAttribLocation(t,e);return-1!==i&&(me(n,()=>n.bindBuffer(n.ARRAY_BUFFER,s)),me(n,()=>n.vertexAttribPointer(i,r,n.FLOAT,!1,o,a)),me(n,()=>n.enableVertexAttribArray(i)),!0)}function JN(n,t,e){rI(n,e),me(n,()=>n.activeTexture(n.TEXTURE0+e)),me(n,()=>n.bindTexture(n.TEXTURE_2D,t))}function yj(n,t){rI(n,t),me(n,()=>n.activeTexture(n.TEXTURE0+t)),me(n,()=>n.bindTexture(n.TEXTURE_2D,null))}function eI(n,t,e){return Er(n,()=>n.getUniformLocation(t,e),'uniform "'+e+'" not present in program.')}function tI(n,t,e){return n.getUniformLocation(t,e)}function nI(n,t,e,s){me(n,()=>JN(n,t,s)),me(n,()=>n.uniform1i(e,s))}function xj(n){me(n,()=>n.bindFramebuffer(n.FRAMEBUFFER,null)),me(n,()=>n.viewport(0,0,n.canvas.width,n.canvas.height)),me(n,()=>n.scissor(0,0,n.canvas.width,n.canvas.height))}function Np(n,t,e){me(n,()=>n.bindFramebuffer(n.FRAMEBUFFER,e)),me(n,()=>n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,t,0))}function Nx(n,t){me(n,()=>n.bindFramebuffer(n.FRAMEBUFFER,t)),me(n,()=>n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,null,0))}function oc(n){const t=n.checkFramebufferStatus(n.FRAMEBUFFER);if(t!==n.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+sI(n,t))}function sI(n,t){switch(t){case n.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case n.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case n.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case n.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}function Er(n,t,e){const s=me(n,()=>t());if(null==s)throw new Error(e);return s}function rI(n,t){const e=n.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,s=t+n.TEXTURE0;if(s<n.TEXTURE0||s>e)throw new Error(`textureUnit must be in [gl.TEXTURE0, gl.TEXTURE${e}].`)}function ea(n,t=2){return q(n.slice(0,n.length-t))}function ta(n){if(0===n.length)throw Error("Cannot get rows and columns of an empty shape array.");return[n.length>1?n[n.length-2]:1,n[n.length-1]]}function ac(n){let t=[1,1,1];return 0===n.length||1===n.length&&1===n[0]||(t=[ea(n),...ta(n)]),t}function oI(n,t=!1){let e=B().getNumber("WEBGL_MAX_TEXTURE_SIZE"),s=B().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");s===1/0&&B().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE")&&(s=e/2),t&&(e*=2,s*=2,1===(n=n.map((i,l)=>l>=n.length-2?xc(n[l]):n[l])).length&&(n=[2,n[0]])),2!==n.length&&(n=cr(n).newShape);let r=q(n),o=null;n.length<=1&&r<=e?o=[1,r]:2===n.length&&n[0]<=e&&n[1]<=e?o=n:3===n.length&&n[0]*n[1]<=e&&n[2]<=e?o=[n[0]*n[1],n[2]]:3===n.length&&n[0]<=e&&n[1]*n[2]<=e?o=[n[0],n[1]*n[2]]:4===n.length&&n[0]*n[1]*n[2]<=e&&n[3]<=e?o=[n[0]*n[1]*n[2],n[3]]:4===n.length&&n[0]<=e&&n[1]*n[2]*n[3]<=e&&(o=[n[0],n[1]*n[2]*n[3]]);const a=null!=o&&Math.max(...o)>s&&Math.min(...o)<=(t?2:1)&&Math.min(...o)>0;if(null==o||a)if(t){const i=ea(n);let l=2,u=2;n.length&&([l,u]=ta(n)),r=i*(l/2)*(u/2),o=bc(r).map(c=>2*c)}else o=bc(r);return o}function Ip(n){return n%2==0}function ic(n,t){if(Ye(n=n.slice(-2),t=t.slice(-2))||!n.length||!t.length||0===n[0]||0===n[1]||0===t[0]||0===t[1])return!0;if(n.length!==t.length){const e=n[n.length-1],s=t[t.length-1];if(e===s||Ip(e)&&Ip(s)&&(1===n[0]||1===t[0]))return!0}return n[1]===t[1]&&Ip(n[0])&&Ip(t[0])}let kp,Tp;function aI(n){if(null==kp){const t=Us(n);kp=t.getParameter(t.MAX_TEXTURE_SIZE)}return kp}function bj(){kp=null}function wj(){Tp=null}function iI(n){if(null==Tp){const t=Us(n);Tp=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,Tp)}function lI(n){if(0===n)return 0;let t;const e=Us(n);return t=ms(e,"EXT_disjoint_timer_query_webgl2")&&2===n?2:ms(e,"EXT_disjoint_timer_query")?1:0,t}function ms(n,t){return null!=n.getExtension(t)}function Ix(n){try{if(null!=Us(n))return!0}catch(t){return console.log("Error when getting WebGL context: ",t),!1}return!1}function uI(n){if(0===n)return!1;const t=Us(n);if(1===n){if(!ms(t,"OES_texture_float"))return!1}else if(!ms(t,"EXT_color_buffer_float"))return!1;return kx(t)}function cI(n){if(0===n)return!1;const t=Us(n);if(1!==n){if(ms(t,"EXT_color_buffer_float"))return kx(t);const s="EXT_color_buffer_half_float";if(ms(t,s)){const r=t.getExtension(s);return function vj(n,t){const e=vx(n,t),s=n.createTexture();n.bindTexture(n.TEXTURE_2D,s);n.texImage2D(n.TEXTURE_2D,0,e.internalFormatHalfFloat,1,1,0,e.textureFormatFloat,e.textureTypeHalfFloat,null);const a=n.createFramebuffer();n.bindFramebuffer(n.FRAMEBUFFER,a),n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,s,0);const i=n.checkFramebufferStatus(n.FRAMEBUFFER)===n.FRAMEBUFFER_COMPLETE;return n.bindTexture(n.TEXTURE_2D,null),n.bindFramebuffer(n.FRAMEBUFFER,null),n.deleteTexture(s),n.deleteFramebuffer(a),i}(t,r)}return!1}return!(!ms(t,"OES_texture_float")||!ms(t,"WEBGL_color_buffer_float"))&&kx(t)}function kx(n){const t=vx(n),e=n.createTexture();n.bindTexture(n.TEXTURE_2D,e),n.texImage2D(n.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const o=n.createFramebuffer();n.bindFramebuffer(n.FRAMEBUFFER,o),n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,e,0);const a=n.checkFramebufferStatus(n.FRAMEBUFFER)===n.FRAMEBUFFER_COMPLETE;return n.bindTexture(n.TEXTURE_2D,null),n.bindFramebuffer(n.FRAMEBUFFER,null),n.deleteTexture(e),n.deleteFramebuffer(o),a}function hI(n){return 2===n&&null!=Us(n).fenceSync}function Mi(n,t){Array.isArray(n)||(n=[n]),n.forEach(e=>{null!=e&&C("complex64"!==e.dtype,()=>`${t} does not support complex64 tensors in the WebGL backend.`)})}const ke=B();function Fn(){let n,t,e,s,r,o,a,i,l,u;return 2===B().getNumber("WEBGL_VERSION")?(n="#version 300 es",t="in",e="out",s="in",r="texture",o="outputColor",a="out vec4 outputColor;",i=B().getBool("WEBGL2_ISNAN_CUSTOM")?"\n      bool isnan_custom(float val) {\n        uint floatToUint = floatBitsToUint(val);\n        return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ":"",l="",u="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(n="",t="attribute",e="varying",s="varying",r="texture2D",o="gl_FragColor",a="",i="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",l="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",u="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:n,attribute:t,varyingVs:e,varyingFs:s,texture2D:r,output:o,defineOutput:a,defineSpecialNaN:i,defineSpecialInf:l,defineRound:u}}function na(n,t,e="index"){const s=Ae(t);return s.map((r,o)=>`int ${n[o]} = ${e} / ${r}; ${o===s.length-1?`int ${n[o+1]} = ${e} - ${n[o]} * ${r}`:`index -= ${n[o]} * ${r}`};`).join("")}function $p(n,t,e="index"){const s=Ae(t);return s.map((r,o)=>`int ${n[o]} = ${e} / outShapeStrides[${o}]; ${o===s.length-1?`int ${n[o+1]} = ${e} - ${n[o]} * outShapeStrides[${o}]`:`index -= ${n[o]} * outShapeStrides[${o}]`};`).join("")}function Tx(n){const t=Ae(n).map(e=>e.toString());return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}ke.registerFlag("HAS_WEBGL",()=>ke.getNumber("WEBGL_VERSION")>0),ke.registerFlag("WEBGL_VERSION",()=>Ix(2)?2:Ix(1)?1:0),ke.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",()=>!1),ke.registerFlag("WEBGL_BUFFER_SUPPORTED",()=>2===ke.get("WEBGL_VERSION")),ke.registerFlag("WEBGL_CPU_FORWARD",()=>!0),ke.registerFlag("WEBGL_FORCE_F16_TEXTURES",()=>!1),ke.registerFlag("WEBGL_PACK",()=>ke.getBool("HAS_WEBGL")),ke.registerFlag("WEBGL_PACK_NORMALIZATION",()=>ke.getBool("WEBGL_PACK")),ke.registerFlag("WEBGL_PACK_CLIP",()=>ke.getBool("WEBGL_PACK")),ke.registerFlag("WEBGL_PACK_DEPTHWISECONV",()=>ke.getBool("WEBGL_PACK")),ke.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",()=>ke.getBool("WEBGL_PACK")),ke.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",()=>ke.getBool("WEBGL_PACK")),ke.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",()=>ke.getBool("WEBGL_PACK")),ke.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",()=>ke.getBool("WEBGL_PACK")),ke.registerFlag("WEBGL_PACK_REDUCE",()=>ke.getBool("WEBGL_PACK")),ke.registerFlag("WEBGL_LAZILY_UNPACK",()=>ke.getBool("WEBGL_PACK")),ke.registerFlag("WEBGL_CONV_IM2COL",()=>ke.getBool("WEBGL_PACK")),ke.registerFlag("WEBGL_PACK_CONV2DTRANSPOSE",()=>ke.getBool("WEBGL_PACK")),ke.registerFlag("WEBGL_MAX_TEXTURE_SIZE",()=>aI(ke.getNumber("WEBGL_VERSION"))),ke.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",()=>iI(ke.getNumber("WEBGL_VERSION"))),ke.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",()=>{const n=ke.getNumber("WEBGL_VERSION");return 0===n?0:lI(n)}),ke.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",()=>ke.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!df()),ke.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",()=>uI(ke.getNumber("WEBGL_VERSION"))),ke.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",()=>!ke.getBool("WEBGL_FORCE_F16_TEXTURES")&&ke.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")),ke.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",()=>cI(ke.getNumber("WEBGL_VERSION"))),ke.registerFlag("WEBGL_FENCE_API_ENABLED",()=>hI(ke.getNumber("WEBGL_VERSION"))),ke.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",()=>ke.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0),ke.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",()=>-1,n=>{if("number"!=typeof n)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be a number but got ${n}.`);if(n<0&&-1!==n)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${n}.`)}),ke.registerFlag("WEBGL_FLUSH_THRESHOLD",()=>df()?1:-1,n=>{if("number"!=typeof n)throw new Error(`WEBGL_FLUSH_THRESHOLD must be a number but got ${n}.`);if(n<0&&-1!==n)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${n}.`)}),ke.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",()=>128),ke.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",()=>!1),ke.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",()=>1e5),ke.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",()=>128),ke.registerFlag("WEBGL_EXP_CONV",()=>!1),ke.registerFlag("SOFTWARE_WEBGL_ENABLED",()=>ke.getBool("IS_TEST")),ke.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE",()=>1/0),ke.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE",()=>!1),ke.registerFlag("WEBGL2_ISNAN_CUSTOM",()=>!1),ke.registerFlag("ENGINE_COMPILE_ONLY",()=>!1);const dI="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:pI}=Te;function Nj(n,t,e){const s=[];if(n.forEach(p=>{const f=q(p.shapeInfo.logicalShape);if(p.shapeInfo.isUniform?s.push(`uniform float ${p.name}${f>1?`[${f}]`:""};`):(s.push(`uniform sampler2D ${p.name};`),s.push(`uniform int offset${p.name};`)),e.enableShapeUniforms){const{uniformShape:g}=Ex(e.packedInputs,p.shapeInfo.logicalShape,p.shapeInfo.texShape);switch(g.length){case 1:s.push(`uniform int ${p.name}Shape;`);break;case 2:s.push(`uniform ivec2 ${p.name}Shape;`);break;case 3:s.push(`uniform ivec3 ${p.name}Shape;`);break;case 4:s.push(`uniform ivec4 ${p.name}Shape;`)}s.push(`uniform ivec2 ${p.name}TexShape;`)}}),e.enableShapeUniforms){switch(t.logicalShape.length){case 1:s.push("uniform int outShape;");break;case 2:s.push("uniform ivec2 outShape;"),s.push("uniform int outShapeStrides;");break;case 3:s.push("uniform ivec3 outShape;"),s.push("uniform ivec2 outShapeStrides;");break;case 4:s.push("uniform ivec4 outShape;"),s.push("uniform ivec3 outShapeStrides;")}s.push("uniform ivec2 outTexShape;")}e.customUniforms&&e.customUniforms.forEach(p=>{s.push(`uniform ${p.type} ${p.name}${p.arrayIndex?`[${p.arrayIndex}]`:""};`)});const r=s.join("\n"),o=n.map(p=>function Ij(n,t,e=!1,s){let r="";r+=e?fI(n,s):zi(n,s);return n.shapeInfo.logicalShape.length<=t.logicalShape.length&&(r+=e?function rK(n,t){const e=n.name,s=e.charAt(0).toUpperCase()+e.slice(1),r="get"+s+"AtOutCoords",o=n.shapeInfo.logicalShape.length,a=t.logicalShape.length,i=pI(n.shapeInfo.logicalShape,t.logicalShape),l=yt(a),u=a-o;let c;const h=["x","y","z","w","u","v"];c=0===o?"":a<2&&i.length>=1?"coords = 0;":i.map(x=>`coords.${h[x+u]} = 0;`).join("\n");let d="";d=a<2&&o>0?"coords":n.shapeInfo.logicalShape.map((x,b)=>`coords.${h[b+u]}`).join(", ");let p="return outputValue;";const g=1===q(n.shapeInfo.logicalShape),y=1===q(t.logicalShape);if(1!==o||g||y){if(g&&!y)p=1===a?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(i.length){const x=o-2,b=o-1;i.indexOf(x)>-1&&i.indexOf(b)>-1?p="return vec4(outputValue.x);":i.indexOf(x)>-1?p="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":i.indexOf(b)>-1&&(p="return vec4(outputValue.xx, outputValue.zz);")}}else p="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${r}() {\n      ${l} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${s}(${d});\n      ${p}\n    }\n  `}(n,t):function oK(n,t){const e=n.name,s=e.charAt(0).toUpperCase()+e.slice(1),r="get"+s+"AtOutCoords",i=n.shapeInfo.logicalShape.length,l=t.logicalShape.length;if(!n.shapeInfo.isUniform&&i===l&&null==n.shapeInfo.flatOffset&&Ye(n.shapeInfo.texShape,t.texShape))return`\n      float ${r}() {\n        return sampleTexture(${e}, resultUV);\n      }\n    `;const u=yt(l),c=pI(n.shapeInfo.logicalShape,t.logicalShape),h=l-i;let d;const p=["x","y","z","w","u","v"];d=0===i?"":l<2&&c.length>=1?"coords = 0;":c.map(g=>`coords.${p[g+h]} = 0;`).join("\n");let f="";return f=l<2&&i>0?"coords":n.shapeInfo.logicalShape.map((g,m)=>`coords.${p[m+h]}`).join(", "),`\n    float ${r}() {\n      ${u} coords = getOutputCoords();\n      ${d}\n      return get${s}(${f});\n    }\n  `}(n,t)),r}(p,t,e.packedInputs,e.enableShapeUniforms)).join("\n"),a=t.texShape,i=Fn(),l=function $j(n){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${n.texture2D}(textureSampler, uv).r;\n    }\n  `}(i);let u,c,h=function Aj(n){return`${n.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${n.varyingFs} vec2 resultUV;\n    ${n.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${n.defineSpecialNaN}\n    ${n.defineSpecialInf}\n    ${n.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${Rj}\n    ${Dj}\n    ${Fj}\n  `}(i);return t.isPacked?(u=function kj(n,t,e){switch(n.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function Lj(n,t,e){const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];return 1===s[0]?e?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${s[1]}.0);\n      }\n    `:1===s[1]?e?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${s[0]}.0);\n      }\n    `:e?"\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      return 2 * (resTexRC.x * ${s[1]} + resTexRC.y);\n    }\n  `}(0,t,e);case 2:return function Gj(n,t,e){const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(Ye(n,t))return e?"\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${s[0]}, ${s[1]}));\n      }\n    `;const r=Math.ceil(n[1]/2);return e?"\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(n,t,e);case 3:return function Mj(n,t,e){if(e)return"\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(n[2]/2),o=r*Math.ceil(n[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n\n      int b = index / ${o};\n      index -= b * ${o};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(n,t,e);default:return function Bj(n,t,e){if(e)return"\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  ";const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(n[n.length-1]/2),o=r*Math.ceil(n[n.length-2]/2);let a=o,i="",l="b, r, c";for(let u=2;u<n.length-1;u++)a*=n[n.length-u-1],i=`\n      int b${u} = index / ${a};\n      index -= b${u} * ${a};\n    `+i,l=`b${u}, `+l;return`\n    ivec${n.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n\n      ${i}\n\n      int b = index / ${o};\n      index -= b * ${o};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec${n.length}(${l});\n    }\n  `}(n,t,e)}}(t.logicalShape,a,e.enableShapeUniforms),c=function _j(n){return`\n    void setOutput(vec4 val) {\n      ${n.output} = val;\n    }\n  `}(i)):(u=function Tj(n,t,e){switch(n.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function Pj(n,t,e){return 1===t[0]?e?"\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.x * ${t[1]}.0);\n      }\n    `:1===t[1]?e?"\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.y * ${t[0]}.0);\n      }\n    `:e?"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return resTexRC.x * ${t[1]} + resTexRC.y;\n    }\n  `}(0,t,e);case 2:return function Hj(n,t,e){return Ye(n,t)?e?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `:1===n[1]?e?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `:1===n[0]?e?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `:e?"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${n[1]};\n      int c = index - r * ${n[1]};\n      return ivec2(r, c);\n    }\n  `}(n,t,e);case 3:return function zj(n,t,e){if(e)return`\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${$p(["r","c","d"],n)}\n    return ivec3(r, c, d);\n  }\n`;const s=na(["r","c","d"],n);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${s}\n      return ivec3(r, c, d);\n    }\n  `}(n,t,e);case 4:return function Vj(n,t,e){if(e)return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${$p(["r","c","d","d2"],n)}\n      return ivec4(r, c, d, d2);\n    }\n  `;const s=na(["r","c","d","d2"],n);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${s}\n      return ivec4(r, c, d, d2);\n    }\n  `}(n,t,e);case 5:return function Wj(n,t){const e=na(["r","c","d","d2","d3"],n);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${e}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(n,t);case 6:return function Uj(n,t){const e=na(["r","c","d","d2","d3","d4"],n);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${e}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(n,t);default:throw new Error(`${n.length}-D output sampling is not yet supported`)}}(t.logicalShape,a,e.enableShapeUniforms),c=function Ej(n){return`\n    void setOutput(float val) {\n      ${n.output} = vec4(val, 0, 0, 0);\n    }\n  `}(i)),e.packedInputs&&(h+=Oj),[h,l,c,r,u,o,e.userCode].join("\n")}function zi(n,t=!1){const e=n.shapeInfo.logicalShape;switch(e.length){case 0:return function Kj(n,t){const e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1);if(n.shapeInfo.isUniform)return`float ${s}() {return ${e};}`;const[r,o]=n.shapeInfo.texShape;if(1===r&&1===o)return`\n      float ${s}() {\n        return sampleTexture(${e}, halfCR);\n      }\n    `;const a=sa(e);if(t)return`\n    float ${s}() {\n      vec2 uv = uvFromFlat(${e}TexShape[0], ${e}TexShape[1], ${a});\n      return sampleTexture(${e}, uv);\n    }\n  `;const[i,l]=n.shapeInfo.texShape;return`\n    float ${s}() {\n      vec2 uv = uvFromFlat(${i}, ${l}, ${a});\n      return sampleTexture(${e}, uv);\n    }\n  `}(n,t);case 1:return function Xj(n,t){const e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1);if(n.shapeInfo.isUniform)return`\n      float ${s}(int index) {\n        ${Bi(n)}\n      }\n    `;const r=n.shapeInfo.texShape,o=r[0],a=r[1];if(1===a&&1===o)return`\n      float ${s}(int index) {\n        return sampleTexture(${e}, halfCR);\n      }\n    `;const i=sa(e);return 1===a?t?`\n      float ${s}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / float(${e}TexShape[0]));\n        return sampleTexture(${e}, uv);\n      }\n    `:`\n      float ${s}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${o}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `:1===o?t?`\n      float ${s}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / float(${e}TexShape[1]), 0.5);\n        return sampleTexture(${e}, uv);\n      }\n    `:`\n      float ${s}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${a}.0, 0.5);\n        return sampleTexture(${e}, uv);\n      }\n    `:t?`\n    float ${s}(int index) {\n      vec2 uv = uvFromFlat(${e}TexShape[0], ${e}TexShape[1], index + ${i});\n      return sampleTexture(${e}, uv);\n    }\n  `:`\n    float ${s}(int index) {\n      vec2 uv = uvFromFlat(${o}, ${a}, index + ${i});\n      return sampleTexture(${e}, uv);\n    }\n  `}(n,t);case 2:return function Yj(n,t){const e=n.shapeInfo.logicalShape,s=n.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),o=n.shapeInfo.texShape;if(null!=o&&Ye(e,o))return t?`\n      float ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${o[1]}.0, ${o[0]}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `;const{newShape:a,keptDims:i}=cr(e);if(a.length<e.length){const p=["row","col"];return`\n      ${zi(Vi(n,a),t)}\n      float ${r}(int row, int col) {\n        return ${r}(${Wi(p,i)});\n      }\n    `}if(n.shapeInfo.isUniform)return`\n      float ${r}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${e[1]}, 1)));\n        ${Bi(n)}\n      }\n    `;const u=o[0],c=o[1],h=sa(s);return 1===c?t?`\n      float ${r}(int row, int col) {\n        float index = dot(vec3(row, col, ${h}), vec3(${s}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${s}TexShape[0]));\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${e[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `:1===u?t?`\n      float ${r}(int row, int col) {\n        float index = dot(vec3(row, col, ${h}), vec3(${s}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${s}TexShape[1]), 0.5);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${e[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);\n      return sampleTexture(${s}, uv);\n    }\n  `:t?`\n      float ${r}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${s}Shape[1] + col + ${h};\n        vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n  float ${r}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${e[1]} + col + ${h};\n    vec2 uv = uvFromFlat(${u}, ${c}, index);\n    return sampleTexture(${s}, uv);\n  }\n`}(n,t);case 3:return function Jj(n,t){const e=n.shapeInfo.logicalShape,s=n.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),o=e[1]*e[2],a=e[2],{newShape:i,keptDims:l}=cr(e);if(i.length<e.length){const m=["row","col","depth"];return`\n        ${zi(Vi(n,i),t)}\n        float ${r}(int row, int col, int depth) {\n          return ${r}(${Wi(m,l)});\n        }\n      `}if(n.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${o}, ${a}, 1)));\n        ${Bi(n)}\n      }\n    `;const c=n.shapeInfo.texShape,h=c[0],d=c[1],p=n.shapeInfo.flatOffset;if(d===o&&null==p)return t?`\n      float ${r}(int row, int col, int depth) {\n        int stride1 = ${s}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n        float ${r}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${a}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${d}.0, ${h}.0);\n          return sampleTexture(${s}, uv);\n        }\n      `;if(d===a&&null==p)return t?`\n      float ${r}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${s}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${e[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${d}.0, ${h}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `;const f=sa(s);return t?`\n    float ${r}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${s}Shape[1] * ${s}Shape[2];\n      int stride1 = ${s}Shape[2];\n      int index = row * stride0 + col * stride1 + depth + ${f};\n      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);\n      return sampleTexture(${s}, uv);\n    }\n    `:`\n      float ${r}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${o} + col * ${a} + depth + ${f};\n        vec2 uv = uvFromFlat(${h}, ${d}, index);\n        return sampleTexture(${s}, uv);\n      }\n  `}(n,t);case 4:return function tK(n,t){const e=n.shapeInfo.logicalShape,s=n.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),o=e[3],a=e[2]*o,i=e[1]*a,{newShape:l,keptDims:u}=cr(e);if(l.length<e.length){const b=["row","col","depth","depth2"];return`\n      ${zi(Vi(n,l),t)}\n      float ${r}(int row, int col, int depth, int depth2) {\n        return ${r}(${Wi(b,u)});\n      }\n    `}if(n.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${i}, ${a}, ${o}, 1)));\n        ${Bi(n)}\n      }\n    `;const c=n.shapeInfo.flatOffset,h=n.shapeInfo.texShape,d=h[0],p=h[1],f=`int stride2 = ${s}Shape[3];`,g=`int stride1 = ${s}Shape[2] * stride2;`,m=`int stride0 = ${s}Shape[1] * stride1;`;if(p===i&&null==c)return t?`\n      float ${r}(int row, int col, int depth, int depth2) {\n        ${f}\n        ${g}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${a}, ${o}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${d}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `;if(p===o&&null==c)return t?`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${s}Shape[1] * ${s}Shape[2], ${s}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${e[1]*e[2]}, ${e[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${d}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `;const y=sa(s);return t?`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${f}\n      ${g}\n      ${m}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index + ${y});\n      return sampleTexture(${s}, uv);\n    }\n  `:`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${a} +\n          depth * ${o} + depth2;\n      vec2 uv = uvFromFlat(${d}, ${p}, index + ${y});\n      return sampleTexture(${s}, uv);\n    }\n  `}(n,t);case 5:return function nK(n){const t=n.shapeInfo.logicalShape,e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1),r=t[4],o=t[3]*r,a=t[2]*o,i=t[1]*a,{newShape:l,keptDims:u}=cr(t);if(l.length<t.length){const m=["row","col","depth","depth2","depth3"];return`\n      ${zi(Vi(n,l))}\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        return ${s}(${Wi(m,u)});\n      }\n    `}if(n.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${i}, ${a}, ${o}, ${r})) +\n          depth3;\n        ${Bi(n)}\n      }\n    `;const c=n.shapeInfo.flatOffset,h=n.shapeInfo.texShape,d=h[0],p=h[1];if(p===i&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${a}, ${o}, ${r}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${d}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;if(p===r&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${d}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;return`\n    float ${s}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${a} + depth * ${o} +\n          depth2 * ${r} + depth3 + ${sa(e)};\n      vec2 uv = uvFromFlat(${d}, ${p}, index);\n      return sampleTexture(${e}, uv);\n    }\n  `}(n);case 6:return function sK(n){const t=n.shapeInfo.logicalShape,e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1),{newShape:r,keptDims:o}=cr(t);if(r.length<t.length){const y=["row","col","depth","depth2","depth3","depth4"];return`\n      ${zi(Vi(n,r))}\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${s}(${Wi(y,o)});\n      }\n    `}const a=t[5],i=t[4]*a,l=t[3]*i,u=t[2]*l,c=t[1]*u;if(n.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${u}, ${l}, ${i})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${a}, 1)));\n        ${Bi(n)}\n      }\n    `;const h=n.shapeInfo.flatOffset,d=n.shapeInfo.texShape,p=d[0],f=d[1];if(f===c&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${u}, ${l}, ${i}, ${a})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${p}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;if(f===a&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${p}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;return`\n    float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${u} + depth * ${l} +\n          depth2 * ${i} + depth3 * ${a} + depth4 + ${sa(e)};\n      vec2 uv = uvFromFlat(${p}, ${f}, index);\n      return sampleTexture(${e}, uv);\n    }\n  `}(n);default:throw new Error(`${e.length}-D input sampling is not yet supported`)}}function fI(n,t){switch(n.shapeInfo.logicalShape.length){case 0:return function jj(n){const t=n.name;return`\n    vec4 ${"get"+t.charAt(0).toUpperCase()+t.slice(1)}() {\n      return ${Fn().texture2D}(${t}, halfCR);\n    }\n  `}(n);case 1:return function qj(n,t){const e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1),r=n.shapeInfo.texShape,o=Fn();if(t)return`\n    vec4 ${s}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${e}TexShape[0]) / 2.0), ceil(float(${e}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${o.texture2D}(${e}, uv);\n    }\n  `;const a=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];return`\n    vec4 ${s}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${a[0]}, ${a[1]}, index);\n      return ${o.texture2D}(${e}, uv);\n    }\n  `}(n,t);case 2:return function Zj(n,t){const e=n.shapeInfo.logicalShape,s=n.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),o=n.shapeInfo.texShape,a=o[0],i=o[1],l=Fn();if(null!=o&&Ye(e,o))return t?`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n\n        return ${l.texture2D}(${s}, uv);\n      }\n    `:`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${i}.0, ${a}.0);\n\n        return ${l.texture2D}(${s}, uv);\n      }\n    `;if(t)return`\n    vec4 ${r}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${s}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${l.texture2D}(${s}, uv);\n    }\n  `;const u=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)];return`\n    vec4 ${r}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${Math.ceil(e[1]/2)}, ${u[0]}, ${u[1]}, row, col);\n      return ${l.texture2D}(${s}, uv);\n    }\n  `}(n,t);case 3:return function Qj(n,t){const e=n.shapeInfo.logicalShape,s=n.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),o=n.shapeInfo.texShape,a=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)];if(1===e[0]){const p=[1,2],g=["b","row","col"];return`\n        ${fI(Vi(n,e.slice(1)),t)}\n        vec4 ${r}(int b, int row, int col) {\n          return ${r}(${Wi(g,p)});\n        }\n      `}const i=Fn();if(t)return`\n    vec4 ${r}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${s}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${s}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${i.texture2D}(${s}, uv);\n    }\n  `;const l=a[0],u=a[1],c=Math.ceil(e[2]/2);return`\n    vec4 ${r}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${l}, ${u}, ${c*Math.ceil(e[1]/2)}, ${c}, b, row, col);\n      return ${i.texture2D}(${s}, uv);\n    }\n  `}(n,t);default:return function eK(n,t){const e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1),r=Fn();if(t)return`\n    vec4 ${s}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${e}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${e}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${e}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${e}TexShape[0]) / 2.0), ceil(float(${e}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${r.texture2D}(${e}, uv);\n    }\n  `;const o=n.shapeInfo.logicalShape,a=o.length,i=n.shapeInfo.texShape,l=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)],u=l[0],c=l[1],h=Math.ceil(o[a-1]/2);let d=h*Math.ceil(o[a-2]/2),p="int b, int row, int col",f=`b * ${d} + (row / 2) * ${h} + (col / 2)`;for(let g=2;g<a-1;g++)p=`int b${g}, `+p,d*=o[a-g-1],f=`b${g} * ${d} + `+f;return`\n    vec4 ${s}(${p}) {\n      int index = ${f};\n      int texR = index / ${c};\n      int texC = index - texR * ${c};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${u});\n      return ${r.texture2D}(${e}, uv);\n    }\n  `}(n,t)}}const Rj="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",Dj="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",Fj="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",Oj="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function sa(n){return`offset${n}`}function Bi(n){const t=n.name,e=q(n.shapeInfo.logicalShape);return e<2?`return ${t};`:`\n    for (int i = 0; i < ${e}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function yt(n){if(n<=1)return"int";if(2===n)return"ivec2";if(3===n)return"ivec3";if(4===n)return"ivec4";if(5===n)return"ivec5";if(6===n)return"ivec6";throw Error(`GPU for rank ${n} is not yet supported`)}function Ex(n,t,e){const{newShape:s,keptDims:r}=cr(t),o=t.length,a=n&&3===o&&1===t[0],i=a?t.slice(1):s,l=!n&&o>1&&!Ye(t,e)&&s.length<o||a;return{useSqueezeShape:l,uniformShape:l?i:t,keptDims:r}}function Vi(n,t){const e=JSON.parse(JSON.stringify(n));return e.shapeInfo.logicalShape=t,e}function Wi(n,t){return t.map(e=>n[e]).join(", ")}function gI(n,t,e){const s=[],r=[];let o,a,i,l=null,u=null;u=n.getUniformLocation(e,"NAN",!1),1===B().getNumber("WEBGL_VERSION")&&(l=n.getUniformLocation(e,"INFINITY",!1));const c=!1;for(const h of t.variableNames){const d={name:h,uniform:n.getUniformLocation(e,h,c),offset:n.getUniformLocation(e,`offset${h}`,c)};t.enableShapeUniforms&&(d.shape=n.getUniformLocation(e,`${h}Shape`,c),d.texShape=n.getUniformLocation(e,`${h}TexShape`,c)),s.push(d)}if(t.enableShapeUniforms&&(o=n.getUniformLocation(e,"outShape",c),i=n.getUniformLocation(e,"outShapeStrides",c),a=n.getUniformLocation(e,"outTexShape",c)),t.customUniforms)for(const h of t.customUniforms)r.push(n.getUniformLocation(e,h.name,c));return{variablesLocations:s,customUniformLocations:r,infLoc:l,nanLoc:u,outShapeLocation:o,outShapeStridesLocation:i,outTexShapeLocation:a}}function yI(n,t){if(n.length!==t.length)throw Error(`Binary was compiled with ${n.length} inputs, but was executed with ${t.length} inputs`);n.forEach((e,s)=>{const r=e.logicalShape,o=t[s],a=o.shape;if(!Ye(r,a))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${a} must match`);if(e.isUniform&&o.isUniform)return;const i=e.texShape,l=o.isUniform?null:o.texData.texShape;if(!Ye(i,l))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${l} must match`)})}function Tn(n){return B().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&n<=4}class uK{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=vp.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const e=Fn();this.outputShape=t,this.enableShapeUniforms=Tn(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?$p(["r","c","d"],t):na(["r","c","d"],t)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${e.output} = result;\n      }\n    `}}class cK{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=vp.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const e=Fn();this.outputShape=t,this.enableShapeUniforms=Tn(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?$p(["r","c","d"],t):na(["r","c","d"],t)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${e.output} = result;\n      }\n    `}}class hK{constructor(t){this.variableNames=["A"],this.outTexUsage=ks.DOWNLOAD;const e=Fn();this.outputShape=t,this.userCode=`\n      ${dI}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${e.output} = encode_float(x);\n      }\n    `}}class dK{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=ks.DOWNLOAD;const e=Fn();this.outputShape=t,this.userCode=`\n      ${dI}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${e.output} = encode_float(x);\n      }\n    `}}const pK={R:0,G:1,B:2,A:3};class xI{constructor(t,e=!1,s="RGBA"){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];const r=Fn();this.outputShape=t,this.enableShapeUniforms=Tn(this.outputShape.length);let o="result";e&&(o="floor(result * 255. + 0.5)");let a="";for(let i=0;i<s.length;i++)a+=`\n          if(offset == ${i}) {\n            result = values[${pK[s[i]]}];\n          }`;this.userCode=`\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":Tx(t)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int flatIndex = getFlatIndex(coords);\n        float result = 0.;\n        int offset = imod(flatIndex, ${s.length});\n\n        flatIndex = idiv(flatIndex, ${s.length}, 1.);\n\n        int r = flatIndex / texShape[1];\n        if (r < texShape[0]) {\n          int c = imod(flatIndex, texShape[1]);\n          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n          vec4 values = ${r.texture2D}(A, uv);\n          ${a}\n        }\n        ${r.output} = vec4(${o}, 0., 0., 0.);\n      }\n    `}}class fK{constructor(t,e=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];const s=Fn();this.outputShape=t,this.enableShapeUniforms=Tn(this.outputShape.length);let r="",o="result";e&&(o="floor(result * 255. + 0.5)");for(let a=0;a<=1;a++)for(let i=0;i<=1;i++){const l=2*a+i;r+=`\n          localCoords = coords;\n          if(localCoords[2] + ${i} < ${this.enableShapeUniforms?"outShape[2]":`${t[2]}`}) {\n          localCoords[2] += ${i};\n          if (localCoords[1] + ${a} < ${this.enableShapeUniforms?"outShape[1]":`${t[1]}`}) {\n            localCoords[1] += ${a};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${s.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${l}] = values[0];\n            } else if (offset == 1) {\n              result[${l}] = values[1];\n            } else if (offset == 2) {\n              result[${l}] = values[2];\n            } else {\n              result[${l}] = values[3];\n            }\n          }\n        }\n        `}this.userCode=`\n        ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":Tx(t)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${r}\n\n          ${s.output} = ${o};\n        }\n    `}}function bI(n){const t=Fn();return GN(n,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}function wI(n){return qN(n,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function vI(n){return XN(n,new Uint16Array([0,1,2,2,1,3]))}function lc(n,t,e,s,r,o){YN(t,e);const a=ZN(n),i=n.TEXTURE_2D;return me(n,()=>n.bindTexture(i,a)),me(n,()=>n.texParameteri(i,n.TEXTURE_WRAP_S,n.CLAMP_TO_EDGE)),me(n,()=>n.texParameteri(i,n.TEXTURE_WRAP_T,n.CLAMP_TO_EDGE)),me(n,()=>n.texParameteri(i,n.TEXTURE_MIN_FILTER,n.NEAREST)),me(n,()=>n.texParameteri(i,n.TEXTURE_MAG_FILTER,n.NEAREST)),1===B().getNumber("WEBGL_VERSION")?me(n,()=>n.texImage2D(i,0,s,t,e,0,r,o,null)):me(n,()=>n.texStorage2D(i,1,s,t,e)),me(n,()=>n.bindTexture(n.TEXTURE_2D,null)),{texture:a,texShape:[e,t]}}function _x(n){return n.internalFormatFloat}function SI(n,t,e,s){const[r,o]=sc(t,e);return lc(n,r,o,_x(s),s.textureFormatFloat,n.FLOAT)}function Ax(n){return n.internalFormatHalfFloat}function CI(n,t,e,s){const[r,o]=sc(t,e);return lc(n,r,o,Ax(s),s.textureFormatFloat,s.textureTypeHalfFloat)}function Rx(n){return n.downloadTextureFormat}function NI(n,t,e,s){const[r,o]=sc(t,e);return lc(n,r,o,Rx(s),n.RGBA,n.UNSIGNED_BYTE)}function Dx(n){return n.internalFormatPackedFloat}function II(n,t,e,s){const[r,o]=Pi(t,e);return lc(n,r,o,Dx(s),n.RGBA,n.FLOAT)}function Fx(n){return n.internalFormatPackedHalfFloat}function kI(n,t,e,s){const[r,o]=Pi(t,e);return lc(n,r,o,Fx(s),n.RGBA,s.textureTypeHalfFloat)}function TI(n,t,e){return me(n,()=>n.bindBuffer(n.ARRAY_BUFFER,e)),Cx(n,t,"clipSpacePos",e,3,20,0)&&Cx(n,t,"uv",e,2,20,12)}function $I(n,t,e,s,r,o){let a,i,l;me(n,()=>n.bindTexture(n.TEXTURE_2D,t)),r instanceof Uint8Array?(a=new Uint8Array(e*s*4),i=n.UNSIGNED_BYTE,l=n.RGBA):(a=new Float32Array(e*s*4),i=n.FLOAT,l=o.internalFormatPackedFloat),a.set(r),2===B().getNumber("WEBGL_VERSION")?me(n,()=>n.texSubImage2D(n.TEXTURE_2D,0,0,0,e,s,n.RGBA,i,a)):me(n,()=>n.texImage2D(n.TEXTURE_2D,0,l,e,s,0,n.RGBA,i,a)),me(n,()=>n.bindTexture(n.TEXTURE_2D,null))}function EI(n,t,e){me(n,()=>n.bindTexture(n.TEXTURE_2D,t)),e.data instanceof Uint8Array?2===B().getNumber("WEBGL_VERSION")?me(n,()=>n.texSubImage2D(n.TEXTURE_2D,0,0,0,e.width,e.height,n.RGBA,n.UNSIGNED_BYTE,e.data)):me(n,()=>n.texImage2D(n.TEXTURE_2D,0,n.RGBA,e.width,e.height,0,n.RGBA,n.UNSIGNED_BYTE,e.data)):2===B().getNumber("WEBGL_VERSION")?me(n,()=>n.texSubImage2D(n.TEXTURE_2D,0,0,0,n.RGBA,n.UNSIGNED_BYTE,e)):me(n,()=>n.texImage2D(n.TEXTURE_2D,0,n.RGBA,n.RGBA,n.UNSIGNED_BYTE,e)),me(n,()=>n.bindTexture(n.TEXTURE_2D,null))}function _I(n,t,e,s){const r=n.createBuffer();me(n,()=>n.bindBuffer(n.PIXEL_PACK_BUFFER,r));const i=16*t*e;return me(n,()=>n.bufferData(n.PIXEL_PACK_BUFFER,i,n.STREAM_READ)),me(n,()=>n.readPixels(0,0,e,t,n.RGBA,n.FLOAT,0)),me(n,()=>n.bindBuffer(n.PIXEL_PACK_BUFFER,null)),r}function AI(n,t,e){const s=n,r=new Float32Array(e);return s.bindBuffer(s.PIXEL_PACK_BUFFER,t),s.getBufferSubData(s.PIXEL_PACK_BUFFER,0,r),s.bindBuffer(s.PIXEL_PACK_BUFFER,null),r}function RI(n,t,e,s){const[r,o]=sc(t,e),i=new Uint8Array(function cj(n,t){return n*t}(t*e,4));return me(n,()=>n.readPixels(0,0,r,o,s.downloadTextureFormat,n.UNSIGNED_BYTE,i)),new Float32Array(i.buffer)}function DI(n,t,e,s,r,o,a,i){const l=n,u=new Float32Array(function hj(n,t){const[e,s]=Pi(n,t);return e*s*4}(o,a));return l.bindBuffer(l.PIXEL_PACK_BUFFER,t),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}function FI(n,t,e){const s=new Float32Array(t*e*4);return me(n,()=>n.readPixels(0,0,e,t,n.RGBA,n.FLOAT,s)),s}class _p{constructor(t){this.outputTexture=null,this.program=null,this.disposed=!1,this.itemsToPoll=[];const e=B().getNumber("WEBGL_VERSION");if(null!=t?(this.gl=t,VN(e,t)):this.gl=Us(e),t=this.gl,2===B().getNumber("WEBGL_VERSION")){const o=t;this.createVertexArray=()=>me(o,()=>o.createVertexArray()),this.bindVertexArray=a=>me(o,()=>o.bindVertexArray(a)),this.deleteVertexArray=a=>me(o,()=>o.deleteVertexArray(a)),this.getVertexArray=()=>me(o,()=>o.getParameter(o.VERTEX_ARRAY_BINDING))}else if(null!=t){const o=t.getExtension("OES_vertex_array_object");if(null==o)throw new Error("All WebGL1 implementations are expected to offer OES_vertex_array_object.");this.createVertexArray=()=>me(t,()=>o.createVertexArrayOES()),this.bindVertexArray=a=>me(t,()=>o.bindVertexArrayOES(a)),this.deleteVertexArray=a=>me(t,()=>o.deleteVertexArrayOES(a)),this.getVertexArray=()=>me(t,()=>t.getParameter(o.VERTEX_ARRAY_BINDING_OES))}let s="WEBGL_color_buffer_float";const r="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),1===B().getNumber("WEBGL_VERSION")){const a="OES_texture_half_float";if(this.textureFloatExtension=rc(this.gl,"OES_texture_float"),ms(this.gl,a))this.textureHalfFloatExtension=rc(this.gl,a);else if(B().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(s),ms(this.gl,r))this.colorBufferHalfFloatExtension=rc(this.gl,r);else if(B().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(s="EXT_color_buffer_float",ms(this.gl,s))this.colorBufferFloatExtension=this.gl.getExtension(s);else{if(!ms(this.gl,r))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(r)}this.vertexBuffer=wI(this.gl),this.indexBuffer=vI(this.gl),this.framebuffer=QN(this.gl),this.textureConfig=vx(this.gl,this.textureHalfFloatExtension)}get debug(){return B().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const t=this.gl;me(t,()=>t.finish()),me(t,()=>t.bindFramebuffer(t.FRAMEBUFFER,null)),me(t,()=>t.deleteFramebuffer(this.framebuffer)),me(t,()=>t.bindBuffer(t.ARRAY_BUFFER,null)),me(t,()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null)),me(t,()=>t.deleteBuffer(this.indexBuffer)),this.disposed=!0}createFloat32MatrixTexture(t,e){return this.throwIfDisposed(),SI(this.gl,t,e,this.textureConfig)}createFloat16MatrixTexture(t,e){return this.throwIfDisposed(),CI(this.gl,t,e,this.textureConfig)}createUnsignedBytesMatrixTexture(t,e){return this.throwIfDisposed(),NI(this.gl,t,e,this.textureConfig)}uploadPixelDataToTexture(t,e){this.throwIfDisposed(),EI(this.gl,t,e)}uploadDenseMatrixToTexture(t,e,s,r){this.throwIfDisposed(),$I(this.gl,t,e,s,r,this.textureConfig)}createFloat16PackedMatrixTexture(t,e){return this.throwIfDisposed(),kI(this.gl,t,e,this.textureConfig)}createPackedMatrixTexture(t,e){return this.throwIfDisposed(),II(this.gl,t,e,this.textureConfig)}deleteMatrixTexture(t){this.throwIfDisposed(),this.outputTexture===t&&(Nx(this.gl,this.framebuffer),this.outputTexture=null),me(this.gl,()=>this.gl.deleteTexture(t))}downloadByteEncodedFloatMatrixFromOutputTexture(t,e,s){return this.downloadMatrixDriver(t,()=>RI(this.gl,e,s,this.textureConfig))}downloadPackedMatrixFromBuffer(t,e,s,r,o,a){return DI(this.gl,t,0,0,0,o,a)}downloadFloat32MatrixFromBuffer(t,e){return AI(this.gl,t,e)}createBufferFromTexture(t,e,s){this.bindTextureToFrameBuffer(t);const r=_I(this.gl,e,s);return this.unbindTextureToFrameBuffer(),r}createAndWaitForFence(){const t=this.createFence(this.gl);return this.pollFence(t)}createFence(t){let e,s;if(B().getBool("WEBGL_FENCE_API_ENABLED")){const r=t,o=r.fenceSync(r.SYNC_GPU_COMMANDS_COMPLETE,0);t.flush(),s=()=>{const a=r.clientWaitSync(o,0,0);return a===r.ALREADY_SIGNALED||a===r.CONDITION_SATISFIED},e=o}else B().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(e=this.beginQuery(),this.endQuery(),s=()=>this.isQueryAvailable(e,B().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):s=()=>!0;return{query:e,isFencePassed:s}}downloadMatrixFromPackedTexture(t,e,s){return this.downloadMatrixDriver(t,()=>FI(this.gl,e,s))}createProgram(t){this.throwIfDisposed();const e=this.gl;null==this.vertexShader&&(this.vertexShader=bI(e));const s=jN(e);me(e,()=>e.attachShader(s,this.vertexShader)),me(e,()=>e.attachShader(s,t)),KN(e,s);const r=Object.assign(s,{vao:this.createVertexArray()});return this.debug&&Cp(e,r),r}buildVao(t){this.setProgram(t),this.bindVertexArray(t.vao);const e=this.gl;me(e,()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,this.indexBuffer)),TI(e,t,this.vertexBuffer)}deleteProgram(t){this.throwIfDisposed(),t===this.program&&(this.program=null),null!=t&&(me(this.gl,()=>this.gl.deleteProgram(t)),this.deleteVertexArray(t.vao))}setProgram(t){this.throwIfDisposed(),this.program=t,null!=this.program&&this.debug&&Cp(this.gl,this.program),me(this.gl,()=>this.gl.useProgram(t))}getUniformLocation(t,e,s=!0){return this.throwIfDisposed(),s?eI(this.gl,t,e):tI(this.gl,t,e)}getAttributeLocation(t,e){return this.throwIfDisposed(),me(this.gl,()=>this.gl.getAttribLocation(t,e))}getUniformLocationNoThrow(t,e){return this.throwIfDisposed(),this.gl.getUniformLocation(t,e)}setInputMatrixTexture(t,e,s){this.throwIfDisposed(),this.throwIfNoProgram(),nI(this.gl,t,e,s)}setOutputMatrixTexture(t,e,s){this.setOutputMatrixTextureDriver(t,s,e)}setOutputPackedMatrixTexture(t,e,s){this.throwIfDisposed();const[r,o]=Pi(e,s);this.setOutputMatrixTextureDriver(t,r,o)}setOutputMatrixWriteRegion(t,e,s,r){this.setOutputMatrixWriteRegionDriver(s,t,r,e)}setOutputPackedMatrixWriteRegion(t,e,s,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&Cp(this.gl,this.program),oc(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const t=this.gl;if(this.debug){const e=this.getVertexArray();console.assert(e===this.program.vao,"VAO changed between setProgram and executeProgram!"),this.debugValidate()}me(t,()=>t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),me(this.gl,()=>this.gl.finish())}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=rc(this.gl,2===B().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===B().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const s=this.gl,r=this.getQueryTimerExtensionWebGL2(),o=s.createQuery();return s.beginQuery(r.TIME_ELAPSED_EXT,o),o}const t=this.getQueryTimerExtensionWebGL1(),e=t.createQueryEXT();return t.beginQueryEXT(t.TIME_ELAPSED_EXT,e),e}endQuery(){if(2===B().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,s=this.getQueryTimerExtensionWebGL2();return void e.endQuery(s.TIME_ELAPSED_EXT)}const t=this.getQueryTimerExtensionWebGL1();t.endQueryEXT(t.TIME_ELAPSED_EXT)}waitForQueryAndGetTime(t){var e=this;return(0,O.Z)(function*(){return yield Yp(()=>e.disposed||e.isQueryAvailable(t,B().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))),e.getQueryTime(t,B().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))})()}getQueryTime(t,e){if(0===e)return null;if(2===e){const s=this.gl;return s.getQueryParameter(t,s.QUERY_RESULT)/1e6}{const s=this.getQueryTimerExtensionWebGL1();return s.getQueryObjectEXT(t,s.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(t,e){if(0===e)return!0;if(2===e){const s=this.gl,r=this.getQueryTimerExtensionWebGL2(),o=s.getQueryParameter(t,s.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(r.GPU_DISJOINT_EXT)),o&&!this.disjoint}{const s=this.getQueryTimerExtensionWebGL1(),r=s.getQueryObjectEXT(t,s.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(s.GPU_DISJOINT_EXT)),r&&!this.disjoint}}pollFence(t){return new Promise(e=>{this.addItemToPoll(()=>t.isFencePassed(),()=>e())})}pollItems(){const t=function mK(n){let t=0;for(;t<n.length&&n[t]();++t);return t-1}(this.itemsToPoll.map(e=>e.isDoneFn));for(let e=0;e<=t;++e){const{resolveFn:s}=this.itemsToPoll[e];s()}this.itemsToPoll=this.itemsToPoll.slice(t+1)}addItemToPoll(t,e){if(this.itemsToPoll.push({isDoneFn:t,resolveFn:e}),this.itemsToPoll.length>1)return;let s;"setTimeoutCustom"in B().platform&&(s=B().platform.setTimeoutCustom.bind(B().platform)),Yp(()=>(this.pollItems(),0===this.itemsToPoll.length),()=>0,null,s)}bindTextureToFrameBuffer(t){this.throwIfDisposed(),Np(this.gl,t,this.framebuffer),this.debug&&oc(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(Np(this.gl,this.outputTexture,this.framebuffer),this.debug&&oc(this.gl)):Nx(this.gl,this.framebuffer)}downloadMatrixDriver(t,e){this.bindTextureToFrameBuffer(t);const s=e();return this.unbindTextureToFrameBuffer(),s}setOutputMatrixTextureDriver(t,e,s){this.throwIfDisposed();const r=this.gl;Np(r,t,this.framebuffer),this.debug&&oc(r),this.outputTexture=t,me(r,()=>r.viewport(0,0,e,s)),me(r,()=>r.scissor(0,0,e,s))}setOutputMatrixWriteRegionDriver(t,e,s,r){this.throwIfDisposed(),me(this.gl,()=>this.gl.scissor(t,e,s,r))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}const{addImpl:gK,bincountImpl:OI,bincountReduceImpl:yK,bitwiseAndImpl:xK,castImpl:bK,ceilImpl:wK,concatImpl:vK,equalImpl:SK,expImpl:CK,expm1Impl:NK,floorImpl:IK,gatherNdImpl:kK,gatherV2Impl:TK,greaterImpl:$K,greaterEqualImpl:EK,lessImpl:_K,lessEqualImpl:AK,linSpaceImpl:RK,logImpl:DK,maxImpl:FK,maximumImpl:OK,minimumImpl:LK,multiplyImpl:PK,negImpl:MK,notEqualImpl:zK,prodImpl:BK,raggedGatherImpl:VK,raggedRangeImpl:WK,raggedTensorToTensorImpl:UK,rangeImpl:GK,rsqrtImpl:HK,scatterImpl:jK,sigmoidImpl:KK,simpleAbsImpl:LI,sliceImpl:qK,sparseFillEmptyRowsImpl:XK,sparseReshapeImpl:ZK,sparseSegmentReductionImpl:PI,sqrtImpl:YK,staticRegexReplaceImpl:QK,stridedSliceImpl:JK,stringNGramsImpl:eq,stringSplitImpl:tq,stringToHashBucketFastImpl:nq,subImpl:sq,tileImpl:rq,topKImpl:oq,transposeImpl:Ox,uniqueImpl:aq}=gc;function MI(n,t){return["x","y","z","w","u","v"].slice(0,t).map(e=>`${n}.${e}`)}function On(n,t){return 1===t?[n]:MI(n,t)}class lq{constructor(t){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=t,this.rank=t.length,this.enableShapeUniforms=Tn(this.outputShape.length),0===this.rank)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const e=On("rc",this.rank),s=yt(this.rank),r=this.getOutOfBoundsCondition(e),o=this.getSetup(e),a=this.getOutput(e);this.userCode=`\n        void main() {\n          ${s} rc = getOutputCoords();\n\n          if(${r}) {\n            setOutput(vec4(0));\n          } else {\n            ${o}\n\n            setOutput(vec4(${a}));\n          }\n        }\n      `}}getSourceCoordsArr(t){const e=[];for(let s=0;s<=1;s++)for(let r=0;r<=1;r++){let o=`${0===s?"r":"rp1"}, ${0===r?"c":"cp1"}`;for(let a=2;a<this.rank;a++)o=`${t[t.length-1-a]},`+o;e.push(o)}return e}getOutOfBoundsCondition(t){if(1===this.rank)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let e="";for(let s=this.rank-2;s<this.rank;s++)e+=`${t[s]} >= ${this.enableShapeUniforms?`outShape[${s}]`:this.outputShape[s]}`,s<this.rank-1&&(e+="||");return e}getSetup(t){if(1===this.rank)return"";const e=t.slice(-2);return`\n      int r = ${e[0]};\n      int c = ${e[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1]};\n      bool rEdge = rp1 >= ${this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2]};\n    `}getOutput(t){const e=this.getSourceCoordsArr(t);return 1===this.rank?`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`:`getA(${e[0]}),\n            cEdge ? 0. : getA(${e[1]}),\n            rEdge ? 0. : getA(${e[2]}),\n            rEdge || cEdge ? 0. : getA(${e[3]})`}}class zI{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=t,this.enableShapeUniforms=Tn(this.outputShape.length);let s="";for(let r=0;r<4;r++){let o="thisRC = rc;";r%2==1&&(o+="thisRC.z += 1;"),r>1&&(o+="thisRC.y += 1;"),s+=`\n        ${o}\n        ${r>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${r}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${r>0?"}":""}\n      `}this.userCode=`\n      ${function uq(n,t){return`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${t?function Cj(n,t,e="index"){const r=function Sj(n,t){const e=n.length,s=n.map(o=>`${t}[${o}]`),r=new Array(e-1);r[e-2]=s[e-1];for(let o=e-3;o>=0;--o)r[o]=`(${r[o+1]} * ${s[o+1]})`;return r}(n.map((o,a)=>a),t);return r.map((o,a)=>`int ${n[a]} = ${e} / ${r[a]}; ${a===r.length-1?`int ${n[a+1]} = ${e} - ${n[a]} * ${r[a]}`:`index -= ${n[a]} * ${r[a]}`};`).join("")}(["r","c","d"],"inputShape"):na(["r","c","d"],n)}\n      return ivec3(r, c, d);\n    }\n  `}(e,this.enableShapeUniforms)}\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":Tx(t)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms?"outShape[1]":t[1]};\n        int cols = ${this.enableShapeUniforms?"outShape[2]":t[2]};\n\n        ${s}\n\n        setOutput(result);\n      }\n    `}}class cq{constructor(t){this.gpgpu=t,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.usedTextures={},this.logEnabled=!1}acquireTexture(t,e,s){const r=VI(e,s),o=WI(t,r,s);o in this.freeTextures||(this.freeTextures[o]=[]),o in this.usedTextures||(this.usedTextures[o]=[]);const a=BI(t,r,this.gpgpu.gl,this.gpgpu.textureConfig,s);if(this.freeTextures[o].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=a,this.log();const l=this.freeTextures[o].pop();return this.usedTextures[o].push(l),l}let i;return r===kn.PACKED_2X2_FLOAT32?i=this.gpgpu.createPackedMatrixTexture(t[0],t[1]):r===kn.PACKED_2X2_FLOAT16?i=this.gpgpu.createFloat16PackedMatrixTexture(t[0],t[1]):r===kn.UNPACKED_FLOAT32?i=this.gpgpu.createFloat32MatrixTexture(t[0],t[1]):r===kn.UNPACKED_FLOAT16?i=this.gpgpu.createFloat16MatrixTexture(t[0],t[1]):r===kn.PACKED_4X1_UNSIGNED_BYTE&&(i=this.gpgpu.createUnsignedBytesMatrixTexture(t[0],t[1])),this.usedTextures[o].push(i),this.numUsedTextures++,this._numBytesAllocated+=a,this.log(),i}releaseTexture(t,e,s,r){if(null==this.freeTextures)return;const o=VI(s,r),a=WI(e,o,r);a in this.freeTextures||(this.freeTextures[a]=[]);const i=BI(e,o,this.gpgpu.gl,this.gpgpu.textureConfig,r),l=B().getNumber("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==l&&this._numBytesAllocated>l?(this.gpgpu.deleteMatrixTexture(t.texture),this._numBytesAllocated-=i):(this.freeTextures[a].push(t),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;const u=this.usedTextures[a],c=u&&u.indexOf(t);if(null==c||c<0)throw new Error("Cannot release a texture that was never provided by this texture manager");u[c]=u[u.length-1],u.pop(),this.log()}log(){if(!this.logEnabled)return;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${this.numFreeTextures+this.numUsedTextures})`);const e=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*e)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const t in this.freeTextures)this.freeTextures[t].forEach(e=>{this.gpgpu.deleteMatrixTexture(e.texture)});for(const t in this.usedTextures)this.usedTextures[t].forEach(e=>{this.gpgpu.deleteMatrixTexture(e.texture)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function BI(n,t,e,s,r){const o=function dq(n,t){switch(n){case kn.PACKED_2X2_FLOAT32:return Dx(t);case kn.PACKED_2X2_FLOAT16:return Fx(t);case kn.UNPACKED_FLOAT32:return _x(t);case kn.UNPACKED_FLOAT16:return Ax(t);case kn.PACKED_4X1_UNSIGNED_BYTE:return Rx(t);default:throw new Error(`Unknown physical texture type ${n}`)}}(t,s);let a;if(r){const[l,u]=Pi(n[0],n[1]);a=l*u}else{const[l,u]=sc(n[0],n[1]);a=l*u}const i=function hq(n,t){if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===n.RGBA)return 16;if(t===n.RGBA16F)return 8;if(t===n.RGBA8)return 4;throw new Error(`Unknown internal format ${t}`)}(e,o);return a*i}function VI(n,t){if(n===ks.UPLOAD)return kn.PACKED_2X2_FLOAT32;if(n===ks.RENDER||null==n)return function pq(n){return B().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?n?kn.PACKED_2X2_FLOAT32:kn.UNPACKED_FLOAT32:n?kn.PACKED_2X2_FLOAT16:kn.UNPACKED_FLOAT16}(t);if(n===ks.DOWNLOAD||n===ks.PIXELS)return kn.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${n}`)}function WI(n,t,e){return`${n[0]}_${n[1]}_${t}_${e}`}class ir{constructor(t,e){this.variableNames=["A"],this.outputShape=t,this.enableShapeUniforms=Tn(this.outputShape.length),this.userCode=`\n      float unaryOperation(float x) {\n        ${e}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const gs="if (isnan(x)) return x;",fq="return x;",UI="return abs(x);",mq="return (x >= 0.0) ? x : (exp(x) - 1.0);",gq=gs+"\n  return (x < 0.0) ? 0.0 : x;\n",yq=gs+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",lo="return x;",xq="return 1.0 / (1.0 + exp(-1.0 * x));",bq="return x;",wq="\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n",vq="\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",Sq="\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",Cq="return 1.0 / (1.0 + exp(-1.0 * x));";class uo{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.enableShapeUniforms=Tn(this.outputShape.length),this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${e}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class Nq{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=t,this.enableShapeUniforms=Tn(this.outputShape.length);const e=t.length,s=On("rc",e),r=yt(e),o=function iq(n,t){if(1===n)return"rc";let e="";for(let s=0;s<n;s++)e+=t[s],s<n-1&&(e+=",");return e}(e,s),a=s.slice(-2),i=e<=1?"rc":`vec2(${a.join(",")})`;this.userCode=`\n      void main() {\n        ${r} rc = getOutputCoords();\n        vec4 packedInput = getA(${o});\n\n        setOutput(getChannel(packedInput, ${i}));\n      }\n    `}}const Iq=yd,Ap={},Eq=B().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");let GI=(()=>{class n extends yc{nextDataId(){return n.nextDataId++}constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!B().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let s;if(null!=e){if(e instanceof _p)s=e;else{const r=Us(B().getNumber("WEBGL_VERSION"),e);s=new _p(r)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{const r=Us(B().getNumber("WEBGL_VERSION"));s=new _p(r),this.binaryCache=function $q(n){return n in Ap||(Ap[n]={}),Ap[n]}(B().getNumber("WEBGL_VERSION")),this.gpgpuCreatedLocally=!0}this.gpgpu=s,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new cq(this.gpgpu),this.numMBBeforeWarning=function Aq(){return null==B().global.screen?1024:B().global.screen.height*B().global.screen.width*window.devicePixelRatio*600/1024/1024}(),this.texData=new Xp(this,_s())}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}writeTexture(e,s,r,o,a,i){const l=this.makeTensorInfo(s,r),u=this.texData.get(l.dataId);u.isPacked=!1,u.texture={texture:e,texShape:[o,a]},u.texShape=[o,a];const c=ac(s),h=new xI(c,!1,i),d=this.runWebGLProgram(h,[l],r,[[o,a]]);return d.shape=s,u.texture=null,this.disposeIntermediateTensorInfo(l),d.dataId}write(e,s,r){if((B().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||B().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===r&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const o={id:this.nextDataId()};return this.texData.set(o,{shape:s,dtype:r,values:e,usage:ks.UPLOAD,refCount:1}),o}refCount(e){return this.texData.has(e)?this.texData.get(e).refCount:0}incRef(e){this.texData.get(e).refCount++}decRef(e){this.texData.has(e)&&this.texData.get(e).refCount--}move(e,s,r,o,a){if(B().getBool("DEBUG")&&this.checkNumericalProblems(s),"complex64"===o)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:r,dtype:o,values:s,usage:ks.UPLOAD,refCount:a})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const s=this.texData.get(e),{values:r,dtype:o,complexTensorInfos:a,slice:i,shape:l,isPacked:u}=s;if(null!=i){let p;p=u?new uo(l,lo):new ir(l,lo);const f=this.runWebGLProgram(p,[{dataId:e,shape:l,dtype:o}],o),g=this.readSync(f.dataId);return this.disposeIntermediateTensorInfo(f),g}if(null!=r)return this.convertAndCacheOnCPU(e);if("string"===o)return r;const c=null!=this.activeTimers;let h,d;return c&&(h=gn()),d="complex64"===o?Nr(this.readSync(a.real.dataId),this.readSync(a.imag.dataId)):this.getValuesFromTexture(e),c&&(this.downloadWaitMs+=gn()-h),this.convertAndCacheOnCPU(e,d)}read(e){var s=this;return(0,O.Z)(function*(){if(s.pendingRead.has(e)){const m=s.pendingRead.get(e);return new Promise(y=>m.push(y))}const r=s.texData.get(e),{values:o,shape:a,slice:i,dtype:l,complexTensorInfos:u,isPacked:c}=r;if(null!=i){let m;m=c?new uo(a,lo):new ir(a,lo);const y=s.runWebGLProgram(m,[{dataId:e,shape:a,dtype:l}],l),x=s.read(y.dataId);return s.disposeIntermediateTensorInfo(y),x}if(null!=o)return s.convertAndCacheOnCPU(e);if(B().getBool("DEBUG")&&!B().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===B().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let d,p,h=null;if("complex64"!==l&&B().get("WEBGL_BUFFER_SUPPORTED")){d=s.decode(e);const m=s.texData.get(d.dataId);h=s.gpgpu.createBufferFromTexture(m.texture.texture,...Sp(a))}if(s.pendingRead.set(e,[]),"complex64"!==l&&(yield s.gpgpu.createAndWaitForFence()),"complex64"===l){const m=yield Promise.all([s.read(u.real.dataId),s.read(u.imag.dataId)]);p=Nr(m[0],m[1])}else if(null==h)p=s.getValuesFromTexture(e);else{const m=q(a);p=s.gpgpu.downloadFloat32MatrixFromBuffer(h,m)}if(null!=d&&s.disposeIntermediateTensorInfo(d),null!=h){const m=s.gpgpu.gl;me(m,()=>m.deleteBuffer(h))}const f=s.convertAndCacheOnCPU(e,p),g=s.pendingRead.get(e);return s.pendingRead.delete(e),g.forEach(m=>m(f)),s.pendingDisposal.has(e)&&(s.pendingDisposal.delete(e),s.disposeData(e)&&_s().removeDataId(e,s),s.pendingDeletes--),f})()}readToGPU(e,s={}){const r=this.texData.get(e),{values:o,shape:a,slice:i,dtype:l,isPacked:u,texture:c}=r;if("complex64"===l)throw new Error("Does not support reading texture for complex64 dtype.");if(null!=i){let f;f=u?new uo(a,lo):new ir(a,lo);const g=this.runWebGLProgram(f,[{dataId:e,shape:a,dtype:l}],l),m=this.readToGPU(g,s);return this.disposeIntermediateTensorInfo(g),m}if(null==c)throw null!=o?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");const h=this.decode(e,s.customTexShape),d=_s().makeTensorFromTensorInfo(h),p=this.texData.get(h.dataId);return Object.assign({tensorRef:d},p.texture)}bufferSync(e){const s=this.readSync(e.dataId);if("string"===e.dtype)try{const r=s.map(o=>pr(o));return Ge(e.shape,e.dtype,r)}catch{throw new Error("Failed to decode encoded string bytes into utf-8")}return Ge(e.shape,e.dtype,s)}checkNumericalProblems(e){if(null!=e)for(let s=0;s<e.length;s++){const r=e[s];if(!WN(r))throw B().getBool("WEBGL_RENDER_FLOAT32_CAPABLE")?Error(`The value ${r} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`):Error(`The value ${r} cannot be represented on this device.`)}}getValuesFromTexture(e){const{shape:s,dtype:r,isPacked:o}=this.texData.get(e),a=q(s);if(B().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const p=this.decode(e),f=this.texData.get(p.dataId),g=this.gpgpu.downloadMatrixFromPackedTexture(f.texture.texture,...Sp(s)).subarray(0,a);return this.disposeIntermediateTensorInfo(p),g}const i=B().getBool("WEBGL_PACK")&&!0===o,l=i?ac(s):s,u=i?new dK(l):new hK(l),c=this.runWebGLProgram(u,[{shape:l,dtype:r,dataId:e}],"float32"),h=this.texData.get(c.dataId),d=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(h.texture.texture,h.texShape[0],h.texShape[1]).subarray(0,a);return this.disposeIntermediateTensorInfo(c),d}timerAvailable(){return B().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(e){var s=this;const r=this.activeTimers,o=[];let a=!1;null==this.programTimersStack?(this.programTimersStack=o,a=!0):this.activeTimers.push(o),this.activeTimers=o,e();const i=Ks(this.activeTimers.map(c=>c.query)).filter(c=>null!=c),l=Ks(this.activeTimers.map(c=>c.name)).filter(c=>null!=c);this.activeTimers=r,a&&(this.programTimersStack=null);const u={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(0,O.Z)(function*(){if(B().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const c=yield Promise.all(i);u.kernelMs=ib(c),u.getExtraProfileInfo=()=>c.map((h,d)=>({name:l[d],ms:h})).map(h=>`${h.name}: ${h.ms}`).join(", ")}else u.kernelMs={error:"WebGL query timers are not supported in this environment."};return s.uploadWaitMs=0,s.downloadWaitMs=0,u})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return B().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:gn(),endMs:null}}endTimer(e){return B().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=gn(),e)}getQueryTime(e){var s=this;return(0,O.Z)(function*(){return B().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?s.gpgpu.waitForQueryAndGetTime(e):e.endMs-e.startMs})()}disposeData(e,s=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(s?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!s&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:r}=this.texData.get(e);return null!=r&&(this.disposeData(r.real.dataId,s),this.disposeData(r.imag.dataId,s)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:s,dtype:r,texShape:o,usage:a,isPacked:i,slice:l}=this.texData.get(e),u=l&&l.origDataId||e,c=this.dataRefCount.get(u);c>1?this.dataRefCount.set(u,c-1):(this.dataRefCount.delete(u),null!=s&&(this.numBytesInGPU-=this.computeBytes(o,r),this.textureManager.releaseTexture(s,o,a,i)));const h=this.texData.get(e);h.texture=null,h.texShape=null,h.isPacked=!1,h.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture.texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,s=Eq){return B().getBool("WEBGL_CPU_FORWARD")&&e.every(r=>null==this.texData.get(r.dataId).texture&&q(r.shape)<s)}getGPGPUContext(){return this.gpgpu}where(e){as("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const s=e.dataSync();return Iq(e.shape,s)}packedUnaryOp(e,s,r){const o=new uo(e.shape,s),a=this.compileAndRun(o,[e],r);return _s().makeTensorFromTensorInfo(a)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const o=LI(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,o)}if(B().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,UI,e.dtype);const s=new ir(e.shape,UI),r=this.compileAndRun(s,[e]);return _s().makeTensorFromTensorInfo(r)}makeTensorInfo(e,s,r){let o;if("string"===s&&null!=r&&r.length>0&&Hs(r[0])){const a=r.map(i=>js(i));o=this.write(a,e,s)}else o=this.write(r,e,s);return this.texData.get(o).usage=null,{dataId:o,shape:e,dtype:s}}makeOutput(e,s,r){return _s().makeTensorFromTensorInfo(this.makeTensorInfo(e,s,r),this)}unpackTensor(e){const s=new Nq(e.shape);return this.runWebGLProgram(s,[e],e.dtype)}packTensor(e){const s=new lq(e.shape);return this.runWebGLProgram(s,[e],e.dtype,null,!0)}packedReshape(e,s){const r=[ea(e.shape),...ta(e.shape)],o={dtype:e.dtype,shape:r,dataId:e.dataId},a=[ea(s),...ta(s)],i=new zI(a,r),c=this.runWebGLProgram(i,[o],e.dtype,[r],!0);return{dataId:c.dataId,shape:s,dtype:c.dtype}}decode(e,s){const r=this.texData.get(e),{isPacked:o,shape:a,dtype:i}=r;null!=s&&C(q(a)<=s[0]*s[1]*4,()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data.");const l=ac(a);let u;u=o?new cK(l):new uK(l);const h=[s??Sp(l)];return{dtype:i,shape:a,dataId:this.runWebGLProgram(u,[{shape:l,dtype:i,dataId:e}],i,h,!0,s).dataId}}runWebGLProgram(e,s,r,o,a=!1,i){const l=this.makeTensorInfo(e.outputShape,r),u=this.texData.get(l.dataId);if(e.packedOutput&&(u.isPacked=!0),e.outPackingScheme===vp.DENSE){const x=i??Sp(e.outputShape);u.texShape=x.map(b=>2*b)}if(null!=e.outTexUsage&&(u.usage=e.outTexUsage),0===q(l.shape))return u.values=on(l.dtype,0),l;const c=[],h=s.map(x=>{if("complex64"===x.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let b=this.texData.get(x.dataId);if(null==b.texture){if(!e.packedInputs&&q(x.shape)<=B().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:x.shape,texData:null,isUniform:!0,uniformValues:b.values};e.packedInputs&&(b.isPacked=!0,b.shape=x.shape)}if(this.uploadToGPU(x.dataId),!!b.isPacked!=!!e.packedInputs)x=b.isPacked?this.unpackTensor(x):this.packTensor(x),c.push(x),b=this.texData.get(x.dataId);else if(b.isPacked&&!ic(b.shape,x.shape)){const w=x,S=x.shape;x.shape=b.shape,x=this.packedReshape(x,S),c.push(x),b=this.texData.get(x.dataId),w.shape=S}return{shape:x.shape,texData:b,isUniform:!1}});this.uploadToGPU(l.dataId);const d={shape:l.shape,texData:u,isUniform:!1},p=function lK(n,t,e){let s="";t.concat(e).forEach(a=>{const i=null!=a.texData&&null!=a.texData.slice&&a.texData.slice.flatOffset>0;if(n.enableShapeUniforms&&!a.isUniform){const l=a.texData.texShape,{useSqueezeShape:u,uniformShape:c,keptDims:h}=Ex(n.packedInputs,a.shape,l);let d="",p="",f="";if(1===c.length&&n.packedInputs){const S=[Math.ceil(l[0]/2),Math.ceil(l[1]/2)];d=`${S[0]>1}_${S[1]>1}`}else if(2!==c.length||n.packedInputs){if(c.length>2&&!n.packedInputs){const S=Ae(c);f=`${S[0]===l[1]}_${S[S.length-1]===l[1]}`}}else p=`${c[0]>1}_${c[1]>1}`;const g=a.shape.length,m=2===c.length&&Ye(a.shape,l),y=1===q(a.shape),x=Eo(a.shape,e.shape),b=!n.packedInputs&&g===e.shape.length&&Ye(l,e.texData.texShape);s+=`${g}_${b}_${u?h:""}_${c.length}_${y}_${x}_${m}_${d}_${p}_${f}_${n.packedInputs||c.length>2?"":`${l[0]>1}_${l[1]>1}`}_${i}`}else s+=`${a.shape}_${a.isUniform?"uniform":a.texData.texShape}_${i}`});let o=n.constructor.name;return o+="_"+s+"_"+n.userCode+`${B().getNumber("WEBGL_VERSION")}`,o}(e,h,d),f=this.getAndSaveBinary(p,()=>function aK(n,t,e,s){const r=e.map((c,h)=>{const d={logicalShape:c.shape,texShape:c.isUniform?null:c.texData.texShape,isUniform:c.isUniform,isPacked:!c.isUniform&&c.texData.isPacked,flatOffset:null};return null!=c.texData&&null!=c.texData.slice&&c.texData.slice.flatOffset>0&&(d.flatOffset=c.texData.slice.flatOffset),{name:t.variableNames[h],shapeInfo:d}}),o=r.map(c=>c.shapeInfo),a={logicalShape:s.shape,texShape:s.texData.texShape,isUniform:!1,isPacked:s.texData.isPacked,flatOffset:null},i=Nj(r,a,t),l=HN(n.gl,i),u=n.createProgram(l);return B().get("ENGINE_COMPILE_ONLY")?{program:t,fragmentShader:l,source:i,webGLProgram:u,inShapeInfos:o,outShapeInfo:a,variablesLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:(n.buildVao(u),Object.assign({program:t,fragmentShader:l,source:i,webGLProgram:u,inShapeInfos:o,outShapeInfo:a},gI(n,t,u)))}(this.gpgpu,e,h,d)),g=null!=this.activeTimers;let m;g&&(m=this.startTimer()),B().get("ENGINE_COMPILE_ONLY")||function iK(n,t,e,s,r){t.program.enableShapeUniforms||(yI(t.inShapeInfos,e),yI([t.outShapeInfo],[s]));const o=s.texData.texture,a=s.texData.texShape;s.texData.isPacked?n.setOutputPackedMatrixTexture(o.texture,a[0],a[1]):n.setOutputMatrixTexture(o.texture,a[0],a[1]),n.setProgram(t.webGLProgram),n.bindVertexArray(t.webGLProgram.vao),1===B().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&n.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&n.gl.uniform1f(t.nanLoc,NaN);for(let l=0;l<e.length;++l){const u=e[l],{uniform:c,offset:h,shape:d,texShape:p}=t.variablesLocations[l];if(d){const{uniformShape:f}=Ex(t.program.packedInputs,u.shape,u.texData.texShape);switch(f.length){case 1:n.gl.uniform1iv(d,new Int32Array(f));break;case 2:n.gl.uniform2iv(d,new Int32Array(f));break;case 3:n.gl.uniform3iv(d,new Int32Array(f));break;case 4:n.gl.uniform4iv(d,new Int32Array(f))}}if(p&&n.gl.uniform2i(p,u.texData.texShape[0],u.texData.texShape[1]),null!=c){if(u.isUniform){if(q(u.shape)<2)n.gl.uniform1f(c,u.uniformValues[0]);else{let f=u.uniformValues;f instanceof Float32Array||(f=new Float32Array(f)),n.gl.uniform1fv(c,f)}continue}null!=u.texData.slice&&null!=h&&n.gl.uniform1i(h,u.texData.slice.flatOffset),n.setInputMatrixTexture(u.texData.texture.texture,c,l)}}const i=t.outShapeLocation;if(i)switch(s.shape.length){case 1:n.gl.uniform1iv(i,new Int32Array(s.shape));break;case 2:n.gl.uniform2iv(i,new Int32Array(s.shape));break;case 3:n.gl.uniform3iv(i,new Int32Array(s.shape));break;case 4:n.gl.uniform4iv(i,new Int32Array(s.shape))}if(t.outShapeStridesLocation){const l=Ae(s.shape);switch(s.shape.length){case 2:n.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(l));break;case 3:n.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(l));break;case 4:n.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(l))}}if(t.outTexShapeLocation&&n.gl.uniform2i(t.outTexShapeLocation,s.texData.texShape[0],s.texData.texShape[1]),t.program.customUniforms&&r)for(let l=0;l<t.program.customUniforms.length;++l){const u=t.program.customUniforms[l],c=t.customUniformLocations[l],h=r[l];if("float"===u.type)n.gl.uniform1fv(c,h);else if("vec2"===u.type)n.gl.uniform2fv(c,h);else if("vec3"===u.type)n.gl.uniform3fv(c,h);else if("vec4"===u.type)n.gl.uniform4fv(c,h);else if("int"===u.type)n.gl.uniform1iv(c,h);else if("ivec2"===u.type)n.gl.uniform2iv(c,h);else if("ivec3"===u.type)n.gl.uniform3iv(c,h);else{if("ivec4"!==u.type)throw Error(`uniform type ${u.type} is not supported yet.`);n.gl.uniform4iv(c,h)}}n.executeProgram()}(this.gpgpu,f,h,d,o),c.forEach(x=>this.disposeIntermediateTensorInfo(x)),g&&(m=this.endTimer(m),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(m)}));const y=B().getNumber("WEBGL_FLUSH_THRESHOLD");if(y>0){const x=gn();x-this.lastGlFlushTime>y&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=x)}if(!B().getBool("WEBGL_LAZILY_UNPACK")&&u.isPacked&&!1===a){const x=this.unpackTensor(l);return this.disposeIntermediateTensorInfo(l),x}return l}compileAndRun(e,s,r,o,a=!1){return this.runWebGLProgram(e,s,r=r||s[0].dtype,o,a)}getAndSaveBinary(e,s){return e in this.binaryCache||(this.binaryCache[e]=s()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){this.disposed||(B().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach(s=>{this.gpgpu.deleteProgram(this.binaryCache[s].webGLProgram),delete this.binaryCache[s]}),this.textureManager.dispose(),null!=this.canvas&&typeof HTMLCanvasElement<"u"&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=z(()=>{if(!B().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=B().getBool("DEBUG");B().set("DEBUG",!1);const s=this.abs(_e(1e-8)).dataSync()[0];if(B().set("DEBUG",e),s>0)return 32}return 16})),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const s=this.texData.get(e),{shape:r,dtype:o,values:a,texture:i,usage:l,isPacked:u}=s;if(null!=i)return;const c=null!=this.activeTimers;let h;c&&(h=gn());let d=s.texShape;if(null==d&&(d=oI(r,u),s.texShape=d),null!=a){const p=ac(r);let f,g=d[1],m=d[0];const y=a instanceof Uint8Array||a instanceof Uint8ClampedArray;(u||!y)&&([g,m]=Pi(d[0],d[1])),f=u?new fK(p,y):new xI(p,y);const x=y?[m,g]:d,b=this.makeTensorInfo(x,o),w=this.texData.get(b.dataId);w.usage=y?ks.PIXELS:ks.UPLOAD,w.texShape=x,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(b.dataId),g,m,a);const k=this.runWebGLProgram(f,[b],o,[[m,g]],!0),T=this.texData.get(k.dataId);s.texShape=T.texShape,s.isPacked=T.isPacked,s.usage=T.usage,B().get("ENGINE_COMPILE_ONLY")?this.disposeData(k.dataId):(s.texture=T.texture,s.values=null,this.texData.delete(k.dataId)),this.disposeIntermediateTensorInfo(b),c&&(this.uploadWaitMs+=gn()-h)}else{const p=this.acquireTexture(d,l,o,u);s.texture=p}}convertAndCacheOnCPU(e,s){const r=this.texData.get(e),{dtype:o}=r;return null!=s&&(r.values=function Rq(n,t){if("float32"===t||"complex64"===t)return n;if("int32"===t||"bool"===t){const e="int32"===t?new Int32Array(n.length):new Uint8Array(n.length);for(let s=0;s<e.length;++s)e[s]=Math.round(n[s]);return e}throw new Error(`Unknown dtype ${t}`)}(s,o)),r.values}acquireTexture(e,s,r,o){if(this.numBytesInGPU+=this.computeBytes(e,r),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const a=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${a} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,s,o)}computeBytes(e,s){return e[0]*e[1]*qi(s)}checkCompileCompletion(){for(const[,e]of Object.entries(this.binaryCache))this.checkCompletion_(e)}checkCompileCompletionAsync(){var e=this;return(0,O.Z)(function*(){const s=[];if(e.gpgpu.parallelCompilationExtension){for(const[,r]of Object.entries(e.binaryCache))s.push(e.checkCompletionAsync_(r));return Promise.all(s)}for(const[,r]of Object.entries(e.binaryCache)){const o=new Promise(a=>{try{e.checkCompletion_(r),a(!0)}catch(i){throw i}});s.push(o)}return Promise.all(s)})()}checkCompletionAsync_(e){var s=this;return(0,O.Z)(function*(){return s.gpgpu.gl.getProgramParameter(e.webGLProgram,s.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?s.checkCompletion_(e):(yield wg(),s.checkCompletionAsync_(e))})()}checkCompletion_(e){if(!1===this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.gl.LINK_STATUS))throw console.log(this.gpgpu.gl.getProgramInfoLog(e.webGLProgram)),!1===this.gpgpu.gl.getShaderParameter(e.fragmentShader,this.gpgpu.gl.COMPILE_STATUS)?(Sx(e.source,this.gpgpu.gl.getShaderInfoLog(e.fragmentShader)),new Error("Failed to compile fragment shader.")):new Error("Failed to link vertex and fragment shaders.");return!0}getUniformLocations(){for(const e of Object.values(this.binaryCache)){this.gpgpu.buildVao(e.webGLProgram);const{variablesLocations:s,customUniformLocations:r,infLoc:o,nanLoc:a,outShapeLocation:i,outShapeStridesLocation:l,outTexShapeLocation:u}=gI(this.gpgpu,e.program,e.webGLProgram);e.variablesLocations=s,e.customUniformLocations=r,e.infLoc=o,e.nanLoc=a,e.outShapeLocation=i,e.outShapeStridesLocation=l,e.outTexShapeLocation=u}}createTensorFromGPUData(e,s,r){e.channels=e.channels||"RGBA";const{texture:o,height:a,width:i,channels:l}=e,u=_s().backend;if(!u.gpgpu.gl.isTexture(o))throw new Error("The texture is invalid. Also, please make sure the texture and the TFJS WebGL backend are using the same canvas. If you want to use your own custom canvas, you have to create and use the custom TFJS WebGL backend created from the canvas through 'new tf.MathBackendWebGL(customCanvas)'.");const c=u.writeTexture(o,s,r,a,i,l);return _s().makeTensorFromDataId(c,s,r,u)}}return n.nextDataId=0,n})();const HI="4.13.0";function jI(){B().set("WEBGL_FORCE_F16_TEXTURES",!0)}pf()&&Ff("webgl",()=>new GI,2);const Dq={forceHalfFloat:jI},Lx="\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n";class ra{constructor(t,e,s){this.variableNames=["A","B"],this.outputShape=Ve(e,s),this.enableShapeUniforms=Tn(this.outputShape.length),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${t}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}const oa="\n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n";class Ui{constructor(t,e,s,r=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=Ve(e,s);const o=this.outputShape.length;this.enableShapeUniforms=Tn(o);let a="";if(r)if(0===o||1===q(this.outputShape))a="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else if(a=`\n          ${yt(o)} coords = getOutputCoords();\n        `,1===o)a+=this.enableShapeUniforms?"\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ":`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const l=On("coords",o);a+=this.enableShapeUniforms?`\n            bool nextRowOutOfBounds =\n              (${l[o-2]} + 1) >= outShape[${o} - 2];\n            bool nextColOutOfBounds =\n              (${l[o-1]} + 1) >= outShape[${o} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `:`\n            bool nextRowOutOfBounds =\n              (${l[o-2]} + 1) >= ${this.outputShape[o-2]};\n            bool nextColOutOfBounds =\n              (${l[o-1]} + 1) >= ${this.outputShape[o-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${t}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${a}\n\n        setOutput(result);\n      }\n    `}}function ss(n){const{inputs:t,backend:e}=n,{x:s}=t;return e.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const Fq={kernelName:Aa,backendName:"webgl",kernelFunc:ss};function co(n){const{inputs:t,backend:e}=n,{real:s,imag:r}=t,o=e.makeTensorInfo(s.shape,"complex64"),a=e.texData.get(o.dataId),i=ss({inputs:{x:s},backend:e}),l=ss({inputs:{x:r},backend:e});return a.complexTensorInfos={real:i,imag:l},o}const Oq={kernelName:Ec,backendName:"webgl",kernelFunc:co},KI="return (a < 0.) ? b * a : a;",qI="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",Pq={kernelName:yl,backendName:"webgl",kernelFunc:function Lq(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{alpha:o}=s,a=e.makeTensorInfo([],"float32",dr(o,"float32")),i=B().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Ui(qI,r.shape,a.shape):new ra(KI,r.shape,a.shape),l=e.runWebGLProgram(i,[r,a],"float32");return e.disposeIntermediateTensorInfo(a),l}},XI="return (a < 0.) ? b * a : a;",ZI="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",zq={kernelName:Ll,backendName:"webgl",kernelFunc:function Mq(n){const{inputs:t,backend:e}=n,{x:s,alpha:r}=t,o=B().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Ui(ZI,s.shape,r.shape):new ra(XI,s.shape,r.shape);return e.runWebGLProgram(o,[s,r],"float32")}},Gi="if (isnan(x)) return x;";function ot({opSnippet:n,packedOpSnippet:t,cpuKernelImpl:e,dtype:s}){return({inputs:r,backend:o})=>{const{x:a}=r,i=o,l=s||a.dtype;if(i.shouldExecuteOnCPU([a])&&null!=e){const h=i.texData.get(a.dataId),d=e(h.values,l);return i.makeTensorInfo(a.shape,l,d)}let c;return c=B().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new uo(a.shape,t):new ir(a.shape,n),i.runWebGLProgram(c,[a],l)}}function Cn({opSnippet:n,packedOpSnippet:t,checkOutOfBounds:e=!1,supportsComplex:s=!1,cpuKernelImpl:r,dtype:o}){return({inputs:a,backend:i})=>{const{a:l,b:u}=a,c=i;if(s&&"complex64"===l.dtype){const f=c.texData.get(l.dataId),g=c.texData.get(u.dataId),[m,y]=[[f.complexTensorInfos.real,g.complexTensorInfos.real],[f.complexTensorInfos.imag,g.complexTensorInfos.imag]].map(b=>{const[w,S]=b,N={dataId:w.dataId,dtype:w.dtype,shape:l.shape},k={dataId:S.dataId,dtype:S.dtype,shape:u.shape},T=new ra(n,l.shape,u.shape);return c.runWebGLProgram(T,[N,k],Pn(w.dtype,S.dtype))}),x=co({inputs:{real:m,imag:y},backend:c});return c.disposeIntermediateTensorInfo(m),c.disposeIntermediateTensorInfo(y),x}const h=o||Pn(l.dtype,u.dtype);if(("string"===l.dtype||"string"===u.dtype||c.shouldExecuteOnCPU([l,u]))&&null!=r){const f=c.texData.get(l.dataId).values,g=c.texData.get(u.dataId).values,m="string"===l.dtype?Ir(f):f,y="string"===l.dtype?Ir(g):g,[x,b]=r(l.shape,u.shape,m,y,h),w=c.makeTensorInfo(b,h);return c.texData.get(w.dataId).values=x,w}let p;return p=B().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new Ui(t,l.shape,u.shape,e):new ra(n,l.shape,u.shape),c.runWebGLProgram(p,[l,u],h)}}function uc(n,t=!1){if("linear"===n)return t?bq:fq;if("relu"===n)return t?vq:gq;if("elu"===n)return t?wq:mq;if("relu6"===n)return t?Sq:yq;if("prelu"===n)return t?ZI:XI;if("leakyrelu"===n)return t?qI:KI;if("sigmoid"===n)return t?Cq:xq;throw new Error(`Activation ${n} has not been implemented for the WebGL backend.`)}class YI{constructor(t,e,s,r=!1,o=!1,a=!1,i=null,l=!1,u=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=s,this.enableShapeUniforms=Tn(this.outputShape.length);const h=Math.ceil((r?t[1]:t[2])/2),d=r?"i * 2, rc.y":"rc.y, i * 2",p=o?"rc.z, i * 2":"i * 2, rc.z",f=r?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],g=o?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let m="",y="";i&&(m=l?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${i}\n        }`:u?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${i}\n        }`:`vec4 activation(vec4 x) {\n          ${i}\n        }`,y="result = activation(result);");const x=a?"result += getBiasAtOutCoords();":"";a&&this.variableNames.push("bias"),l&&this.variableNames.push("preluActivationWeights"),u&&this.variableNames.push("leakyreluAlpha");let b="rc.x",w="rc.x";t[0]<e[0]?b=`imod(rc.x, ${t[0]})`:e[0]<t[0]&&(w=`imod(rc.x, ${e[0]})`),this.userCode=`\n      ${m}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${h}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        int batchA = ${b};\n        int batchB = ${w};\n        for (int i = 0; i < ${h}; i++) {\n          vec4 a = getMatrixA(batchA, ${d});\n          vec4 b = getMatrixB(batchB, ${p});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${f[0]} * ${g[0]});\n          result += (${f[1]} * ${g[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${x}\n\n        ${y}\n\n        setOutput(result);\n      }\n    `}}const QI={REAL:"return areal * breal - aimag * bimag;",IMAG:"return areal * bimag + aimag * breal;"};class JI{constructor(t,e,s){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=Ve(e,s),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${t}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const ek="return a * b;";function Px(n){const{inputs:t,backend:e}=n,{a:s,b:r}=t,o=Pn(s.dtype,r.dtype);if("complex64"===s.dtype){const i=e.texData.get(s.dataId),l=e.texData.get(r.dataId),u=new JI(QI.REAL,s.shape,r.shape),c=new JI(QI.IMAG,s.shape,r.shape),h=[{dataId:i.complexTensorInfos.real.dataId,dtype:i.complexTensorInfos.real.dtype,shape:s.shape},{dataId:i.complexTensorInfos.imag.dataId,dtype:i.complexTensorInfos.imag.dtype,shape:s.shape},{dataId:l.complexTensorInfos.real.dataId,dtype:l.complexTensorInfos.real.dtype,shape:r.shape},{dataId:l.complexTensorInfos.imag.dataId,dtype:l.complexTensorInfos.imag.dtype,shape:r.shape}],d=e.runWebGLProgram(u,h,"float32"),p=e.runWebGLProgram(c,h,"float32"),f=co({inputs:{real:d,imag:p},backend:e});return e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(p),f}if(e.shouldExecuteOnCPU([s,r])){const i=e.texData.get(s.dataId),l=e.texData.get(r.dataId),[u,c]=PK(s.shape,r.shape,i.values,l.values,o),h=e.makeTensorInfo(c,o);return e.texData.get(h.dataId).values=u,h}let a;return a=B().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Ui(ek,s.shape,r.shape):new ra(ek,s.shape,r.shape),e.runWebGLProgram(a,[s,r],o)}const Bq={kernelName:Ba,backendName:"webgl",kernelFunc:Px};function fe(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{shape:o}=s,a=e,i=q(r.shape),l=Qp(o,i),u=q(l);C(i===u,()=>`The new shape (${l}) has ${u} elements and the old shape (${r.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`);const c=a.texData.get(r.dataId);return!c.isPacked||ic(r.shape,l)||null!==c.texture&&ic(c.shape,l)?(a.incRef(r.dataId),{dataId:r.dataId,shape:l,dtype:r.dtype}):function Vq(n,t,e){const s=[ea(n.shape),...ta(n.shape)],r={dtype:n.dtype,shape:s,dataId:n.dataId},o=[ea(t),...ta(t)],a=new zI(o,s),u=e.runWebGLProgram(a,[r],n.dtype,[s],!0);return{dataId:u.dataId,shape:t,dtype:u.dtype}}(r,l,a)}const Wq={kernelName:Ml,backendName:"webgl",kernelFunc:fe};class tk{constructor(t,e){this.variableNames=["x"];const{windowSize:s,batchSize:r,inSize:o,outSize:a}=t;this.outputShape=[r,a];const i=4*Math.floor(s/4),l=s%4;let u="sumValue += dot(values, ones);";if(null!=e){const h=1/e;u=`sumValue += dot(values * ${yo(h)?h.toPrecision(2):h}, ones);`}let c="";o%s>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${s};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===l}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${u}\n        } else if (${2===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${u}\n        } else if (${3===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}class Uq{constructor(t,e){this.variableNames=["x"];const{windowSize:s,batchSize:r,inSize:o,outSize:a}=t;this.outputShape=[r,a];let i="0.0",l="";"prod"===e?i="1.0":"min"===e?(i="1.0 / 1e-20",l="min"):"max"===e&&(i="-1.0 / 1e-20",l="max");let u=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===e?u="sumValue":"prod"===e?u="prodValue":"all"===e?u="allValue":"any"===e&&(u="anyValue");const c=4*Math.floor(s/4),h=s%4;let d=`\n      if (${"sum"===e}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===e}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${l}(values, minMaxValue);\n        if (${"min"===e} || ${"max"===e}) {\n          minMaxValue = ${l}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `,p="vec4";"all"===e?(i="1.0",d="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",p="bvec4"):"any"===e&&(i="0.0",d="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",p="bvec4");let f="";o%s>0&&(f=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${i};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${f}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${s};\n\n        vec4 minMaxValue = vec4(${i});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${c}; i += 4) {\n          int inIdx = inOffset + i;\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${d}\n        }\n\n        int inIdx = inOffset + ${c};\n        if (${1===h}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${d}\n        } else if (${2===h}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${d}\n        } else if (${3===h}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${d}\n        }\n        setOutput(${u});\n      }\n    `}}function aa(n,t,e,s){const r=function Gq(n){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const e=t.length?t[t.length-1].outSize:n[1],s=kd(e);t.push({inSize:e,windowSize:s,outSize:Math.ceil(e/s)})}return t}(n.shape);let o=n;for(let a=0;a<r.length;a++){const{inSize:i,windowSize:l,outSize:u}=r[a];let c,h;c="mean"===e?0===a?new tk({windowSize:l,inSize:i,batchSize:n.shape[0],outSize:u},i):new tk({windowSize:l,inSize:i,batchSize:n.shape[0],outSize:u}):new Uq({windowSize:l,inSize:i,batchSize:n.shape[0],outSize:u},e),h=o,o=s.runWebGLProgram(c,[o],t),h.dataId!==n.dataId&&s.disposeIntermediateTensorInfo(h)}return o}class Hq{constructor(t,e){this.variableNames=["A"];const s=new Array(t.length);for(let a=0;a<s.length;a++)s[a]=t[e[a]];this.outputShape=s,this.rank=s.length;const r=yt(this.rank),o=function jq(n){const t=n.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const e=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],s=new Array(t);for(let r=0;r<n.length;r++)s[n[r]]=e[r];return s.join()}(e);this.userCode=`\n    void main() {\n      ${r} resRC = getOutputCoords();\n      setOutput(getA(${o}));\n    }\n    `}}class Kq{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const s=new Array(t.length);for(let c=0;c<s.length;c++)s[c]=t[e[c]];if(this.outputShape=s,this.rank=s.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const r=yt(this.rank),o=MI("rc",this.rank),a=new Array(this.rank);for(let c=0;c<e.length;c++)a[e[c]]=o[c];const i=`vec2(${a.slice(-2).join()})`,l=`++${o[this.rank-1]} < ${s[this.rank-1]}`,u=`getChannel(getA(${a.join()}), ${i})`;this.userCode=`\n    void main() {\n      ${r} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${u};\n      if(${l}) {\n        result[1] = ${u};\n      }\n      --${o[this.rank-1]};\n      if(++${o[this.rank-2]} < ${s[this.rank-2]}) {\n        result[2] = ${u};\n        if(${l}) {\n          result[3] = ${u};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function Rp(n,t,e){const s=B().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Kq(n.shape,t):new Hq(n.shape,t);return e.runWebGLProgram(s,[n],n.dtype)}function Dp(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s;return function qq(n,t,e,s){const o=n.shape.length,a=je(t,n.shape);let i=a;const l=_t(i,o),u=null!=l;let c=n;u&&(c=Rp(n,l,s),i=Bt(i.length,o)),bn("sum",i,o);const[h,d]=cn(c.shape,i);let p=h;e&&(p=zt(h,a));const f=q(d),y=fe({inputs:{x:c},attrs:{shape:[q(n.shape)/f,f]},backend:s}),b=aa(y,Oh(n.dtype),"sum",s),w=fe({inputs:{x:b},attrs:{shape:p},backend:s});return s.disposeIntermediateTensorInfo(y),s.disposeIntermediateTensorInfo(b),u&&s.disposeIntermediateTensorInfo(c),w}(r,o,a,e)}const Xq={kernelName:Gl,backendName:"webgl",kernelFunc:Dp};function Ln(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{perm:o}=s,a=e,l=new Array(r.shape.length);for(let c=0;c<l.length;c++)l[c]=r.shape[o[c]];let u;if(a.shouldExecuteOnCPU([r])){const h=a.texData.get(r.dataId).values,d=Ox(h,r.shape,r.dtype,o,l);u=a.makeTensorInfo(l,r.dtype),a.texData.get(u.dataId).values=d}else u=Rp(r,o,a);return u}const Zq={kernelName:So,backendName:"webgl",kernelFunc:Ln},nk=1e3;function Fp({a:n,b:t,transposeA:e,transposeB:s,backend:r,bias:o=null,preluActivationWeights:a=null,leakyreluAlpha:i=0,activation:l=null}){const u=n.shape.length,c=t.shape.length,h=e?n.shape[u-2]:n.shape[u-1],d=s?t.shape[c-1]:t.shape[c-2],p=e?n.shape[u-1]:n.shape[u-2],f=s?t.shape[c-2]:t.shape[c-1],g=n.shape.slice(0,-2),m=t.shape.slice(0,-2),y=q(g),x=q(m),w=Ve(n.shape.slice(0,-2),t.shape.slice(0,-2)).concat([p,f]);C(h===d,()=>`Error in matMul: inner shapes (${h}) and (${d}) of Tensors with shapes ${n.shape} and ${t.shape} and transposeA=${e} and transposeB=${s} must match.`);const S=e?[y,h,p]:[y,p,h],N=s?[x,f,d]:[x,d,f],k=fe({inputs:{x:n},backend:r,attrs:{shape:S}}),T=fe({inputs:{x:t},backend:r,attrs:{shape:N}}),$=[k,T],R=Math.max(y,x),M=e?k.shape[1]:k.shape[2],V=null!=o,W=null!=a,H="leakyrelu"===l,K=null!=l?uc(l,!0):null;let Y;if((1===p||1===f)&&M>nk&&!1===(V||W||H||null!=K)){let Q=k,re=T;e&&(Q=Ln({inputs:{x:k},backend:r,attrs:{perm:[0,2,1]}}),$.push(Q)),s&&(re=Ln({inputs:{x:T},backend:r,attrs:{perm:[0,2,1]}}),$.push(re));const j=1===f;let J=Q;1!==f&&(J=fe({inputs:{x:Q},backend:r,attrs:{shape:[R,M,1]}}),$.push(J));const ue=1===f?2:1;let le=re;j&&(le=fe({inputs:{x:re},backend:r,attrs:{shape:[R,1,M]}}),$.push(le));const pe=Px({inputs:{a:J,b:le},backend:r});Y=Dp({inputs:{x:pe},backend:r,attrs:{axis:ue,keepDims:!0}}),$.push(pe)}else{const Q=Pn(n.dtype,t.dtype),re=new YI(S,N,[R,p,f],e,s,V,K,W,H),ae=[k,T];if(null!=o&&ae.push(o),W&&ae.push(a),H){const j=r.makeTensorInfo([],"float32",dr(i,"float32"));ae.push(j),$.push(j)}Y=r.runWebGLProgram(re,ae,Q)}const X=fe({inputs:{x:Y},backend:r,attrs:{shape:w}});$.push(Y);for(const Q of $)r.disposeIntermediateTensorInfo(Q);return X}const Qq={kernelName:Ql,backendName:"webgl",kernelFunc:function Yq(n){const{inputs:t,backend:e,attrs:s}=n,{a:r,b:o,bias:a,preluActivationWeights:i}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;return Fp({a:r,b:o,transposeA:l,transposeB:u,backend:e,bias:a,preluActivationWeights:i,leakyreluAlpha:h,activation:c})}},sk="return abs(x);",e6={kernelName:Xi,backendName:"webgl",kernelFunc:function Jq(n){const{inputs:t,backend:e}=n,{x:s}=t;if(e.shouldExecuteOnCPU([s])&&"complex64"!==s.dtype){const o=e.texData.get(s.dataId),a=LI(o.values);return e.makeTensorInfo(s.shape,s.dtype,a)}let r;return r=B().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new uo(s.shape,sk):new ir(s.shape,sk),e.runWebGLProgram(r,[s],s.dtype)}},n6=ot({opSnippet:gs+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"}),s6={kernelName:ha,backendName:"webgl",kernelFunc:n6},o6=ot({opSnippet:gs+"\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"}),a6={kernelName:da,backendName:"webgl",kernelFunc:o6},rk="return a + b;",i6=Cn({opSnippet:rk,packedOpSnippet:rk,supportsComplex:!0,cpuKernelImpl:gK}),l6={kernelName:vo,backendName:"webgl",kernelFunc:i6};class u6{constructor(t,e){this.outputShape=[],this.outputShape=t,this.variableNames=e.map((o,a)=>`T${a}`);const s=[];this.variableNames.forEach(o=>{s.push(`float v${o} = get${o}AtOutCoords();`)});const r=this.variableNames.map(o=>`v${o}`).join(" + ");this.userCode=`\n      void main() {\n        ${s.join("\n        ")}\n\n        float result = ${r};\n        setOutput(result);\n      }\n    `}}class c6{constructor(t,e){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.variableNames=e.map((o,a)=>`T${a}`);const s=[];this.variableNames.forEach(o=>{s.push(`vec4 v${o} = get${o}AtOutCoords();`)});const r=this.variableNames.map(o=>`v${o}`).join(" + ");this.userCode=`\n      void main() {\n        ${s.join("\n        ")}\n\n        vec4 result = ${r};\n        setOutput(result);\n      }\n    `}}const h6={kernelName:Zi,backendName:"webgl",kernelFunc:function Op(n){const{inputs:t,backend:e}=n,s=t;if(1===s.length)return ss({inputs:{x:s[0]},backend:e});if(s.length>B().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const l=Math.floor(s.length/2),u=Op({inputs:s.slice(0,l),backend:e}),c=Op({inputs:s.slice(l),backend:e});return Op({inputs:[u,c],backend:e})}const r=s.map(l=>l.dtype).reduce((l,u)=>Pn(l,u)),o=s.map(l=>l.shape),i=B().getBool("WEBGL_PACK")?new c6(s[0].shape,o):new u6(s[0].shape,o);return e.runWebGLProgram(i,s,r)}},p6={kernelName:Cc,backendName:"webgl",kernelFunc:function d6(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s,i=r.shape.length,l=je(o,r.shape);let u=l;const c=_t(u,i);let h=r;null!=c&&(h=Ln({inputs:{x:r},backend:e,attrs:{perm:c}}),u=Bt(u.length,i)),bn("all",u,i);const[d,p]=cn(h.shape,u),g=fe({inputs:{x:h},backend:e,attrs:{shape:[-1,q(p)]}}),m=aa(g,g.dtype,"all",e);let y;return y=fe(a?{inputs:{x:m},backend:e,attrs:{shape:zt(d,l)}}:{inputs:{x:m},backend:e,attrs:{shape:d}}),e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(m),null!=c&&e.disposeIntermediateTensorInfo(h),y}},m6={kernelName:Nc,backendName:"webgl",kernelFunc:function f6(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s,i=r.shape.length,l=je(o,r.shape);let u=l;const c=_t(u,i);let h=r;null!=c&&(h=Ln({inputs:{x:r},backend:e,attrs:{perm:c}}),u=Bt(u.length,i)),bn("any",u,i);const[d,p]=cn(h.shape,u),g=fe({inputs:{x:h},backend:e,attrs:{shape:[-1,q(p)]}}),m=aa(g,g.dtype,"any",e);let y;return y=fe(a?{inputs:{x:m},backend:e,attrs:{shape:zt(d,l)}}:{inputs:{x:m},backend:e,attrs:{shape:d}}),e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(m),null!=c&&e.disposeIntermediateTensorInfo(h),y}};class g6{constructor(t,e,s){this.variableNames=["A"];const{windowSize:r,batchSize:o,outSize:a}=t;s||this.variableNames.push("bestIndicesA"),this.outputShape=[o,a],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${r};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${r}; i++) {\n          int inIdx = ${s?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));"};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${"max"===e?">":"<"} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class y6{constructor(t,e,s,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,C(t.length>2,()=>`Packed arg${s.charAt(0).toUpperCase()+s.slice(1)} supports only inputs with rank above 2.`);const a=Math.ceil(t[t.length-1]/e);this.outputShape=t.slice(0,-1),a>1&&this.outputShape.push(a),r||this.variableNames.push("bestIndicesA");const i=this.outputShape,l=i.length,u=yt(l),c=On("coords",l);let h,d;if(1===a){d=l+1;const T=yt(d);h=`\n        ${T} sourceLocR = ${T}(${c.join()}, 0);\n        ++${c[l-1]};\n        ${T} sourceLocG = ${T}(${c.join()}, 0);\n        ++${c[l-2]};\n        ${T} sourceLocA = ${T}(${c.join()}, 0);\n        --${c[l-1]};\n        ${T} sourceLocB = ${T}(${c.join()}, 0);\n        --${c[l-2]};`}else d=l,h=`\n        ${u} sourceLocR = coords;\n        ++${c[l-1]};\n        ${u} sourceLocG = coords;\n        ++${c[l-2]};\n        ${u} sourceLocA = coords;\n        --${c[l-1]};\n        ${u} sourceLocB = coords;\n        --${c[l-2]};`;const p=["x","y","z","w","u","v"].slice(0,d),f="."+p[d-1],g=p.map(T=>"int "+T),m=On("sourceLocR",d-1).concat("inIdx.r"),y=On("sourceLocG",d-1).concat("inIdx.g"),x=On("sourceLocB",d-1).concat("inIdx.b"),b=On("sourceLocA",d-1).concat("inIdx.a"),w="max"===s?"greaterThan":"lessThan",S=r?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${x.join()}),\n                             getBestIndicesAChannel(${b.join()})));`,N=`vec4(\n            getAChannel(${m.join()}),\n            hasNextCol ? getAChannel(${y.join()}) : 0.,\n            hasNextRow ? getAChannel(${x.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${b.join()}) : 0.)`,k=r?"":`\n      float getBestIndicesAChannel(${g.join()}) {\n        return getChannel(getBestIndicesA(${p.join()}),\n                                          vec2(${p.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${g.join()}) {\n        return getChannel(getA(${p.join()}),\n                               vec2(${p.slice(-2).join()}));\n      }\n      ${k}\n      void main() {\n        ${u} coords = getOutputCoords();\n        bool hasNextCol = ${c[l-1]} < ${i[l-1]-1};\n        bool hasNextRow = ${c[l-2]} < ${i[l-2]-1};\n        ${h}\n        ivec4 srcIdx = ivec4(sourceLocR${f}, sourceLocG${f},\n          sourceLocB${f}, sourceLocA${f}) * ${e};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${N};\n\n        for (int i = 0; i < ${e}; i++) {\n          inIdx = srcIdx;\n          ${S}\n          vec4 candidate = ${N};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${w}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function ok(n,t,e,s=null){let r=t.shape[0],o=t.shape[1];null!=s&&(r=s.shape[0],o=s.shape[1]);const a=kd(o),i={windowSize:a,inSize:o,batchSize:r,outSize:Math.ceil(o/a)},l=new g6(i,e,null==s),u=[t];null!=s&&u.push(s);const c=n.runWebGLProgram(l,u,"int32");if(1===c.shape[1])return c;const h=ok(n,t,e,c);return n.disposeIntermediateTensorInfo(c),h}function ak(n,t,e,s=null){const r=null!=s?s.shape:t.shape,a=kd(r[r.length-1]),i=new y6(r,a,e,null==s),u=n.runWebGLProgram(i,null==s?[t]:[t,s],"int32");if(u.shape.length===t.shape.length){const c=ak(n,t,e,u);return n.disposeIntermediateTensorInfo(u),c}return u}function ik(n,t,e,s){const r=[e];if(bn("arg"+s.charAt(0).toUpperCase()+s.slice(1),r,t.shape.length),!B().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const o=[],a=n.texData.get(t.dataId);let l=t;null!==a&&a.isPacked&&(l=n.unpackTensor(t),o.push(l));const[u,c]=cn(l.shape,r),h=q(c),d=fe({inputs:{x:l},backend:n,attrs:{shape:[-1,h]}});o.push(d);const p=ok(n,d,s);o.push(p);const f=fe({inputs:{x:p},backend:n,attrs:{shape:u}});return o.forEach(g=>n.disposeIntermediateTensorInfo(g)),f}return ak(n,t,s)}const b6={kernelName:Yi,backendName:"webgl",kernelFunc:function x6(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o}=s;let a=je(o,r.shape);const i=_t(a,r.shape.length);let l=r;const u=[];null!=i&&(l=Ln({inputs:{x:r},backend:e,attrs:{perm:i}}),u.push(l),a=Bt(a.length,l.shape.length)),bn("argMax",[a[0]],l.shape.length);const c=ik(e,l,a[0],"max");return u.forEach(h=>e.disposeIntermediateTensorInfo(h)),c}},v6={kernelName:Qi,backendName:"webgl",kernelFunc:function w6(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o}=s;let a=je(o,r.shape);const i=_t(a,r.shape.length);let l=r;const u=[];null!=i&&(l=Ln({inputs:{x:r},backend:e,attrs:{perm:i}}),u.push(l),a=Bt(a.length,l.shape.length)),bn("argMin",[a[0]],l.shape.length);const c=ik(e,l,a[0],"min");return u.forEach(h=>e.disposeIntermediateTensorInfo(h)),c}},C6=ot({opSnippet:gs+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"}),N6={kernelName:pa,backendName:"webgl",kernelFunc:C6},k6=ot({opSnippet:gs+"return log(x + sqrt(x * x + 1.0));"}),T6={kernelName:fa,backendName:"webgl",kernelFunc:k6},E6=ot({opSnippet:gs+"\n  return atan(x);\n"}),_6={kernelName:ma,backendName:"webgl",kernelFunc:E6},D6=Cn({opSnippet:Lx+"\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+oa+"\n  return result;\n"}),F6={kernelName:ya,backendName:"webgl",kernelFunc:D6},L6=ot({opSnippet:gs+"\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"}),P6={kernelName:ga,backendName:"webgl",kernelFunc:L6};class cc{constructor(t,e,s,r=!1,o=!1){if(this.variableNames=["x"],"avg"===e&&s)throw new Error("Cannot compute positions for average pool.");const a=t.filterWidth,i=t.strideHeight,l=t.strideWidth,u=t.dilationHeight,c=t.dilationWidth,h=t.effectiveFilterHeight,d=t.effectiveFilterWidth,p=t.padInfo.top,f=t.padInfo.left;this.outputShape=t.outShape;const g="avg"===e;let x="0.0";if(g||(x="-1.0 / 1e-20"),s)return void(this.userCode=`\n        const ivec2 strides = ivec2(${i}, ${l});\n        const ivec2 pads = ivec2(${p}, ${f});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${h};\n              wR += ${u}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${d};\n                wC += ${c}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value >= currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${r?o?`((batch  * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + d`:`(xR * ${t.inWidth} + xC) * ${t.inChannels} + d`:`wR * ${d} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `);let w=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===e&&(w="avgValue / max(count, 1.0)");const S=4*Math.floor(a/4),N=a%4,k=`\n      if (${g}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${i}, ${l});\n      const ivec2 pads = ivec2(${p}, ${f});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${t.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${h};\n            wR += ${u}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${t.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${S}; wC += 4) {\n            int xC = xCCorner + wC * ${c};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${c}, d),\n              getValue(batch, xR, xC + 2 * ${c}, d),\n              getValue(batch, xR, xC + 3 * ${c}, d)\n            );\n\n            ${k}\n          }\n\n          int xC = xCCorner + ${S};\n          if (${1===N}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${2===N}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${c}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${3===N}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${c}, d),\n              getValue(batch, xR, xC + 2 * ${c}, d),\n              initializationValue\n            );\n\n            ${k}\n          }\n        }\n        setOutput(${w});\n      }\n    `}}class Mx{constructor(t,e,s,r=!1,o=!1){if(this.variableNames=["x"],"avg"===e&&s)throw new Error("Cannot compute positions for average pool.");const a=t.filterWidth,i=t.strideDepth,l=t.strideHeight,u=t.strideWidth,c=t.dilationDepth,h=t.dilationHeight,d=t.dilationWidth,p=t.effectiveFilterDepth,f=t.effectiveFilterHeight,g=t.effectiveFilterWidth,m=t.padInfo.front,y=t.padInfo.top,x=t.padInfo.left;this.outputShape=t.outShape;const b="avg"===e;let w="0.0";if(b||(w="-1.0 / 1e-20"),s)return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${i}, ${l}, ${u});\n        const ivec3 pads = ivec3(${m}, ${y}, ${x});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${p};\n              wD += ${c}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${t.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${f};\n                wR += ${h}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${t.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${g};\n                  wC += ${d}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${t.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value >= currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${r?o?`(((batch * ${t.inDepth} + xD) * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`((xD * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`wD * ${f} * ${g} +\n                      wR * ${g} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `);let N=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===e&&(N="avgValue / max(count, 1.0)");const k=4*Math.floor(a/4),T=a%4,$=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${i}, ${l}, ${u});\n      const ivec3 pads = ivec3(${m}, ${y}, ${x});\n      const float initializationValue = ${w};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${t.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${w});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${p};\n            wD += ${c}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${t.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${f};\n            wR += ${h}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${k}; wC += 4) {\n              int xC = xCCorner + wC * ${d};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${d}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${d}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${d}, ch)\n              );\n\n              ${$}\n            }\n\n            int xC = xCCorner + ${k};\n            if (${1===T}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${$}\n            } else if (${2===T}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${d}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${$}\n            } else if (${3===T}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${d}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${d}, ch),\n                initializationValue\n              );\n\n              ${$}\n            }\n          }\n        }\n        setOutput(${N});\n      }\n    `}}const z6={kernelName:Ji,backendName:"webgl",kernelFunc:function M6(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t;Mi(r,"avgPool");const{filterSize:o,strides:a,pad:i,dimRoundingMode:l}=s;C(xn(a,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${a} and dilations '1'`);const c=bs(r.shape,o,a,1,i,l);if(1===c.filterWidth&&1===c.filterHeight&&Ye(c.inShape,c.outShape))return ss({inputs:{x:r},backend:e});const h=new cc(c,"avg",!1);return e.runWebGLProgram(h,[r],"float32")}},V6={kernelName:el,backendName:"webgl",kernelFunc:function B6(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{filterSize:o,strides:a,pad:i,dimRoundingMode:l,dataFormat:u}=s,h=xr(r.shape,o,a,[1,1,1],i,l,u),d=new Mx(h,"avg",!1);return e.runWebGLProgram(d,[r],"float32")}};class W6{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;const l=t.effectiveFilterHeight,u=t.effectiveFilterWidth;this.userCode=`\n      const ivec2 pads = ivec2(${l-1-t.padInfo.top}, ${u-1-t.padInfo.left});\n      const float avgMultiplier = float(${1/(t.filterHeight*t.filterWidth)});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${l};\n            wR += ${t.dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${u};\n            wC+= ${t.dilationWidth}) {\n            float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class U6{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;const h=t.effectiveFilterDepth,d=t.effectiveFilterHeight,p=t.effectiveFilterWidth;this.userCode=`\n      const ivec3 pads = ivec3(${h-1-t.padInfo.front}, ${d-1-t.padInfo.top}, ${p-1-t.padInfo.left});\n      const float avgMultiplier = float(${1/(t.filterDepth*t.filterHeight*t.filterWidth)});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${h};\n            wD += ${t.dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${t.strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${d};\n              wR += ${t.dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${p};\n                wC += ${t.dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const H6={kernelName:kc,backendName:"webgl",kernelFunc:function G6(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o}=t,a=o,{filterSize:i,strides:l,pad:u,dimRoundingMode:c}=s,d=xr(a.shape,i,l,[1,1,1],u,c),p=new U6(d);return e.runWebGLProgram(p,[r],a.dtype)}},K6={kernelName:Ic,backendName:"webgl",kernelFunc:function j6(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o}=t,a=o;Mi([r,o],"avgPoolGrad");const{filterSize:i,strides:l,pad:u}=s,c=bs(a.shape,i,l,1,u),h=new W6(c);return e.runWebGLProgram(h,[r],a.dtype)}},X6={kernelName:tl,backendName:"webgl",kernelFunc:function q6(n){const{inputs:t,backend:e,attrs:s}=n,{a:r,b:o}=t,{transposeA:a,transposeB:i}=s;return Fp({a:r,b:o,transposeA:a,transposeB:i,backend:e})}};class Z6{constructor(t,e,s,r,o,a){this.outputShape=[],this.variableNames=["x","mean","variance"],Ve(t,e),Ve(t,s);let i="0.0";null!=r&&(Ve(t,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let l="1.0";null!=o&&(Ve(t,o),this.variableNames.push("scale"),l="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${l};\n        float inv = scale * inversesqrt(variance + float(${a}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class Y6{constructor(t,e,s,r,o,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],Ve(t,e),Ve(t,s);let i="vec4(0.0)";null!=r&&(Ve(t,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let l="vec4(1.0)";null!=o&&(Ve(t,o),this.variableNames.push("scale"),l="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${l};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${a}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const Q6={kernelName:fl,backendName:"webgl",kernelFunc:({inputs:n,backend:t,attrs:e})=>{const{x:s,mean:r,variance:o,offset:a,scale:i}=n;C(r.shape.length===o.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),C(null==a||r.shape.length===a.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),C(null==i||r.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let{varianceEpsilon:l}=e;null==l&&(l=.001);const u=[s,r,o];let c=null;null!=a&&(c=a.shape,u.push(a));let h=null;null!=i&&(h=i.shape,u.push(i));const d=B().getBool("WEBGL_PACK_NORMALIZATION")?new Y6(s.shape,r.shape,o.shape,c,h,l):new Z6(s.shape,r.shape,o.shape,c,h,l);return t.runWebGLProgram(d,u,u[0].dtype)}};class J6{constructor(t){this.variableNames=["source"],this.outputShape=t,this.rank=t.length;const e=yt(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const s=function e5(n){if(1===n)return"sourceLoc";if(n<=6)return zx.slice(0,n).map(t=>"sourceLoc."+t).join(",");throw Error(`Slicing for rank ${n} is not yet supported`)}(this.rank);let r;r=`\n        ${e} sourceLoc;\n        ${e} coords = getOutputCoords();\n        ${t.map((a,i)=>`sourceLoc.${zx[i]} = start[${i}] + coords.${zx[i]};`).join("\n")}\n      `,this.userCode=`\n      void main() {\n        ${r}\n        setOutput(getSource(${s}));\n      }\n    `}}const zx=["x","y","z","w","u","v"];class t5{constructor(t){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.rank=t.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const e=yt(this.rank),s=On("coords",this.rank),r=On("sourceLoc",this.rank),o=1===this.rank?"sourceLoc":`vec2(${r.slice(-2).join()})`,a=`getChannel(getSource(${r.join()}), ${o})`,i=`\n      result.x = ${a};\n      if (++${s[this.rank-1]} < ${t[this.rank-1]}) {\n        ++${r[this.rank-1]};\n        result.y = ${a};\n        --${r[this.rank-1]};\n      }\n    `,l=1===this.rank?"":`\n      --${s[this.rank-1]};\n      if (++${s[this.rank-2]} < ${t[this.rank-2]}) {\n        ++${r[this.rank-2]};\n        result.z = ${a};\n        if (++${s[this.rank-1]} < ${t[this.rank-1]}) {\n          ++${r[this.rank-1]};\n          result.w = ${a};\n        }\n      }\n    `,u=this.rank<=4?`sourceLoc = coords +\n            ${e}(${t.map((c,h)=>`start[${h}]`).join()});`:t.map((c,h)=>`${r[h]} = ${s[h]} + start[${h}];`).join("\n");this.userCode=`\n      void main() {\n        ${e} coords = getOutputCoords();\n        ${e} sourceLoc;\n        ${u}\n        vec4 result = vec4(0.);\n        ${i}\n        ${l}\n        setOutput(result);\n      }\n    `}}function Hi(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{begin:o,size:a}=s,[i,l]=Kh(r,o,a);if(em(r,i,l),0===q(l))return e.makeTensorInfo(l,r.dtype,[]);if(e.shouldExecuteOnCPU([r])||"string"===r.dtype){const h=e.texData.get(r.dataId),d=qK(h.values,i,l,r.shape,r.dtype);return e.makeTensorInfo(l,r.dtype,d)}const{isPacked:u}=e.texData.get(r.dataId),c=nm(r.shape,i,l);if(u||!c){const h=B().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new t5(l):new J6(l);return e.runWebGLProgram(h,[r],r.dtype,[i])}return e.uploadToGPU(r.dataId),function n5(n,t,e,s){const r=s.texData.get(n.dataId),o=s.makeTensorInfo(e,n.dtype),a=s.texData.get(o.dataId);Object.assign(a,r),a.refCount=1,a.shape=e,a.dtype=n.dtype;let i=sm(t,Ae(n.shape));r.slice&&(i+=r.slice.flatOffset),a.slice={flatOffset:i,origDataId:r.slice&&r.slice.origDataId||n.dataId};const l=s.dataRefCount.get(a.slice.origDataId)||1;return s.dataRefCount.set(a.slice.origDataId,l+1),o}(r,i,l,e)}const s5={kernelName:Ul,backendName:"webgl",kernelFunc:Hi},r5={kernelName:nl,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{blockShape:o,crops:a}=s;C(r.shape.length<=4,()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");const i=o.reduce((x,b)=>x*b),l=Du(r.shape,o,i),u=Fu(l.length,o.length),c=Ou(r.shape,o,i),h=Ng(a,o.length),d=Ig(c,a,o.length),p=[],f=fe({inputs:{x:r},backend:e,attrs:{shape:l}}),g=Ln({inputs:{x:f},backend:e,attrs:{perm:u}}),m=fe({inputs:{x:g},backend:e,attrs:{shape:c}}),y=Hi({inputs:{x:m},backend:e,attrs:{begin:h,size:d}});return p.push(f),p.push(g),p.push(m),p.forEach(x=>e.disposeIntermediateTensorInfo(x)),y}},a5={kernelName:Tc,backendName:"webgl",kernelFunc:function o5(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,weights:o}=t,{size:a}=s,i=e.readSync(r.dataId),l=e.readSync(o.dataId),u=OI(i,l,o.dtype,o.shape,a);return e.makeTensorInfo([a],o.dtype,u)}},c5={kernelName:sl,backendName:"webgl",kernelFunc:function u5(n){const{inputs:t,backend:e}=n,{a:s,b:r}=t,o=B().getBool("WEBGL_PACK_BINARY_OPERATIONS"),a=B().getNumber("WEBGL_VERSION");if(e.shouldExecuteOnCPU([s,r])||1===a){const l=e.texData.get(s.dataId).values,u=e.texData.get(r.dataId).values,[c,h]=xK(s.shape,r.shape,l,u,s.dtype),d=e.makeTensorInfo(h,s.dtype);return e.texData.get(d.dataId).values=c,d}let i;return i=o?new Ui("\n  int r = int(a.r) & int(b.r);\n  int g = int(a.g) & int(b.g);\n  int rb = int(a.b) & int(b.b);\n  int ra = int(a.a) & int(b.a);\n  return vec4(r, g, rb, ra);\n",s.shape,r.shape,!1):new ra("\n  return float(int(a.r) & int(b.r));\n",s.shape,r.shape),e.runWebGLProgram(i,[s,r],s.dtype)}},d5={kernelName:$c,backendName:"webgl",kernelFunc:function h5(n){const{inputs:t,backend:e}=n,{s0:s,s1:r}=t,o=e.readSync(s.dataId),a=e.readSync(r.dataId),i=Ve(Array.from(o),Array.from(a));return e.makeTensorInfo([i.length],"int32",Int32Array.from(i))}},lk=Cn({opSnippet:"return float(a != b);",cpuKernelImpl:zK,dtype:"bool"}),p5={kernelName:Al,backendName:"webgl",kernelFunc:lk};function hc(n){const{inputs:t,backend:e}=n,{input:s}=t;return ss({inputs:{x:e.texData.get(s.dataId).complexTensorInfos.real},backend:e})}const f5={kernelName:ch,backendName:"webgl",kernelFunc:hc},y5={kernelName:xa,backendName:"webgl",kernelFunc:function Bx(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{dtype:o}=s;if("complex64"===o){if("complex64"===r.dtype)return ss({inputs:{x:r},backend:e});const a=qt(r.shape),i=Bx({inputs:{x:r},backend:e,attrs:{dtype:"float32"}}),l=co({inputs:{real:i,imag:a},backend:e});return a.dispose(),e.disposeIntermediateTensorInfo(i),l}if("complex64"===r.dtype){const a=hc({inputs:{input:r},backend:e}),i=Bx({inputs:{x:a},backend:e,attrs:{dtype:o}});return e.disposeIntermediateTensorInfo(a),i}if(!Jp(r.dtype,o)){const a=ss({inputs:{x:r},backend:e});return{dataId:a.dataId,shape:a.shape,dtype:o}}if(e.shouldExecuteOnCPU([r])){const a=e.texData.get(r.dataId).values,[i,l,u]=bK(a,r.shape,r.dtype,o);return e.makeTensorInfo(i,l,u)}if("int32"===o)return function g5(n,t){const e=new ir(n.shape,"return float(int(x));"),s=t.runWebGLProgram(e,[n],"int32");return{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}(r,e);if("bool"===o){const a=e.makeTensorInfo([],"bool",on("bool",1)),l=lk({inputs:{a:r,b:a},backend:e});return e.disposeIntermediateTensorInfo(a),l}throw new Error(`Error in Cast: failed to cast ${r.dtype} to ${o}`)}},uk="return ceil(x);",x5=ot({opSnippet:uk,packedOpSnippet:uk,cpuKernelImpl:wK}),b5={kernelName:ba,backendName:"webgl",kernelFunc:x5};class w5{constructor(t){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=t,this.userCode="\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}}class v5{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=t,this.userCode="\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}}const C5={kernelName:wa,backendName:"webgl",kernelFunc:function S5(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{clipValueMin:o,clipValueMax:a}=s;let i;return i=B().getBool("WEBGL_PACK_CLIP")?new v5(r.shape):new w5(r.shape),e.runWebGLProgram(i,[r],r.dtype,[[o],[a]])}};class N5{constructor(t){this.variableNames=["real","imag"],this.outputShape=t,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function ck(n,t){return{dataId:t.dataId,dtype:t.dtype,shape:n.shape}}const k5={kernelName:rl,backendName:"webgl",kernelFunc:function I5(n){const{inputs:t,backend:e}=n,{x:s}=t,r=e.texData.get(s.dataId),o=new N5(s.shape),a=[ck(s,r.complexTensorInfos.real),ck(s,r.complexTensorInfos.imag)];return e.runWebGLProgram(o,a,a[0].dtype)}};class T5{constructor(t){this.outputShape=[],this.outputShape=Js(t,1),this.variableNames=t.map((a,i)=>`T${i}`);const e=new Array(t.length-1);e[0]=t[0][1];for(let a=1;a<e.length;a++)e[a]=e[a-1]+t[a][1];const s=[`if (yC < ${e[0]}) setOutput(getT0(yR, yC));`];for(let a=1;a<e.length;a++)s.push(`else if (yC < ${e[a]}) setOutput(getT${a}(yR, yC-${e[a-1]}));`);s.push(`else setOutput(getT${e.length}(yR, yC-${e[e.length-1]}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${s.join("\n        ")}\n      }\n    `}}class $5{constructor(t,e){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=Js(t,e);const s=this.outputShape,r=s.length,o=yt(r),a=On("coords",r),i=["x","y","z","w","u","v"].slice(0,r);this.variableNames=t.map((g,m)=>`T${m}`);const l=new Array(t.length-1);l[0]=t[0][e];for(let g=1;g<l.length;g++)l[g]=l[g-1]+t[g][e];const u=i[e],c=i.slice(-2),h=i.join();let d=`if (${u} < ${l[0]}) {\n        return getChannel(\n            getT0(${h}), vec2(${c.join()}));\n        }`;for(let g=1;g<l.length;g++){const m=l[g-1];d+=`\n        if (${u} < ${l[g]}  && ${u} >= ${l[g-1]}) {\n          return getChannel(\n            getT${g}(${Lp(i,u,m)}),\n            vec2(${Lp(c,u,m)}));\n        }`}const f=l[l.length-1];d+=`\n        return getChannel(\n          getT${l.length}(${Lp(i,u,f)}),\n          vec2(${Lp(c,u,f)}));`,this.userCode=`\n      float getValue(${i.map(g=>"int "+g)}) {\n        ${d}\n      }\n\n      void main() {\n        ${o} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${a}), 0., 0., 0.);\n\n        ${a[r-1]} = ${a[r-1]} + 1;\n        if (${a[r-1]} < ${s[r-1]}) {\n          result.g = getValue(${a});\n        }\n\n        ${a[r-2]} = ${a[r-2]} + 1;\n        if (${a[r-2]} < ${s[r-2]}) {\n          result.a = getValue(${a});\n        }\n\n        ${a[r-1]} = ${a[r-1]} - 1;\n        if (${a[r-2]} < ${s[r-2]} &&\n            ${a[r-1]} < ${s[r-1]}) {\n          result.b = getValue(${a});\n        }\n        setOutput(result);\n      }\n    `}}function Lp(n,t,e){const s=n.indexOf(t);return n.map((o,a)=>a===s?`${o} - ${e}`:o).join()}function Pp(n){const{inputs:t,backend:e}=n,{input:s}=t;return ss({inputs:{x:e.texData.get(s.dataId).complexTensorInfos.imag},backend:e})}const E5={kernelName:Zc,backendName:"webgl",kernelFunc:Pp};function dc(n,t,e){const s=n[0].dtype;if("complex64"===s){const p=n.map(x=>hc({inputs:{input:x},backend:e})),f=n.map(x=>Pp({inputs:{input:x},backend:e})),g=dc(p,t,e),m=dc(f,t,e),y=co({inputs:{real:g,imag:m},backend:e});return p.forEach(x=>e.disposeIntermediateTensorInfo(x)),f.forEach(x=>e.disposeIntermediateTensorInfo(x)),e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(m),y}let r=e.shouldExecuteOnCPU(n);if("string"===s&&(r=!0),r){const p=n.map(w=>{const N=[-1,q(w.shape.slice(t))];return fe({inputs:{x:w},backend:e,attrs:{shape:N}})}),f=p.map(w=>({vals:e.readSync(w.dataId),shape:w.shape})),g=Js(p.map(w=>w.shape),1),y=vK(f,g,s,1===p[0].shape[0]),x=Js(n.map(w=>w.shape),t),b=e.makeTensorInfo(x,s,y);return p.forEach(w=>e.disposeIntermediateTensorInfo(w)),b}const o=n.filter(p=>q(p.shape)>0),a=B().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&o[0].shape.length>1;if(1===o.length){const p=a?new ir(n[0].shape,lo):new uo(n[0].shape,lo);return e.runWebGLProgram(p,n,s)}const i=B().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");if(o.length>i){const p=[];for(let g=0;g<o.length;g+=i){const m=o.slice(g,g+i);p.push(dc(m,t,e))}const f=dc(p,t,e);for(const g of p)e.disposeIntermediateTensorInfo(g);return f}if(a){const p=new $5(o.map(f=>f.shape),t);return e.runWebGLProgram(p,o,s)}const{tensors2D:l,outShape:u}=function _5(n,t,e){const s=Js(n.map(o=>o.shape),t);return{tensors2D:n.map(o=>fe({inputs:{x:o},attrs:{shape:[-1,q(o.shape.slice(t))]},backend:e})),outShape:s}}(o,t,e),c=new T5(l.map(p=>p.shape)),h=e.runWebGLProgram(c,l,s);l.forEach(p=>e.disposeIntermediateTensorInfo(p));const d=fe({inputs:{x:h},attrs:{shape:u},backend:e});return e.disposeIntermediateTensorInfo(h),d}function hk(n){const{inputs:t,backend:e,attrs:s}=n,{axis:r}=s,o=je(r,t[0].shape)[0];vg(t.map(u=>u.shape),o);const i=Js(t.map(u=>u.shape),o);if(0===q(i))return e.makeTensorInfo(i,t[0].dtype,[]);const l=t.filter(u=>q(u.shape)>0);return 1===l.length?ss({inputs:{x:l[0]},backend:e}):dc(l,o,e)}const A5={kernelName:ol,backendName:"webgl",kernelFunc:hk};class dk{constructor(t,e=!1,s=null,r=!1,o=!1){this.variableNames=["x","W"],this.outputShape=t.outShape;const a=t.padInfo.top,i=t.padInfo.left,l=t.strideHeight,u=t.strideWidth,c=t.dilationHeight,h=t.dilationWidth,d=t.filterHeight,p=t.filterWidth,f=4*Math.floor(t.inChannels/4),g=t.inChannels%4,m="channelsLast"===t.dataFormat,y=m?1:2,x=m?2:3,b=m?3:1;let w="",S="";s&&(w=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${s}\n        }`:o?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${s}\n        }`:`\n          float activation(float x) {\n            ${s}\n          }\n        `,S="result = activation(result);");const N=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),o&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${w}\n\n      const ivec2 strides = ivec2(${l}, ${u});\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${b}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${y}], coords[${x}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${d}; wR++) {\n          int xR = xRCorner + wR * ${c};\n\n          if (xR < 0 || xR >= ${t.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${p}; wC++) {\n            int xC = xCCorner + wC * ${h};\n\n            if (xC < 0 || xC >= ${t.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${f}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${m}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===g}) {\n\n              if (${m}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${f}) *\n                    getW(wR, wC, ${f}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${f}, xR, xC) *\n                    getW(wR, wC, ${f}, d2);\n              }\n\n            } else if (${2===g}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${f}, d2),\n                getW(wR, wC, ${f} + 1, d2)\n              );\n\n              if (${m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${f}),\n                  getX(batch, xR, xC, ${f} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${f}, xR, xC),\n                  getX(batch, ${f} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===g}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${f}, d2),\n                getW(wR, wC, ${f} + 1, d2),\n                getW(wR, wC, ${f} + 2, d2)\n              );\n\n              if (${m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${f}),\n                  getX(batch, xR, xC, ${f} + 1),\n                  getX(batch, xR, xC, ${f} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${f}, xR, xC),\n                  getX(batch, ${f} + 1, xR, xC),\n                  getX(batch, ${f} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${N}\n        ${S}\n        setOutput(result);\n      }\n    `}}class R5{constructor(t){this.variableNames=["x","W"],this.outputShape=t.outShape;const e=t.padInfo.front,s=t.padInfo.top,r=t.padInfo.left,o=t.strideDepth,a=t.strideHeight,i=t.strideWidth,l=t.dilationDepth,u=t.dilationHeight,c=t.dilationWidth,h=t.filterDepth,d=t.filterHeight,p=t.filterWidth,f=4*Math.floor(t.inChannels/4),g=t.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${o}, ${a}, ${i});\n      const ivec3 pads = ivec3(${e}, ${s}, ${r});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${h}; wF++) {\n          int xF = xFCorner + wF * ${l};\n\n          if (xF < 0 || xF >= ${t.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${d}; wR++) {\n            int xR = xRCorner + wR * ${u};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p}; wC++) {\n              int xC = xCCorner + wC * ${c};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${f}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===g}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${f}) *\n                  getW(wF, wR, wC, ${f}, d2);\n              } else if (${2===g}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${f}),\n                  getX(batch, xF, xR, xC, ${f} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${f}, d2),\n                  getW(wF, wR, wC, ${f} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===g}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${f}),\n                  getX(batch, xF, xR, xC, ${f} + 1),\n                  getX(batch, xF, xR, xC, ${f} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${f}, d2),\n                  getW(wF, wR, wC, ${f} + 1, d2),\n                  getW(wF, wR, wC, ${f} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class pk{constructor(t,e=!1,s=null,r=!1,o=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=t.outShape,this.enableShapeUniforms=Tn(this.outputShape.length);const a=t.padInfo.left,i=t.strideWidth,l=t.dilationWidth,u=t.filterHeight,c=t.filterWidth,h=c;let d="\n       int xR; int xC; int xCOffset;\n       vec4 wTexel; vec4 previous; vec4 final;";for(let m=0;m<c;m++)d+=`\n           vec4 xTexelC${2*m};\n           int xTexelC${2*m}Ready;\n           vec4 xTexelC${2*m+1};\n           int xTexelC${2*m+1}Ready;\n           vec4 xC${m};`;d+=`\n     for (int r = 0; r < ${u}; r++) {\n      for (int d1 = 0; d1 < ${t.inChannels}; d1 += 2) {\n       `;for(let m=0;m<c;m++)d+=`\n           xTexelC${2*m} = vec4(0.0);\n           xTexelC${2*m}Ready = 0;\n           xTexelC${2*m+1} = vec4(0.0);\n           xTexelC${2*m+1}Ready = 0;\n           xC${m} = vec4(0.0);`;d+="\n         xR = xRCorner + r * dilations[0];\n         if (xR >=0 && xR < inDims[0]) {\n       ";for(let m=0;m<(h+1)/2;m++){const y=2*m;if(d+=`\n           xC = xCCorner + ${y*l};\n           `,1===i){if(y<c&&(a%2==1?(d+=`\n                 xCOffset = xC + 1;\n                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y}Ready == 0) {\n                   xTexelC${y} = getX(batch, xR, xCOffset, d1);\n\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${y}.zw = vec2(0.0);\n                   }\n                   xTexelC${y}Ready = 1;\n                 }\n               `,d+=1===l&&y>0?`\n                 xC${y} = vec4(xTexelC${y-2}.zw, xTexelC${y}.xy);\n                 `:`\n                   xCOffset = xC + 1 - 2;\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       previous.zw = vec2(0.0);\n                     }\n\n                     xC${y} = vec4(previous.zw, xTexelC${y}.xy);\n                   } else {\n                     xC${y} = vec4(0.0, 0.0, xTexelC${y}.xy);\n                   }\n                   `):d+=`\n                 if (xC >= 0 && xC < inDims[1] && xTexelC${y}Ready == 0) {\n                   xTexelC${y} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${y}.zw = vec2(0.0);\n                   }\n                   xTexelC${y}Ready = 1;\n                 }\n\n                 xC${y} = xTexelC${y};\n                 `,y+1<c)){const x=a%2==0?xc(l):l;l%2==0&&a%2==1||l%2!=0&&a%2!=1?(d+=`\n                   xCOffset = xC + imod(pads[1], 2) + ${x};\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y+1}Ready == 0) {\n                     xTexelC${y+1} = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       xTexelC${y+1}.zw = vec2(0.0);\n                     }\n                     xTexelC${y+1}Ready = 1;\n                   }\n                   `,d+=l>1?`\n                     xCOffset -= 2;\n                     if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                      previous = getX(batch, xR, xCOffset, d1);\n                      xC${y+1} = vec4(previous.zw, xTexelC${y+1}.xy);\n                     } else {\n                      xC${y+1} = vec4(0.0, 0.0, xTexelC${y+1}.xy);\n                     }\n                     `:`\n                     xC${y+1} = vec4(xTexelC${y}.zw, xTexelC${y+1}.xy);\n                     `):d+=1===x?`\n                     xC${y+1} = xTexelC${y};\n                     `:`\n                     xCOffset = xC + ${x};\n\n                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y+1}Ready == 0) {\n                       xTexelC${y+1} = getX(batch, xR, xCOffset, d1);\n                       if (xCOffset + 1 >= inDims[1]) {\n                         xTexelC${y+1}.zw = vec2(0.0);\n                       }\n                       xTexelC${y+1}Ready = 1;\n                     }\n\n                     xC${y+1} = xTexelC${y+1};\n                     `}}else y<c&&(a%2==1?(d+=`\n                 xCOffset = xC + 1 - strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y}Ready == 0) {\n                   xTexelC${y} = getX(batch, xR, xCOffset, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${y}.zw = vec2(0.0);\n                   }\n                   xTexelC${y}Ready = 1;\n                 }\n\n                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${y+1}Ready == 0) {\n                   xTexelC${y+1} = getX(batch, xR, xC + 1, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xC + 2 >= inDims[1]) {\n                     xTexelC${y+1}.zw = vec2(0.0);\n                   }\n                   xTexelC${y+1}Ready = 1;\n                 }\n\n                 xC${y} = vec4(xTexelC${y}.zw, xTexelC${y+1}.zw);\n               `,y+1<c&&(d+=`\n                   final = vec4(0.0);\n                   xCOffset = xC + 1 + strides[1];\n                   if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                     final = getX(batch, xR, xCOffset, d1);\n                   }\n                   xC${y+1} = vec4(xTexelC${y+1}.xy, final.xy);\n                 `)):(d+=`\n                 if(xC >= 0 && xC < inDims[1] && xTexelC${y}Ready == 0) {\n                   xTexelC${y} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${y}.zw = vec2(0.0);\n                   }\n                   xTexelC${y}Ready = 1;\n                 }\n\n                 xCOffset = xC + strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y+1}Ready == 0) {\n                   xTexelC${y+1} = getX(batch, xR, xCOffset, d1);\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${y+1}.zw = vec2(0.);\n                   }\n                   xTexelC${y+1}Ready = 1;\n                 }\n\n                 xC${y} = vec4(\n                   xTexelC${y}.xy, xTexelC${y+1}.xy);\n               `,y+1<c&&(d+=`\n                   xC${y+1} = vec4(xTexelC${y}.zw, xTexelC${y+1}.zw);\n                 `)));y<c&&(d+=`\n             wTexel = getW(r, ${y}, d1, d2);\n             dotProd += xC${y}.xxzz * vec4(wTexel.xy, wTexel.xy);\n             if(d1 + 1 < ${t.inChannels}) {\n               dotProd += xC${y}.yyww * vec4(wTexel.zw, wTexel.zw);\n             }\n           `,y+1<c&&(d+=`\n               wTexel = getW(r, ${y+1}, d1, d2);\n               dotProd += xC${y+1}.xxzz * vec4(wTexel.xy, wTexel.xy);\n               if(d1 + 1 < ${t.inChannels}) {\n                 dotProd += xC${y+1}.yyww * vec4(wTexel.zw, wTexel.zw);\n               }\n             `))}d+="\n     }\n   ",d+="\n     }\n   ",d+="\n     }\n   ";let p="",f="";s&&(p=r?`vec4 activation(vec4 a) {\n           vec4 b = getPreluActivationWeightsAtOutCoords();\n           ${s}\n         }`:o?`vec4 activation(vec4 a) {\n           vec4 b = getLeakyreluAlphaAtOutCoords();\n           ${s}\n         }`:`vec4 activation(vec4 x) {\n           ${s}\n         }`,f="result = activation(result);");const g=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),o&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n       ${p}\n\n       void main() {\n         ivec4 coords = getOutputCoords();\n         int batch = coords.x;\n         ivec2 xRCCorner = coords.yz * strides - pads;\n         int d2 = coords.w;\n         int xRCorner = xRCCorner.x;\n         int xCCorner = xRCCorner.y;\n\n         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n         vec4 dotProd = vec4(0.000000000000001);\n\n         ${d}\n\n         vec4 result = dotProd - vec4(0.000000000000001);\n         ${g}\n         ${f}\n         setOutput(result);\n       }\n     `}}class D5{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec4"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=t,this.enableShapeUniforms=Tn(this.outputShape.length);const{dataFormat:s}=e,r=Fn(),o="channelsLast"===s,a=o?1:2,i=o?2:3,l=this.enableShapeUniforms?"if(blockIndex < outShape[2] && pos < outShape[1]) {":`if(blockIndex < ${t[2]} && pos < ${t[1]}) {`;let u="";for(let c=0;c<=1;c++)for(let h=0;h<=1;h++)u+=`\n          blockIndex = rc.z + ${h};\n          pos = rc.y + ${c};\n\n          ${l}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${a}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${i}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${o}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*c+h}] = getChannel(\n                    getA(rc.x, d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*c+h}] = getChannel(\n                    getA(rc.x, ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${u}\n\n        ${r.output} = result;\n      }\n    `}}function Mp(n,t){const e=n.length;return e>=3?t?[...n.slice(0,-3),n[e-3]*n[e-2],n[e-1]]:[...n.slice(0,-3),n[e-3],n[e-2]*n[e-1]]:!t&&1===e&&n[0]>1?[n[0],1]:null}function fk({x:n,filter:t,convInfo:e,backend:s,bias:r=null,preluActivationWeights:o=null,leakyreluAlpha:a=0,activation:i=null}){const l=n.shape,u=s.texData.get(n.dataId),c=e.inChannels,h=l[0]*l[1]*l[2],d=e.outChannels,p="channelsLast"===e.dataFormat;let m;const y=[];if(null!=o){const w=Mp(o.shape,p);null!=w&&(o=fe({inputs:{x:o},backend:s,attrs:{shape:w}}),y.push(o))}if(null!=r){const w=Mp(r.shape,p);null!=w&&(r=fe({inputs:{x:r},backend:s,attrs:{shape:w}}),y.push(r))}if((1!==h&&1!==d||!(c>nk))&&u.isPacked&&p&&null!=u.texture&&l[2]%2!=0&&Ye(u.shape.slice(-3),l.slice(-3))){const S={dataId:n.dataId,shape:[1,l[0]*l[1]*(l[2]+1),e.inChannels],dtype:n.dtype},N=u.shape;u.shape=u.shape.slice(),u.shape[u.shape.length-2]++,C(ic(u.shape,S.shape),()=>`packed reshape ${u.shape} to ${S.shape} isn't free`);const k=fe({inputs:{x:t},backend:s,attrs:{shape:[1,e.inChannels,e.outChannels]}});y.push(k);const T=Fp({a:S,b:k,backend:s,transposeA:!1,transposeB:!1,bias:r,activation:i,preluActivationWeights:o,leakyreluAlpha:a}),$=s.texData.get(T.dataId);C($.isPacked,()=>"batchMatMul result is expected to be packed"),u.shape=N,$.shape=e.outShape,m=ss({inputs:{x:T},backend:s}),m.shape=e.outShape,y.push(T)}else{const w=e.outHeight*e.outWidth,S=fe({inputs:{x:n},backend:s,attrs:{shape:p?[e.batchSize,w,e.inChannels]:[e.batchSize,e.inChannels,w]}}),N=fe({inputs:{x:t},backend:s,attrs:{shape:[1,e.inChannels,e.outChannels]}}),k=Fp({a:p?S:N,b:p?N:S,transposeA:!p,transposeB:!1,backend:s,bias:r,activation:i,preluActivationWeights:o,leakyreluAlpha:a});m=fe({inputs:{x:k},backend:s,attrs:{shape:e.outShape}}),y.push(S),y.push(N),y.push(k)}for(const w of y)s.disposeIntermediateTensorInfo(w);return m}function mk({x:n,filter:t,convInfo:e,backend:s,bias:r=null,preluActivationWeights:o=null,leakyreluAlpha:a=0,activation:i=null}){const{filterWidth:l,filterHeight:u,inChannels:c,outWidth:h,outHeight:d,dataFormat:p}=e,f="channelsLast"===p,g=l*u*c,m=d*h,y=[e.batchSize,g,m],w=[];if(null!=o){const X=Mp(o.shape,f);null!=X&&(o=fe({inputs:{x:o},backend:s,attrs:{shape:X}}),w.push(o))}if(null!=r){const X=Mp(r.shape,f);null!=X&&(r=fe({inputs:{x:r},backend:s,attrs:{shape:X}}),w.push(r))}const S=fe({inputs:{x:t},backend:s,attrs:{shape:[1,g,q(t.shape)/g]}});w.push(S);const N=new D5(y,e),T=s.runWebGLProgram(N,[n],"float32",[n.shape,[e.padInfo.top,e.padInfo.left],[e.strideHeight,e.strideWidth],[e.dilationHeight,e.dilationWidth],[e.inChannels],[e.filterWidth*e.inChannels],[e.outWidth]]),$=fe({inputs:{x:T},backend:s,attrs:{shape:y}});w.push(T),w.push($);const R=null!=r,M=null!=o,V="leakyrelu"===i,W=i?uc(i,!0):null,H=new YI(f?$.shape:S.shape,f?S.shape:$.shape,f?[e.batchSize,m,e.outChannels]:[e.batchSize,e.outChannels,m],!0,!1,R,W,M,V),K=f?[$,S]:[S,$];if(r&&K.push(r),M&&K.push(o),V){const X=s.makeTensorInfo([],"float32",dr(a,"float32"));K.push(X),w.push(X)}const U=s.runWebGLProgram(H,K,"float32"),Y=fe({inputs:{x:U},backend:s,attrs:{shape:e.outShape}});w.push(U);for(const X of w)s.disposeIntermediateTensorInfo(X);return Y}const O5={kernelName:al,backendName:"webgl",kernelFunc:function F5(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o}=t,{strides:a,pad:i,dataFormat:l,dilations:u,dimRoundingMode:c}=s,h=br(l),d=ln(r.shape,o.shape,a,u,i,c,!1,h);let p;if(1!==d.filterHeight||1!==d.filterWidth||1!==d.dilationHeight||1!==d.dilationWidth||1!==d.strideHeight||1!==d.strideWidth||"SAME"!==d.padInfo.type&&"VALID"!==d.padInfo.type)if(d.strideWidth<=2&&"channelsLast"===h&&B().getBool("WEBGL_EXP_CONV")){const g=new pk(d);p=e.runWebGLProgram(g,[r,o],"float32",[[d.padInfo.top,d.padInfo.left],[d.strideHeight,d.strideWidth],[d.dilationHeight,d.dilationWidth],[d.inHeight,d.inWidth]])}else if(B().getBool("WEBGL_CONV_IM2COL"))p=mk({x:r,filter:o,convInfo:d,backend:e});else{const g=new dk(d);p=e.runWebGLProgram(g,[r,o],"float32")}else p=fk({x:r,filter:o,convInfo:d,backend:e});const f=fe({inputs:{x:p},backend:e,attrs:{shape:d.outShape}});return e.disposeIntermediateTensorInfo(p),f}};class L5{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\n            int xR = wR + yR * ${t.strideHeight} - ${t.padInfo.top};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\n              int xC = wC + yC * ${t.strideWidth} - ${t.padInfo.left};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              ${"channelsLast"===t.dataFormat?"float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);":"float dyValue = getDy(b, d2, yR, yC);\n              float xValue = getX(b, d1, xR, xC);\n              dotProd += (xValue * dyValue);"}\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class P5{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterHeight,s=t.filterWidth,a="channelsLast"===t.dataFormat;this.userCode=`\n      const ivec2 pads = ivec2(${e-1-t.padInfo.top}, ${s-1-t.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${a?3:1}];\n\n        ivec2 dyCorner = ivec2(coords[${a?1:2}], coords[${a?2:3}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${s}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${s} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\n\n              if (${a}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class M5{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape,this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yF = 0; yF < ${t.outDepth}; yF++) {\n            int xF = wF + yF * ${t.strideDepth} - ${t.padInfo.front};\n\n            if (xF < 0 || xF >= ${t.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${t.outHeight}; yR++) {\n              int xR = wR + yR * ${t.strideHeight} - ${t.padInfo.top};\n\n              if (xR < 0 || xR >= ${t.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${t.outWidth}; yC++) {\n                int xC = wC + yC * ${t.strideWidth} - ${t.padInfo.left};\n\n                if (xC < 0 || xC >= ${t.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class z5{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterDepth,s=t.filterHeight,r=t.filterWidth;this.userCode=`\n      const ivec3 pads = ivec3(${e-1-t.padInfo.front}, ${s-1-t.padInfo.top}, ${r-1-t.padInfo.left});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${e}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${t.strideDepth}.0;\n\n          if (dyF < 0.0 || dyF >= ${t.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${e} - 1 - wF;\n\n          for (int wR = 0; wR < ${s}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${s} - 1 - wR;\n\n            for (int wC = 0; wC < ${r}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${r} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const V5={kernelName:_c,backendName:"webgl",kernelFunc:function B5(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,dy:o}=t,{strides:a,pad:i,dataFormat:l,dimRoundingMode:u,filterShape:c}=s,h=br(l),d=ln(r.shape,c,a,1,i,u,!1,h),p=new L5(d);return e.runWebGLProgram(p,[r,o],"float32")}};class W5{constructor(t){this.variableNames=["dy","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"strides",type:"vec2"}],this.outputShape=t.inShape,this.enableShapeUniforms=Tn(this.outputShape.length);const e=t.filterHeight,s=t.filterWidth;this.userCode=`\n      const ivec2 pads = ivec2(${e-1-t.padInfo.top}, ${s-1-t.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n\n        ivec2 dyCorner = ivec2(coords[1], coords[2]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        vec4 result = vec4(0.);\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / strides[0];\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${s}; wC++) {\n            int wCPerm = ${s} - 1 - wC;\n\n            float dyC = float(dyCCorner + wC) / strides[1];\n            bool idyCVal = (dyC >= 0.0) && (dyC < ${t.outWidth}.0)\n              && (fract(dyC) == 0.0);\n            int idyC = int(dyC);\n\n            float dyC2 = float(dyCCorner + wC + 1) / strides[1];\n            bool idyCVal2 = (dyC2 >= 0.0) && (dyC2 < ${t.outWidth}.0)\n              && (fract(dyC2) == 0.0);\n            int idyC2 = int(dyC2);\n\n            if (idyCVal && idyCVal2) {\n              for (int d2 = 0; d2 < ${t.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\n                vec4 dySample2 = (idyC / 2 == idyC2 / 2) ?\n                  dySample : getDy(batch, idyR, idyC2, d2);\n\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.xy += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n\n                dyValue = mod(float(idyC2), 2.) == 0. ?\n                  dySample2.xy : dySample2.zw;\n                result.zw += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            } else if (idyCVal) {\n              for (int d2 = 0; d2 < ${t.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.xy += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            } else if (idyCVal2) {\n              for (int d2 = 0; d2 < ${t.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC2, d2);\n                vec2 dyValue = mod(float(idyC2), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.zw += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            }\n          }\n        }\n        setOutput(result);\n      }\n    `}}const G5={kernelName:il,backendName:"webgl",kernelFunc:function U5(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,filter:o}=t,{inputShape:a,strides:i,pad:l,dataFormat:u,dimRoundingMode:c}=s,h=br(u),d=ln(a,o.shape,i,1,l,c,!1,h);if(B().getBool("WEBGL_PACK_CONV2DTRANSPOSE")&&"channelsLast"===h){const p=[[d.strideHeight,d.strideWidth]],f=new W5(d);return e.runWebGLProgram(f,[r,o],"float32",p)}{const p=new P5(d);return e.runWebGLProgram(p,[r,o],"float32")}}},j5={kernelName:ll,backendName:"webgl",kernelFunc:function H5(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o}=t,{strides:a,pad:i,dilations:l}=s,u=Vr(r.shape,o.shape,a,l,i),c=new R5(u);return e.runWebGLProgram(c,[r,o],"float32")}},q5={kernelName:Ac,backendName:"webgl",kernelFunc:function K5(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,dy:o}=t,{strides:a,pad:i,filterShape:l}=s,u=Vr(r.shape,l,a,1,i),c=new M5(u);return e.runWebGLProgram(c,[r,o],"float32")}},Z5={kernelName:Rc,backendName:"webgl",kernelFunc:function X5(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,filter:o}=t,{pad:a,strides:i,inputShape:l}=s,u=Vr(l,o.shape,i,1,a),c=new z5(u);return e.runWebGLProgram(c,[r,o],"float32")}},J5=ot({opSnippet:Gi+"\n  return cos(x);\n",packedOpSnippet:`\n  vec4 result = cos(x);\n  bvec4 isNaN = isnan(x);\n  ${oa}\n  return result;\n`}),eX={kernelName:va,backendName:"webgl",kernelFunc:J5},tX=ot({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),nX={kernelName:Sa,backendName:"webgl",kernelFunc:tX};class sX{constructor(t,e,s,r,o){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[a,i,l,u]=t,[c]=e,[h,d]=s;this.outputShape=[c,h,d,u];const p="bilinear"===r?1:0,[f,g]=[i-1+".0",l-1+".0"],[m,y,x]=h>1?[""+(i-1)/(h-1),"(y2-y1) * height_ratio",`y1*${f} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${f}`],[b,w,S]=d>1?[""+(l-1)/(d-1),"(x2-x1) * width_ratio",`x1*${g} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${g}`];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${a}) {\n          return;\n        }\n\n        float height_scale = ${y};\n        float width_scale = ${w};\n\n        float in_y = ${x};\n        if( in_y < 0.0 || in_y > ${f} ) {\n          setOutput(float(${o}));\n          return;\n        }\n        float in_x = ${S};\n        if( in_x < 0.0 || in_x > ${g} ) {\n          setOutput(float(${o}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${p} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const rX={kernelName:Fc,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:s}=n,{image:r,boxes:o,boxInd:a}=t,{cropSize:i,method:l,extrapolationValue:u}=s,c=new sX(r.shape,o.shape,i,l,u);return e.runWebGLProgram(c,[r,o,a],"float32")}};var zp=function(n){return n.Prod="*",n.Sum="+",n}(zp||{});class gk{constructor(t,e,s,r){this.op=t,this.outputShape=e,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];const o=this.outputShape.length,i=s?this.op===zp.Prod?"1.0":"0.0":`getX(${yk(o,"coords",this.op)})`,l=this.outputShape[this.outputShape.length-1];let u="",c="";s?(u=r?"end != "+(l-1):"end != 0",c=r?"end + 1":"end - 1"):(u=r?`end + pow2 < ${l}`:"end >= pow2",c=r?"end + pow2":"end - pow2"),this.userCode=`\n      void main() {\n        ${yt(o)} coords = getOutputCoords();\n        int end = ${xk(o,"coords",this.op)};\n        float val = ${i};\n        int pow2 = int(pow(2.0, index));\n        if (${u}) {\n          int idx = ${c};\n          ${xk(o,"coords",this.op)} = idx;\n          val ${this.op}= getX(${yk(o,"coords",this.op)});\n        }\n        setOutput(val);\n      }\n    `}}function yk(n,t,e){if(1===n)return`${t}`;if(2===n)return`${t}.x, ${t}.y`;if(3===n)return`${t}.x, ${t}.y, ${t}.z`;if(4===n)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw new Error(`Cumulative ${e} for rank ${n} is not yet supported`)}function xk(n,t,e){if(1===n)return`${t}`;if(2===n)return`${t}.y`;if(3===n)return`${t}.z`;if(4===n)return`${t}.w`;throw new Error(`Cumulative ${e} for rank ${n} is not yet supported`)}function bk(n,t,e,s,r,o){const a=t.shape.length,i=_t([s],a);let l=t;null!=i&&(l=Ln({inputs:{x:t},backend:e,attrs:{perm:i}}));const u=Bt(1,a)[0];if(u!==a-1)throw new Error(`WebGL cumprod shader expects an inner-most axis=${t.shape.length-1} but got axis=${s}`);const c=l.shape[u];let h=ss({inputs:{x:l},backend:e});for(let d=0;d<=Math.ceil(Math.log2(c))-1;d++){const p=new gk(n,l.shape,!1,o),g=h;h=e.runWebGLProgram(p,[h],h.dtype,[[d]]),e.disposeIntermediateTensorInfo(g)}if(r){const d=new gk(n,l.shape,r,o),p=h;h=e.runWebGLProgram(d,[h],h.dtype),e.disposeIntermediateTensorInfo(p)}if(null!=i){const p=Ln({inputs:{x:h},backend:e,attrs:{perm:Ur(i)}});return e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(l),p}return h}const aX={kernelName:Dc,backendName:"webgl",kernelFunc:function oX(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,exclusive:a,reverse:i}=s;return bk(zp.Prod,r,e,o,a,i)}},lX={kernelName:ul,backendName:"webgl",kernelFunc:function iX(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,exclusive:a,reverse:i}=s;return bk(zp.Sum,r,e,o,a,i)}},cX={kernelName:Oc,backendName:"webgl",kernelFunc:function uX(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,weights:o}=t,{size:a,binaryOutput:i}=s;if(1===r.shape.length){const l=e.readSync(r.dataId),u=e.readSync(o.dataId),c=OI(l,u,o.dtype,o.shape,a);return e.makeTensorInfo([a],o.dtype,c)}if(2===r.shape.length){const l=e.bufferSync(r),u=e.bufferSync(o),c=yK(l,u,a,i);return e.makeTensorInfo(c.shape,o.dtype,c.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}};class hX{constructor(t,e,s){this.variableNames=["x"],this.outputShape=[],this.outputShape=t,this.blockSize=e,this.dataFormat=s,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${e};\n      int offset_h = imod(h, ${e});\n      int in_w = w / ${e};\n      int offset_w = imod(w, ${e});\n      int offset_d = (offset_h * ${e} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const pX={kernelName:Lc,backendName:"webgl",kernelFunc:function dX(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{blockSize:o,dataFormat:a}=s,i=r.shape[0],h=("NHWC"===a?r.shape[1]:r.shape[2])*o,d=("NHWC"===a?r.shape[2]:r.shape[3])*o,p=("NHWC"===a?r.shape[3]:r.shape[1])/(o*o),g=new hX("NHWC"===a?[i,h,d,p]:[i,p,h,d],o,a);return e.runWebGLProgram(g,[r],r.dtype)}};class wk{constructor(t,e=!1,s=null,r=!1,o=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=t.outShape,this.enableShapeUniforms=Tn(this.outputShape.length);const a=t.filterHeight,i=t.filterWidth,l=t.outChannels/t.inChannels;let u="",c="";s&&(u=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${s}\n        }`:o?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${s}\n        }`:`\n          float activation(float x) {\n            ${s}\n          }\n        `,c="result = activation(result);");const h=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),o&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${u}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${l};\n        int q = d2 - d1 * ${l};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${a}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${i}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${h}\n        ${c}\n        setOutput(result);\n      }\n    `}}class vk{constructor(t,e=!1,s=null,r=!1,o=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=t.outShape,this.enableShapeUniforms=Tn(this.outputShape.length);const a=t.outChannels/t.inChannels,i=t.padInfo.left,l=t.strideWidth,u=t.dilationWidth,c=t.filterHeight,h=t.filterWidth,d=h;let p="\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;";for(let y=0;y<h;y++)p+=`\n          vec4 xTexelC${2*y};\n          int xTexelC${2*y}Ready;\n          vec4 xTexelC${2*y+1};\n          int xTexelC${2*y+1}Ready;\n          vec4 xC${y};`;p+=`\n    for (int r = 0; r < ${c}; r++) {\n      `;for(let y=0;y<h;y++)p+=`\n          xTexelC${2*y} = vec4(0.0);\n          xTexelC${2*y}Ready = 0;\n          xTexelC${2*y+1} = vec4(0.0);\n          xTexelC${2*y+1}Ready = 0;\n          xC${y} = vec4(0.0);`;p+="\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      ";for(let y=0;y<(d+1)/2;y++){const x=2*y;if(p+=`\n          xC = xCCorner + ${x*u};\n          `,1===l){if(x<h&&(i%2==1?(p+=`\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x}Ready == 0) {\n                  xTexelC${x} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${x}.zw = vec2(0.0);\n                  }\n                  xTexelC${x}Ready = 1;\n                }\n              `,p+=1===u&&x>0?`\n                xC${x} = vec4(xTexelC${x-2}.zw, xTexelC${x}.xy);\n                `:`\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${x} = vec4(previous.zw, xTexelC${x}.xy);\n                  } else {\n                    xC${x} = vec4(0.0, 0.0, xTexelC${x}.xy);\n                  }\n                  `):p+=`\n                if (xC >= 0 && xC < inDims[1] && xTexelC${x}Ready == 0) {\n                  xTexelC${x} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${x}.zw = vec2(0.0);\n                  }\n                  xTexelC${x}Ready = 1;\n                }\n\n                xC${x} = xTexelC${x};\n                `,x+1<h)){const b=i%2==0?xc(u):u;u%2==0&&i%2==1||u%2!=0&&i%2!=1?(p+=`\n                  xCOffset = xC + imod(pads[1], 2) + ${b};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x+1}Ready == 0) {\n                    xTexelC${x+1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${x+1}.zw = vec2(0.0);\n                    }\n                    xTexelC${x+1}Ready = 1;\n                  }\n                  `,p+=u>1?`\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n                     xC${x+1} = vec4(previous.zw, xTexelC${x+1}.xy);\n                    } else {\n                     xC${x+1} = vec4(0.0, 0.0, xTexelC${x+1}.xy);\n                    }\n                    `:`\n                    xC${x+1} = vec4(xTexelC${x}.zw, xTexelC${x+1}.xy);\n                    `):p+=1===b?`\n                    xC${x+1} = xTexelC${x};\n                    `:`\n                    xCOffset = xC + ${b};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x+1}Ready == 0) {\n                      xTexelC${x+1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${x+1}.zw = vec2(0.0);\n                      }\n                      xTexelC${x+1}Ready = 1;\n                    }\n\n                    xC${x+1} = xTexelC${x+1};\n                    `}}else x<h&&(i%2==1?(p+=`\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x}Ready == 0) {\n                  xTexelC${x} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${x}.zw = vec2(0.0);\n                  }\n                  xTexelC${x}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${x+1}Ready == 0) {\n                  xTexelC${x+1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${x+1}.zw = vec2(0.0);\n                  }\n                  xTexelC${x+1}Ready = 1;\n                }\n\n                xC${x} = vec4(xTexelC${x}.zw, xTexelC${x+1}.zw);\n              `,x+1<h&&(p+=`\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${x+1} = vec4(xTexelC${x+1}.xy, final.xy);\n                `)):(p+=`\n                if(xC >= 0 && xC < inDims[1] && xTexelC${x}Ready == 0) {\n                  xTexelC${x} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${x}.zw = vec2(0.0);\n                  }\n                  xTexelC${x}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x+1}Ready == 0) {\n                  xTexelC${x+1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${x+1}.zw = vec2(0.);\n                  }\n                  xTexelC${x+1}Ready = 1;\n                }\n\n                xC${x} = vec4(\n                  xTexelC${x}.xy, xTexelC${x+1}.xy);\n              `,x+1<h&&(p+=`\n                  xC${x+1} = vec4(xTexelC${x}.zw, xTexelC${x+1}.zw);\n                `)));x<h&&(p+=`\n            wTexel = getW(r, ${x}, d1, q);\n            dotProd += xC${x} * vec4(wTexel.xz, wTexel.xz);\n          `,x+1<h&&(p+=`\n              wTexel = getW(r, ${x+1}, d1, q);\n              dotProd += xC${x+1} * vec4(wTexel.xz, wTexel.xz);\n            `))}p+="\n    }\n  ",p+="\n      }\n    ";let f="",g="";s&&(f=r?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${s}\n        }`:o?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${s}\n        }`:`vec4 activation(vec4 x) {\n          ${s}\n        }`,g="result = activation(result);");const m=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),o&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${f}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${a};\n        int q = d2 - d1 * ${a};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${p}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${m}\n        ${g}\n        setOutput(result);\n      }\n    `}}const mX={kernelName:cl,backendName:"webgl",kernelFunc:function fX(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o}=t,{strides:a,pad:i,dilations:l,dimRoundingMode:u}=s;let c=l;null==c&&(c=[1,1]),C(xn(a,c),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${a} and dilations '${c}'`);const h=ln(r.shape,o.shape,a,c,i,u,!0);let d;return d=B().getBool("WEBGL_PACK_DEPTHWISECONV")&&h.strideWidth<=2&&h.outChannels/h.inChannels==1?new vk(h):new wk(h),e.runWebGLProgram(d,[r,o],"float32",[[h.padInfo.top,h.padInfo.left],[h.strideHeight,h.strideWidth],[h.dilationHeight,h.dilationWidth],[h.inHeight,h.inWidth]])}};class gX{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${t.outChannels/t.inChannels} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\n            int xR = wR + yR * ${t.strideHeight} - ${t.padInfo.top};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\n              int xC = wC + yC * ${t.strideWidth} - ${t.padInfo.left};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class yX{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterHeight,s=t.filterWidth,l=t.outChannels/t.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${e-1-t.padInfo.top}, ${s-1-t.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${s}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${s} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${l}; dm++) {\n              int d2 = d1 * ${l} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const bX={kernelName:Pc,backendName:"webgl",kernelFunc:function xX(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,dy:o}=t,{strides:a,dilations:i,pad:l,dimRoundingMode:u,filterShape:c}=s,h=ln(r.shape,c,a,i,l,u,!0),d=new gX(h);return e.runWebGLProgram(d,[r,o],"float32")}},vX={kernelName:Mc,backendName:"webgl",kernelFunc:function wX(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,filter:o}=t,{strides:a,dilations:i,pad:l,dimRoundingMode:u,inputShape:c}=s,h=ln(c,o.shape,a,i,l,u,!0),d=new yX(h);return e.runWebGLProgram(d,[r,o],"float32")}};class SX{constructor(t){this.variableNames=["X"],this.outputShape=[t,t],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const NX={kernelName:zc,backendName:"webgl",kernelFunc:function CX(n){const{inputs:t,backend:e}=n,{x:s}=t,r=[...s.shape,...s.shape],o=q(s.shape),a=fe({inputs:{x:s},backend:e,attrs:{shape:[o]}}),i=new SX(o),l=e.runWebGLProgram(i,[a],a.dtype),u=fe({inputs:{x:l},backend:e,attrs:{shape:r}});return e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(l),u}};class IX{constructor(t){this.variableNames=["x","W"],this.outputShape=t.outShape;const{inHeight:e,inWidth:s,padInfo:r,strideHeight:o,strideWidth:a,filterHeight:i,filterWidth:l,dilationHeight:u,dilationWidth:c}=t,{top:h,left:d}=r;this.userCode=`\n      const ivec2 strides = ivec2(${o}, ${a});\n      const ivec2 pads = ivec2(${h}, ${d});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${i}; h++) {\n          int hIn = hBeg + h * ${u};\n\n          if (hIn >= 0 && hIn < ${e}) {\n            for (int w = 0; w < ${l}; w++) {\n              int wIn = wBeg + w * ${c};\n\n              if (wIn >= 0 && wIn < ${s}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const TX={kernelName:hl,backendName:"webgl",kernelFunc:function kX(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o}=t,{strides:a,pad:i,dilations:l}=s,u=du(r.shape,o.shape,a,i,"NHWC",l);let c;const h=new IX(u);c=e.runWebGLProgram(h,[r,o],"float32");const d=fe({inputs:{x:c},backend:e,attrs:{shape:u.outShape}});return e.disposeIntermediateTensorInfo(c),d}},EX={kernelName:Uc,backendName:"webgl",kernelFunc:function $X(n){const{inputs:t,backend:e,attrs:s}=n,{equation:r}=s,o=t,{allDims:a,summedDims:i,idDims:l}=Fg(r,o.length);Lg(a.length,l,o);const{path:u,steps:c}=Pg(i,l),h=c.length;let d=null,p=a.length;const f=[];for(let g=0;g<h;++g){for(const m of c[g]){const{permutationIndices:y,expandDims:x}=Og(p,l[m]);let b;Mg(y)?b=o[m]:(b=Ln({inputs:{x:o[m]},backend:e,attrs:{perm:y}}),f.push(b));const w=b.shape.slice();for(let S=0;S<x.length;++S)w.splice(x[S],0,1);Ye(b.shape,w)||(b=fe({inputs:{x:b},backend:e,attrs:{shape:w}}),f.push(b)),null===d?d=b:(d=Px({inputs:{a:b,b:d},backend:e}),f.push(d))}g<h-1&&(u[g]>=0&&(d=Dp({inputs:{x:d},backend:e,attrs:{axis:u[g]-(a.length-p),keepDims:!1}}),f.push(d)),p--)}for(const g of f)g!==d&&e.disposeIntermediateTensorInfo(g);return d}},_X=ot({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),AX={kernelName:Na,backendName:"webgl",kernelFunc:_X},FX={kernelName:Gc,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e}=n,{dy:s,y:r}=t,o=B().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Ui("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",s.shape,r.shape):new ra("return (b >= 0.0) ? a : a * (b + 1.0);",s.shape,r.shape);return e.runWebGLProgram(o,[s,r],s.dtype)}},OX=Cn({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool",cpuKernelImpl:SK}),LX={kernelName:dl,backendName:"webgl",kernelFunc:OX},MX=ot({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${kg};\n  float a1 = ${Tg};\n  float a2 = ${$g};\n  float a3 = ${Eg};\n  float a4 = ${_g};\n  float a5 = ${Ag};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`}),zX={kernelName:Ia,backendName:"webgl",kernelFunc:MX},Sk=ot({opSnippet:Gi+"\n  return exp(x);\n",packedOpSnippet:"\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:CK,dtype:"float32"}),VX={kernelName:ka,backendName:"webgl",kernelFunc:Sk};function Vx(n){const{inputs:t,attrs:e,backend:s}=n,{dim:r}=e,{input:o}=t,a=o.shape.length,i=o.shape.slice();let l=r;return r<0&&(C(-(a+1)<=r,()=>`Axis must be in the interval [${-(a+1)}, ${a}]`),l=a+r+1),i.splice(l,0,1),fe({inputs:{x:o},backend:s,attrs:{shape:i}})}const WX={kernelName:pl,backendName:"webgl",kernelFunc:Vx},Ck="return exp(x) - 1.0;",UX=ot({opSnippet:Ck,packedOpSnippet:Ck,cpuKernelImpl:NK}),GX={kernelName:Ta,backendName:"webgl",kernelFunc:UX};class Nk{constructor(t,e,s){this.variableNames=["real","imag"];const r=e[1];this.outputShape=e;const o=s?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,a=s?`${r}.0`:"1.0";let i;if("real"===t)i="return real * expR - imag * expI;";else{if("imag"!==t)throw new Error(`FFT component must be either "real" or "imag", got ${t}.`);i="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${o};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${i}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${r});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${r}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${a};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function Ik(n,t,e){const s=e.texData.get(n.dataId),r=q(n.shape),o=n.shape[n.shape.length-1],i=fe({inputs:{x:n},backend:e,attrs:{shape:[r/o,o]}}),l=i.shape,u=new Nk("real",l,t),c=new Nk("imag",l,t),h=[{dataId:s.complexTensorInfos.real.dataId,dtype:s.complexTensorInfos.real.dtype,shape:l},{dataId:s.complexTensorInfos.imag.dataId,dtype:s.complexTensorInfos.imag.dtype,shape:l}],d=e.runWebGLProgram(u,h,"float32"),p=e.runWebGLProgram(c,h,"float32"),f=co({inputs:{real:d,imag:p},backend:e});e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(p);const g=fe({inputs:{x:f},backend:e,attrs:{shape:n.shape}});return e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(f),g}const jX={kernelName:Hc,backendName:"webgl",kernelFunc:function HX(n){const{inputs:t,backend:e}=n,{input:s}=t;return Ik(s,!1,e)}};class KX{constructor(t,e){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=t,this.userCode="\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}}function pc(n){const{backend:t,attrs:e}=n,{shape:s,value:r}=e;let{dtype:o}=e;if(o=o||bo(r),"string"===o){const a=Ot(o,q(s));return a.fill(r),t.makeTensorInfo(s,o,a)}{const a=new KX(s,r);return t.runWebGLProgram(a,[],o,[[r]])}}const qX={kernelName:jc,backendName:"webgl",kernelFunc:pc};class XX{constructor(t){this.variableNames=["Image"],this.outputShape=[];const e=t[2];this.outputShape=t,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${e} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${e}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const ZX={kernelName:Kc,backendName:"webgl",kernelFunc:({inputs:n,backend:t})=>{const{image:e}=n,s=t,r=new XX(e.shape);return s.runWebGLProgram(r,[e],e.dtype)}},kk="return floor(x);",YX=ot({opSnippet:kk,packedOpSnippet:kk,cpuKernelImpl:IK}),QX={kernelName:$a,backendName:"webgl",kernelFunc:YX},JX=Cn({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),eZ={kernelName:Ea,backendName:"webgl",kernelFunc:JX};class tZ{constructor(t){this.variableNames=["A"];const e=Fn(),[s,r]=t;this.outputShape=t,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${s}.0);\n\n        vec4 values = ${e.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class nZ{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const e=Fn(),[s,r]=t;this.outputShape=t,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${r}.0, ${s}.0);\n            vec4 values = ${e.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${e.output} = result;\n      }\n    `}}const sZ={kernelName:Eh,backendName:"webgl",kernelFunc:function rZ(n){const{inputs:t,backend:e,attrs:s}=n;let{pixels:r}=t;const{numChannels:o}=s,a=typeof HTMLVideoElement<"u"&&r instanceof HTMLVideoElement,i=typeof HTMLImageElement<"u"&&r instanceof HTMLImageElement,[l,u]=a?[r.videoWidth,r.videoHeight]:[r.width,r.height],c=[u,l],h=[u,l,o];if(i||a){const g=B().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");(null==ji||g!==Wx)&&(Wx=g,ji=document.createElement("canvas").getContext("2d",{willReadFrequently:Wx})),ji.canvas.width=l,ji.canvas.height=u,ji.drawImage(r,0,0,l,u),r=ji.canvas}const d=e.makeTensorInfo(c,"int32");e.texData.get(d.dataId).usage=ks.PIXELS,e.gpgpu.uploadPixelDataToTexture(e.getTexture(d.dataId),r);const p=B().getBool("WEBGL_PACK")?new nZ(h):new tZ(h),f=e.runWebGLProgram(p,[d],"int32");return e.disposeData(d.dataId),f}};let ji,Wx=B().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");const aZ={kernelName:Jl,backendName:"webgl",kernelFunc:function oZ(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o,bias:a,preluActivationWeights:i}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=s,g=br(c),m=ln(r.shape,o.shape,l,h,u,d,!1,g);let y;const x=[],b=null!=a,w=null!=i,S="leakyrelu"===p,N=()=>{const T=[r,o],$=(R,M)=>{if("NCHW"===M&&1===R.shape.length&&1!==R.shape[0]){const V=fe({inputs:{x:R},backend:e,attrs:{shape:[R.shape[0],1,1]}});return x.push(V),V}return R};if(b&&T.push($(a,c)),w&&T.push($(i,c)),S){const R=e.makeTensorInfo([],"float32",dr(f,"float32"));T.push(R),x.push(R)}return T};if(1!==m.filterHeight||1!==m.filterWidth||1!==m.dilationHeight||1!==m.dilationWidth||1!==m.strideHeight||1!==m.strideWidth||"SAME"!==m.padInfo.type&&"VALID"!==m.padInfo.type)if(m.strideWidth<=2&&"channelsLast"===g&&B().getBool("WEBGL_EXP_CONV")){const T=p?uc(p,!0):null,$=new pk(m,b,T,w,S),R=[[m.padInfo.top,m.padInfo.left],[m.strideHeight,m.strideWidth],[m.dilationHeight,m.dilationWidth],[m.inHeight,m.inWidth]],M=N();y=e.runWebGLProgram($,M,"float32",R)}else if(B().getBool("WEBGL_CONV_IM2COL"))y=mk({x:r,filter:o,convInfo:m,backend:e,bias:a,activation:p,preluActivationWeights:i,leakyreluAlpha:f});else{const T=p?uc(p,!1):null,$=new dk(m,b,T,w,S),R=N();y=e.runWebGLProgram($,R,"float32")}else y=fk({x:r,filter:o,convInfo:m,backend:e,bias:a,activation:p,preluActivationWeights:i,leakyreluAlpha:f});const k=fe({inputs:{x:y},backend:e,attrs:{shape:m.outShape}});return x.push(y),x.forEach(T=>e.disposeIntermediateTensorInfo(T)),k}},lZ={kernelName:eu,backendName:"webgl",kernelFunc:function iZ(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o,bias:a,preluActivationWeights:i}=t,{strides:l,pad:u,dilations:c,dimRoundingMode:h,activation:d,leakyreluAlpha:p}=s,f=[];let g=c;null==g&&(g=[1,1]),C(xn(l,g),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${g}'`);const m=ln(r.shape,o.shape,l,g,u,h,!0),y=B().getBool("WEBGL_PACK_DEPTHWISECONV")&&m.strideWidth<=2&&m.outChannels/m.inChannels==1,x=d?uc(d,y):null,b=[r,o],w=null!=a,S=null!=i,N="leakyrelu"===d;if(w&&b.push(a),S&&b.push(i),N){const R=e.makeTensorInfo([],"float32",dr(p,"float32"));b.push(R),f.push(R)}let k;k=y?new vk(m,w,x,S,N):new wk(m,w,x,S,N);const $=e.runWebGLProgram(k,b,"float32",[[m.padInfo.top,m.padInfo.left],[m.strideHeight,m.strideWidth],[m.dilationHeight,m.dilationWidth],[m.inHeight,m.inWidth]]);return f.forEach(R=>e.disposeIntermediateTensorInfo(R)),$}};class uZ{constructor(t,e,s,r){this.sliceDim=t,this.strides=e,this.paramsShape=r,this.variableNames=["x","indices"],this.outputShape=s;const o=yt(s.length);let a="\n    int index;";for(let i=0;i<this.sliceDim;i++)a+=`\n          index = round(getIndices(coords[0], ${i}));\n          out_of_bounds = out_of_bounds || index < 0;\n          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[i]};\n          flattenIndex += index * ${this.strides[i]};`;this.userCode=`\n         void main() {\n          ${o} coords = getOutputCoords();\n          int flattenIndex = 0;\n          bool out_of_bounds = false;\n\n          ${a}\n\n          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));\n        }\n      `}}const hZ={kernelName:qc,backendName:"webgl",kernelFunc:function cZ(n){const{inputs:t,backend:e}=n,{params:s,indices:r}=t,o=r.shape,a=o[o.length-1],i=q(s.shape),[l,u,c,h]=Hh(s,r),d=fe({inputs:{x:r},backend:e,attrs:{shape:[u,a]}}),p=fe({inputs:{x:s},backend:e,attrs:{shape:[q(s.shape)/c,c]}});if(e.shouldExecuteOnCPU([s,r])||"string"===s.dtype){const y=e.readSync(r.dataId),x=e.bufferSync(s),b=kK(y,x,s.dtype,u,a,c,h,s.shape,i);return e.makeTensorInfo(l,s.dtype,b.values)}const f=new uZ(a,h,[u,c],s.shape),g=e.runWebGLProgram(f,[p,d],p.dtype),m=fe({inputs:{x:g},backend:e,attrs:{shape:l}});return e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(g),m}};class dZ{constructor(t,e){this.variableNames=["A","indices"],this.outputShape=e,this.rank=e.length;const s=yt(this.rank),r=function pZ(n,t){const e=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[];for(let r=0;r<n.length;r++)s.push(2===r?"index":`${e[r]}`);return s.join()}(t);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${t[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${r}));\n      }\n    `}}function Tk(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,indices:o}=t,{axis:a,batchDims:i}=s,l=je(a,r.shape)[0];if(B().get("DEBUG")){const x=e.readSync(o.dataId),b=r.shape[l];for(let w=0;w<x.length;++w){const S=x[w];C(S<=b-1&&S>=0,()=>`GatherV2: the index value ${S} is not in [0, ${b-1}]`)}}const u=Vg(r,o,l,i),c=q(o.shape),h=[],d=fe({inputs:{x:r},backend:e,attrs:{shape:[u.batchSize,u.outerSize,u.dimSize,u.sliceSize]}}),p=fe({inputs:{x:o},backend:e,attrs:{shape:[u.batchSize,c/u.batchSize]}});h.push(d),h.push(p);const f=[u.batchSize,u.outerSize,c/u.batchSize,u.sliceSize];if(e.shouldExecuteOnCPU([r,o])||"string"===r.dtype){const x=e.bufferSync(p),b=e.bufferSync(d),w=TK(b,x,f);return h.forEach(S=>e.disposeIntermediateTensorInfo(S)),e.makeTensorInfo(u.outputShape,w.dtype,w.values)}const g=new dZ(d.shape,f),m=e.runWebGLProgram(g,[d,p],d.dtype);h.push(m);const y=fe({inputs:{x:m},backend:e,attrs:{shape:u.outputShape}});return h.forEach(x=>e.disposeIntermediateTensorInfo(x)),y}const fZ={kernelName:ml,backendName:"webgl",kernelFunc:Tk},mZ=Cn({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:$K,dtype:"bool"}),gZ={kernelName:gl,backendName:"webgl",kernelFunc:mZ},yZ=Cn({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool",cpuKernelImpl:EK}),xZ={kernelName:_a,backendName:"webgl",kernelFunc:yZ},wZ={kernelName:Xc,backendName:"webgl",kernelFunc:function bZ(n){const{inputs:t,backend:e}=n,{input:s}=t;return Ik(s,!0,e)}},vZ=ot({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),SZ={kernelName:Ra,backendName:"webgl",kernelFunc:vZ},CZ=ot({opSnippet:"return float(isinf(x));",dtype:"bool"}),NZ={kernelName:Da,backendName:"webgl",kernelFunc:CZ},IZ=ot({opSnippet:"return float(isnan(x));",dtype:"bool"}),kZ={kernelName:Fa,backendName:"webgl",kernelFunc:IZ},TZ=Cn({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:_K,dtype:"bool"}),$Z={kernelName:xl,backendName:"webgl",kernelFunc:TZ},EZ=Cn({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",cpuKernelImpl:AK,dtype:"bool"}),_Z={kernelName:bl,backendName:"webgl",kernelFunc:EZ},RZ={kernelName:Yc,backendName:"webgl",kernelFunc:function AZ(n){const{backend:t,attrs:e}=n,{start:s,stop:r,num:o}=e,a=RK(s,r,o);return t.makeTensorInfo([a.length],"float32",a)}},FZ=ot({opSnippet:Gi+"\n  return x < 0.0 ? 0./0. : log(x);\n",packedOpSnippet:"\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n",cpuKernelImpl:DK}),OZ={kernelName:Oa,backendName:"webgl",kernelFunc:FZ},PZ=ot({opSnippet:Gi+"\n  return log(1.0 + x);\n"}),MZ={kernelName:La,backendName:"webgl",kernelFunc:PZ},zZ=Cn({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),BZ={kernelName:wl,backendName:"webgl",kernelFunc:zZ},VZ=ot({opSnippet:"return float(!(x >= 1.0));"}),WZ={kernelName:vl,backendName:"webgl",kernelFunc:VZ},UZ=Cn({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"}),GZ={kernelName:Sl,backendName:"webgl",kernelFunc:UZ};class HZ{constructor(t,e,s,r,o){this.variableNames=["x"],this.outputShape=[];const a=e,i=t[3]-1;let l;this.outputShape=t;const u=`float(${s}) + float(${r}) * sum`;l=.5===o?`inversesqrt(${u})`:1===o?`1.0/(${u})`:`exp(log(${u}) * float(-${o}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${a}; j <= ${a}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${i}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${l};\n        setOutput(val);\n      }\n    `}}class jZ{constructor(t,e,s,r,o){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const a=e,i=t[3]-1;let l;this.outputShape=t;const u=`float(${s}) + float(${r}) * sum`;l=.5===o?`inversesqrt(${u})`:1===o?`1.0/(${u})`:`exp(log(${u}) * float(-${o}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${a};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${a}; j <= ${a}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${l};\n        setOutput(result);\n      }\n    `}}const KZ={kernelName:Cl,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{depthRadius:o,bias:a,alpha:i,beta:l}=s,u=B().getBool("WEBGL_PACK_NORMALIZATION")?new jZ(r.shape,o,a,i,l):new HZ(r.shape,o,a,i,l);return e.runWebGLProgram(u,[r],r.dtype)}};class qZ{constructor(t,e,s,r,o){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=t,this.depth=t[3],this.depthRadius=e,this.bias=s,this.alpha=r,this.beta=o,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${e})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${e} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${r}) * norm + float(${s});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${r})\n                * float(${o})\n                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${o});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const XZ={kernelName:Qc,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:s}=n,{x:r,y:o,dy:a}=t,{depthRadius:i,bias:l,alpha:u,beta:c}=s,h=new qZ(r.shape,i,l,u,c);return e.runWebGLProgram(h,[r,o,a],r.dtype)}};function $k(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{reductionIndices:o,keepDims:a}=s,i=r.shape.length,l=je(o,r.shape);let u=l;const c=_t(u,i),h=null!=c,d=e.shouldExecuteOnCPU([r]);let p=r;if(h){if(d){const b=e.texData.get(p.dataId).values,w=new Array(i);for(let k=0;k<w.length;k++)w[k]=r.shape[c[k]];const S=Ox(b,r.shape,r.dtype,c,w);p=e.makeTensorInfo(w,r.dtype),e.texData.get(p.dataId).values=S}else p=Rp(r,c,e);u=Bt(u.length,i)}bn("max",u,i);const[f,g]=cn(p.shape,u);let y,m=f;if(a&&(m=zt(f,l)),d){const b=e.texData.get(p.dataId).values,w=FK(b,q(g),m,r.dtype);y=e.makeTensorInfo(m,r.dtype),e.texData.get(y.dataId).values=w}else y=function ZZ(n,t,e,s){const r=q(t),i=fe({inputs:{x:n},attrs:{shape:[q(n.shape)/r,r]},backend:s}),l=aa(i,n.dtype,"max",s),u=fe({inputs:{x:l},attrs:{shape:e},backend:s});return s.disposeIntermediateTensorInfo(i),s.disposeIntermediateTensorInfo(l),u}(p,g,m,e);return h&&e.disposeIntermediateTensorInfo(p),y}const YZ={kernelName:Nl,backendName:"webgl",kernelFunc:$k},e8=Cn({opSnippet:Lx+"\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+oa+"\n  return result;\n",cpuKernelImpl:OK}),t8={kernelName:Pa,backendName:"webgl",kernelFunc:e8},s8={kernelName:Il,backendName:"webgl",kernelFunc:function n8(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t;Mi(r,"maxPool");const{filterSize:o,strides:a,pad:i,dimRoundingMode:l}=s;C(xn(a,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '1'`);const c=bs(r.shape,o,a,1,i,l);if(1===c.filterWidth&&1===c.filterHeight&&Ye(c.inShape,c.outShape))return ss({inputs:{x:r},backend:e});const h=new cc(c,"max",!1);return e.runWebGLProgram(h,[r],r.dtype)}},o8={kernelName:kl,backendName:"webgl",kernelFunc:function r8(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{filterSize:o,strides:a,pad:i,dataFormat:l,dimRoundingMode:u}=s,h=xr(r.shape,o,a,[1,1,1],i,u,l),d=new Mx(h,"max",!1);return e.runWebGLProgram(d,[r],r.dtype)}};class a8{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;const o=t.effectiveFilterHeight,a=t.effectiveFilterWidth;this.userCode=`\n      const ivec2 pads = ivec2(${o-1-t.padInfo.top}, ${a-1-t.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n          wR += ${t.dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${a}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${o*a-1} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${a} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class i8{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;const l=t.effectiveFilterDepth,u=t.effectiveFilterHeight,c=t.effectiveFilterWidth;this.userCode=`\n      const ivec3 pads = ivec3(${l-1-t.padInfo.front}, ${u-1-t.padInfo.top}, ${c-1-t.padInfo.left});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${l};\n           wD += ${t.dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${t.strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${u};\n              wR += ${t.dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${c};\n                wC += ${t.dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${l*u*c-1} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${u} * ${c} +\n                  wR * ${c} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const u8={kernelName:eh,backendName:"webgl",kernelFunc:function l8(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o}=t,a=o,{filterSize:i,strides:l,pad:u,dimRoundingMode:c}=s,d=xr(a.shape,i,l,[1,1,1],u,c),p=new Mx(d,"max",!0),f=e.runWebGLProgram(p,[a],a.dtype),g=new i8(d),m=e.runWebGLProgram(g,[r,f],a.dtype);return e.disposeIntermediateTensorInfo(f),m}},h8={kernelName:Jc,backendName:"webgl",kernelFunc:function c8(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o,output:a}=t,i=o;Mi([o,a],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,d=bs(i.shape,l,u,1,c,h),f=new cc(d,"max",!0),g=e.runWebGLProgram(f,[i],i.dtype),m=new a8(d),y=e.runWebGLProgram(m,[r,g],i.dtype);return e.disposeIntermediateTensorInfo(g),y}},p8={kernelName:th,backendName:"webgl",kernelFunc:({inputs:n,attrs:t,backend:e})=>{const{x:s}=n,{filterSize:r,strides:o,pad:a,includeBatchInIndex:i}=t,l=e;C(4===s.shape.length,()=>`Error in maxPool: input must be rank 4 but got rank ${s.shape.length}.`);const u=[1,1];C(xn(o,u),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '${u}'`);const c=bs(s.shape,r,o,u,a),[h,d]=function d8(n,t,e,s){let r=new cc(e,"max",!1);const o=s.runWebGLProgram(r,[n],"float32");return r=new cc(e,"max",!0,!0,t),[o,s.runWebGLProgram(r,[n],"float32")]}(s,i,c,l);return[h,d]}},m8={kernelName:Tl,backendName:"webgl",kernelFunc:({inputs:n,attrs:t,backend:e})=>{const{x:s}=n,{keepDims:r,axis:o}=t,a=e,i=s.shape.length,l=je(o,s.shape);let u=l;const c=_t(u,i),h=null!=c,d=a.shouldExecuteOnCPU([s]),p=[];let f=s;if(h){if(d){const w=a.texData.get(f.dataId).values,S=new Array(i);for(let T=0;T<S.length;T++)S[T]=s.shape[c[T]];const N=Ox(w,s.shape,s.dtype,c,S);f=a.makeTensorInfo(S,s.dtype),a.texData.get(f.dataId).values=N}else f=Rp(s,c,a);p.push(f),u=Bt(u.length,i)}bn("sum",u,i);const[g,m]=cn(f.shape,u);let y=g;r&&(y=zt(g,l));const x=function f8(n,t,e,s){const r=q(t),i=fe({inputs:{x:n},attrs:{shape:[q(n.shape)/r,r]},backend:s}),l=aa(i,"float32","mean",s),u=fe({inputs:{x:l},attrs:{shape:e},backend:s});return s.disposeIntermediateTensorInfo(i),s.disposeIntermediateTensorInfo(l),u}(f,m,y,a);for(const b of p)a.disposeIntermediateTensorInfo(b);return x}},y8={kernelName:$l,backendName:"webgl",kernelFunc:function g8(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s,i=r.shape.length,l=je(o,r.shape);let u=l;const c=_t(u,i);let h=r;null!=c&&(h=Ln({inputs:{x:r},backend:e,attrs:{perm:c}}),u=Bt(u.length,r.shape.length)),bn("min",u,i);const[d,p]=cn(h.shape,u),g=fe({inputs:{x:h},backend:e,attrs:{shape:[-1,q(p)]}}),m=aa(g,g.dtype,"min",e);let y;return y=fe(a?{inputs:{x:m},backend:e,attrs:{shape:zt(d,l)}}:{inputs:{x:m},backend:e,attrs:{shape:d}}),e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(m),null!=c&&e.disposeIntermediateTensorInfo(h),y}},w8=Cn({opSnippet:Lx+"\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+oa+"\n  return result;\n",cpuKernelImpl:LK}),v8={kernelName:Ma,backendName:"webgl",kernelFunc:w8};class S8{constructor(t,e,s){this.variableNames=["x"],this.outputShape=e.map((c,h)=>c[0]+t[h]+c[1]);const r=t.length,o=yt(r),a=e.map(c=>c[0]).join(","),i=e.map((c,h)=>c[0]+t[h]).join(","),l=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r),u="reflect"===s?0:1;this.userCode=1!==r?`\n      ${o} start = ${o}(${a});\n      ${o} end = ${o}(${i});\n\n      void main() {\n        ${o} outC = getOutputCoords();\n        for (int i = 0; i < ${r}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${u};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${u};\n          }\n        }\n        ${o} coords = outC - start;\n        setOutput(getX(${l}));\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${u};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${u};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class C8{constructor(t,e,s){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.map((f,g)=>f[0]+t[g]+f[1]);const r=t.length,o=yt(r),a=e.map(f=>f[0]).join(","),i=e.map((f,g)=>f[0]+t[g]).join(","),l=On("rc",r),u=On("source",r),c=`${l[r-1]} < ${this.outputShape[r-1]}`,h=1===r?"source":`vec2(${u.slice(-2).join()})`,d="reflect"===s?0:1;let p="";if(1===r){const f=`\n        ${o} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${d};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${d};\n        }\n        source -= start;\n      `;p=`\n        ${o} rc = outputLoc;\n        ${f}\n        result[0] = getChannel(getX(${u.join()}), ${h});\n        ${l[r-1]} += 1;\n        if(${c}) {\n          ${f}\n          result[1] = getChannel(getX(${u.join()}), ${h});\n        }\n      `}else{const f=`\n        ${o} source = rc;\n        ${o} lt = ${o}(lessThan(source, start));\n        ${o} gte = ${o}(greaterThanEqual(source, end));\n        ${o} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${d}) +\n                gte * ((end - 1) * 2 - source + ${d});\n        source -= start;\n      `;p=`\n        ${o} rc = outputLoc;\n        ${f}\n        result[0] = getChannel(getX(${u.join()}), ${h});\n        ${l[r-1]} += 1;\n        if(${c}) {\n          ${f}\n          result[1] = getChannel(getX(${u.join()}), ${h});\n        }\n        rc = outputLoc;\n        ${l[r-2]} += 1;\n        if(${l[r-2]} < ${this.outputShape[r-2]}) {\n          ${f}\n          result[2] = getChannel(getX(${u.join()}), ${h});\n          ${l[r-1]} += 1;\n          if(${c}) {\n            ${f}\n            result[3] = getChannel(getX(${u.join()}), ${h});\n          }\n        }\n      `}this.userCode=`\n      const ${o} start = ${o}(${a});\n      const ${o} end = ${o}(${i});\n\n      void main() {\n        ${o} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}const N8={kernelName:El,backendName:"webgl",kernelFunc:({inputs:n,backend:t,attrs:e})=>{const{x:s}=n,{paddings:r,mode:o}=e,a=B().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new C8(s.shape,r,o):new S8(s.shape,r,o);return t.runWebGLProgram(a,[s],s.dtype)}},T8=Cn({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  bvec4 isNaN = equal(b, vec4(0.0));\n  "+oa+"\n  return result;\n"}),$8={kernelName:za,backendName:"webgl",kernelFunc:T8};class E8{constructor(t,e,s){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[t,s],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${e-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${e-1}));\n      }\n    `}}const Ek=Cn({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),_8={kernelName:Ca,backendName:"webgl",kernelFunc:Ek},_k="return a - b;",Ak=Cn({opSnippet:_k,packedOpSnippet:_k,supportsComplex:!0,cpuKernelImpl:sq}),A8={kernelName:ti,backendName:"webgl",kernelFunc:Ak};function Rk(n){const{inputs:t,backend:e,attrs:s}=n,{logits:r}=t,{dim:o}=s,a=je([o],r.shape),i=$k({inputs:{x:r},backend:e,attrs:{reductionIndices:a,keepDims:!1}}),l=zt(i.shape,a),u=fe({inputs:{x:i},backend:e,attrs:{shape:l}}),c=Ak({inputs:{a:r,b:u},backend:e}),h=Sk({inputs:{x:c},backend:e}),d=Dp({inputs:{x:h},backend:e,attrs:{axis:a,keepDims:!1}}),p=fe({inputs:{x:d},backend:e,attrs:{shape:l}}),f=Ek({inputs:{a:h,b:p},backend:e});return e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(c),e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(p),f}const R8={kernelName:Kl,backendName:"webgl",kernelFunc:Rk},F8={kernelName:nh,backendName:"webgl",kernelFunc:function D8(n){const{inputs:t,backend:e,attrs:s}=n,{logits:r}=t,{numSamples:o,seed:a,normalized:i}=s,l=i?r:Rk({inputs:{logits:r},backend:e,attrs:{dim:r.shape.length-1}}),h=new E8(l.shape[0],l.shape[1],o),p=e.runWebGLProgram(h,[l],"int32",[[a]]);return i||e.disposeIntermediateTensorInfo(l),p}},O8=gs+"\n  return -x;\n",M8={kernelName:_l,backendName:"webgl",kernelFunc:function P8(n){const{inputs:t,backend:e}=n,{x:s}=t;if(e.shouldExecuteOnCPU([s])){const o=e.texData.get(s.dataId),[a,i]=MK(o.values,s.shape,s.dtype);return e.makeTensorInfo(i,s.dtype,a)}let r;return r=B().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new uo(s.shape,"\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"):new ir(s.shape,O8),e.runWebGLProgram(r,[s],s.dtype)}},z8=Cd,V8={kernelName:sh,backendName:"webgl",kernelFunc:function B8(n){as("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:e,attrs:s}=n,{boxes:r,scores:o}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:l}=s,u=e.readSync(r.dataId),c=e.readSync(o.dataId),{selectedIndices:h}=z8(u,c,a,i,l);return e.makeTensorInfo([h.length],"int32",new Int32Array(h))}},W8=Nd,G8={kernelName:rh,backendName:"webgl",kernelFunc:function U8(n){as("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:e,attrs:s}=n,{boxes:r,scores:o}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:l,padToMaxOutputSize:u}=s,c=e.readSync(r.dataId),h=e.readSync(o.dataId),{selectedIndices:d,validOutputs:p}=W8(c,h,a,i,l,u);return[e.makeTensorInfo([d.length],"int32",new Int32Array(d)),e.makeTensorInfo([],"int32",new Int32Array([p]))]}},H8=Id,K8={kernelName:oh,backendName:"webgl",kernelFunc:function j8(n){as("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:e,attrs:s}=n,{boxes:r,scores:o}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:l,softNmsSigma:u}=s,c=e.readSync(r.dataId),h=e.readSync(o.dataId),d=a,p=i,f=l,g=u,{selectedIndices:m,selectedScores:y}=H8(c,h,d,p,f,g);return[e.makeTensorInfo([m.length],"int32",new Int32Array(m)),e.makeTensorInfo([y.length],"float32",new Float32Array(y))]}};class q8{constructor(t,e,s,r){this.variableNames=["indices"],this.outputShape=[t,e],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${r}), float(${s}),\n                      float(index == coords.y)));\n      }\n    `}}const X8={kernelName:Dl,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:s}=n,{indices:r}=t,{dtype:o,depth:a,onValue:i,offValue:l}=s,u=q(r.shape),c=new q8(u,a,i,l),h=fe({inputs:{x:r},backend:e,attrs:{shape:[u]}}),d=e.runWebGLProgram(c,[h],o);e.disposeIntermediateTensorInfo(h);const f=fe({inputs:{x:d},backend:e,attrs:{shape:[...r.shape,a]}});return e.disposeIntermediateTensorInfo(d),f}};function Bp(n){const{inputs:t,backend:e}=n,{x:s}=t;if("complex64"===s.dtype){const r=hc({inputs:{input:s},backend:e}),o=Bp({inputs:{x:r},backend:e}),a=Pp({inputs:{input:s},backend:e}),i=Bp({inputs:{x:a},backend:e}),l=co({inputs:{real:o,imag:i},backend:e});return e.disposeIntermediateTensorInfo(r),e.disposeIntermediateTensorInfo(o),e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(i),l}return pc({attrs:{shape:s.shape,dtype:s.dtype,value:"string"===s.dtype?"":0},backend:e})}const Z8={kernelName:Yl,backendName:"webgl",kernelFunc:Bp},Y8={kernelName:Rl,backendName:"webgl",kernelFunc:function Dk(n){const{inputs:t,backend:e}=n,{x:s}=t;if("string"===s.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===s.dtype){const r=hc({inputs:{input:s},backend:e}),o=Dk({inputs:{x:r},backend:e}),a=Pp({inputs:{input:s},backend:e}),i=Bp({inputs:{x:a},backend:e}),l=co({inputs:{real:o,imag:i},backend:e});return e.disposeIntermediateTensorInfo(r),e.disposeIntermediateTensorInfo(o),e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(i),l}return pc({attrs:{shape:s.shape,dtype:s.dtype,value:1},backend:e})}},J8={kernelName:Fl,backendName:"webgl",kernelFunc:function Q8(n){const{inputs:t,backend:e,attrs:s}=n,{axis:r}=s;if(1===t.length)return Vx({inputs:{input:t[0]},backend:e,attrs:{dim:r}});const o=t[0].shape,a=t[0].dtype;t.forEach(c=>{fn(o,c.shape,"All tensors passed to stack must have matching shapes"),C(a===c.dtype,()=>"All tensors passed to stack must have matching dtypes")});const i=[],u=hk({inputs:t.map(c=>{const h=Vx({inputs:{input:c},backend:e,attrs:{dim:r}});return i.push(h),h}),backend:e,attrs:{axis:r}});return i.forEach(c=>e.disposeIntermediateTensorInfo(c)),u}};class eY{constructor(t,e,s){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=e.map((u,c)=>u[0]+t[c]+u[1]);const r=t.length,o=yt(r),a=e.map(u=>u[0]).join(","),i=e.map((u,c)=>u[0]+t[c]).join(","),l=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?`\n      ${o} start = ${o}(${a});\n      ${o} end = ${o}(${i});\n\n      void main() {\n        ${o} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${o} coords = outC - start;\n          setOutput(getX(${l}));\n        }\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class tY{constructor(t,e,s){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=e.map((g,m)=>g[0]+t[m]+g[1]);const r=t.length,o=yt(r),a=e.map(g=>g[0]).join(","),i=e.map((g,m)=>g[0]+t[m]).join(","),l=On("rc",r),u=On("source",r),c=`${l[r-1]} < ${this.outputShape[r-1]}`,h=1===r?"source":`vec2(${u.slice(-2).join()})`,d=[`${o} rc = outputLoc;`,`${l[r-1]} += 1;\n       if(${c}) {\n      `,1===r?"":`}\n       rc = outputLoc;\n       ${l[r-2]} += 1;\n       if(${l[r-2]} < ${this.outputShape[r-2]}) {`,1===r?"":`  ${l[r-1]} += 1;\n         if(${c}) {`],p=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let f="";for(let g=0,m=1===r?2:4;g<m;g++)f+=`\n        ${d[g]}\n        if (${p}) {\n          result[${g}] = float(value);\n        } else {\n          ${o} source = rc - start;\n          result[${g}] = getChannel(getX(${u.join()}), ${h});\n        }\n      `;f+=1===r?"} ":"}}",this.userCode=`\n      const ${o} start = ${o}(${a});\n      const ${o} end = ${o}(${i});\n\n      void main() {\n        ${o} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${f}\n        setOutput(result);\n      }\n    `}}const Fk=n=>{const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{paddings:o,constantValue:a}=s;if(0===q(r.shape))return pc({backend:e,attrs:{shape:o.map((c,h)=>c[0]+r.shape[h]+c[1]),value:a,dtype:r.dtype}});const i=B().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new tY(r.shape,o,a):new eY(r.shape,o,a);return e.runWebGLProgram(i,[r],r.dtype,[[a]])},nY={kernelName:Ol,backendName:"webgl",kernelFunc:Fk},oY=Cn({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  bvec4 isNaN1 = lessThan(a, vec4(0.0));\n  bvec4 isNaN2 = lessThan(floor(b), b);\n  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);\n  "+oa+"\n  return result;\n"}),aY={kernelName:Va,backendName:"webgl",kernelFunc:oY},lY={kernelName:Pl,backendName:"webgl",kernelFunc:function iY(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s,i=r.shape.length,l=[],u=je(o,r.shape);let c=u;const h=_t(c,i);let p,d=r;if(null!=h&&(d=Ln({inputs:{x:r},backend:e,attrs:{perm:h}}),c=Bt(c.length,i),l.push(d)),bn("prod",c,i),e.shouldExecuteOnCPU([d])){const f=e.texData.get(d.dataId).values,{outVals:g,outShape:m,outDtype:y}=BK(d.shape,d.dtype,f,c);p=e.makeTensorInfo(m,y,g)}else{const[f,g]=cn(d.shape,c),m=q(g),y=fe({inputs:{x:d},backend:e,attrs:{shape:[-1,m]}}),b=aa(y,Oh(r.dtype),"prod",e);p=fe({inputs:{x:b},backend:e,attrs:{shape:f}}),l.push(y),l.push(b)}if(a){l.push(p);const f=zt(p.shape,u);p=fe({inputs:{x:p},backend:e,attrs:{shape:f}})}return l.forEach(f=>e.disposeIntermediateTensorInfo(f)),p}},cY={kernelName:ah,backendName:"webgl",kernelFunc:function uY(n){const{inputs:t,backend:e,attrs:s}=n,{paramsNestedSplits:r,paramsDenseValues:o,indices:a}=t,{outputRaggedRank:i}=s,l=r.map(y=>e.readSync(y.dataId)),u=r.map(y=>y.shape),c=e.readSync(o.dataId),h=e.readSync(a.dataId),[d,p,f]=VK(l,u,c,o.shape,o.dtype,h,a.shape,i),g=d.map(y=>e.makeTensorInfo([y.length],"int32",y)),m=e.makeTensorInfo(f,o.dtype,p);return g.concat([m])}},dY={kernelName:ih,backendName:"webgl",kernelFunc:function hY(n){const{inputs:t,backend:e}=n,{starts:s,limits:r,deltas:o}=t,a=e.readSync(s.dataId),i=e.readSync(r.dataId),l=e.readSync(o.dataId),[u,c]=WK(a,s.shape,s.dtype,i,r.shape,l,o.shape);return[e.makeTensorInfo([u.length],"int32",u),e.makeTensorInfo([c.length],s.dtype,c)]}},fY={kernelName:lh,backendName:"webgl",kernelFunc:function pY(n){const{inputs:t,backend:e,attrs:s}=n,{shape:r,values:o,defaultValue:a,rowPartitionTensors:i}=t,{rowPartitionTypes:l}=s,u=e.readSync(r.dataId),c=e.readSync(o.dataId),h=e.readSync(a.dataId),d=i.map(m=>e.readSync(m.dataId)),p=i.map(m=>m.shape),[f,g]=UK(u,r.shape,c,o.shape,o.dtype,h,a.shape,d,p,l);return e.makeTensorInfo(f,o.dtype,g)}},Ok=n=>{const{backend:t,attrs:e}=n,{start:s,stop:r,step:o,dtype:a}=e,i=GK(s,r,o,a);return t.makeTensorInfo([i.length],a,i)},mY={kernelName:uh,backendName:"webgl",kernelFunc:Ok},gY=ot({opSnippet:"return 1.0 / x;"}),yY={kernelName:Wa,backendName:"webgl",kernelFunc:gY},bY=ot({opSnippet:gs+"\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),wY={kernelName:Ua,backendName:"webgl",kernelFunc:bY},SY=ot({opSnippet:gs+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),CY={kernelName:Ga,backendName:"webgl",kernelFunc:SY};class NY{constructor(t,e,s,r,o){this.variableNames=["A"],this.outputShape=[];const[a,i,l,u]=t;this.outputShape=[a,e,s,u];const c=[r&&e>1?i-1:i,r&&s>1?l-1:l],h=[r&&e>1?e-1:e,r&&s>1?s-1:s];let d;d=o?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${c[0]/h[0]},\n          ${c[1]/h[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${l}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${d};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class IY{constructor(t,e,s,r,o){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,i,l,u]=t;this.outputShape=[a,e,s,u];const c=[r&&e>1?i-1:i,r&&s>1?l-1:l],h=[r&&e>1?e-1:e,r&&s>1?s-1:s];let d;d=o?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${c[0]/h[0]},\n          ${c[1]/h[1]},\n          ${c[1]/h[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${l}.0,\n                                     ${l}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${d};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${u-1};\n        bool hasNextRow = coords.z < ${s-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const TY={kernelName:Bl,backendName:"webgl",kernelFunc:function kY(n){const{inputs:t,backend:e,attrs:s}=n,{images:r}=t,{alignCorners:o,halfPixelCenters:a,size:i}=s,[l,u]=i,c=B().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new IY(r.shape,l,u,o,a):new NY(r.shape,l,u,o,a);return e.runWebGLProgram(c,[r],"float32")}};class $Y{constructor(t,e,s){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e;const[,r,o]=e,[,a,i]=t,l=[s&&a>1?r-1:r,s&&i>1?o-1:o],u=[s&&a>1?a-1:a,s&&i>1?i-1:i],c=l[0]/u[0],h=l[1]/u[1],d=1/c,p=1/h,f=2*Math.ceil(d)+2,g=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${c});\n        const float widthScale = float(${h});\n\n        const float invHeightScale = float(${d});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${f});\n        const int winWidth = int(${g});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${r-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${o-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const _Y={kernelName:dh,backendName:"webgl",kernelFunc:function EY(n){const{inputs:t,backend:e,attrs:s}=n,{images:r,dy:o}=t,{alignCorners:a}=s,i=new $Y(o.shape,r.shape,a);return e.runWebGLProgram(i,[o],o.dtype)}};class AY{constructor(t,e,s,r,o){this.variableNames=["A"],this.outputShape=[];const[a,i,l,u]=t;this.outputShape=[a,e,s,u];const c=[r&&e>1?i-1:i,r&&s>1?l-1:l],h=[r&&e>1?e-1:e,r&&s>1?s-1:s];let p;p=o?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${c[0]/h[0]},\n          ${c[1]/h[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${l}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${r?"0.5":"0.0"})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class RY{constructor(t,e,s,r,o){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,i,l,u]=t;this.outputShape=[a,e,s,u];const c=[r&&e>1?i-1:i,r&&s>1?l-1:l],h=[r&&e>1?e-1:e,r&&s>1?s-1:s];let p;p=o?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${c[0]/h[0]},\n          ${c[1]/h[1]},\n          ${c[1]/h[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${l}.0,\n                                     ${l}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${r?"0.5":"0.0"})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${u-1};\n        bool hasNextRow = coords.z < ${s-1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `}}const FY={kernelName:zl,backendName:"webgl",kernelFunc:function DY(n){const{inputs:t,backend:e,attrs:s}=n,{images:r}=t,{alignCorners:o,halfPixelCenters:a,size:i}=s,[l,u]=i,c=B().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new RY(r.shape,l,u,o,a):new AY(r.shape,l,u,o,a);return e.runWebGLProgram(c,[r],r.dtype)}};class OY{constructor(t,e,s){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e;const[,r,o]=e,[,a,i]=t,l=[s&&a>1?r-1:r,s&&i>1?o-1:o],u=[s&&a>1?a-1:a,s&&i>1?i-1:i],c=l[0]/u[0],h=l[1]/u[1],d=1/c,p=1/h,f=2*Math.ceil(d)+2,g=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${c});\n        const float widthScale = float(${h});\n\n        const float invHeightScale = float(${d});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${f});\n        const int winWidth = int(${g});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${l[0]}) *\n                (float(dyR) / float(${u[0]}));\n\n            float sourceFracCol =\n                float(${l[1]}) *\n                  (float(dyC) / float(${u[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${r}) - 1),\n                ${s} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${o}) - 1),\n                ${s} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const PY={kernelName:hh,backendName:"webgl",kernelFunc:function LY(n){const{inputs:t,backend:e,attrs:s}=n,{images:r,dy:o}=t,{alignCorners:a}=s,i=new OY(o.shape,r.shape,a);return e.runWebGLProgram(i,[o],o.dtype)}};class MY{constructor(t,e){this.variableNames=["x"];const s=t.length;if(s>4)throw new Error(`WebGL backend: Reverse of rank-${s} tensor is not yet supported`);if(this.outputShape=t,1===s)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${t[0]} - coord - 1));\n        }\n      `);const o=t.map((i,l)=>(i=>-1!==e.indexOf(i)&&1!==t[i]?`${t[i]} - coords[${i}] - 1`:`coords[${i}]`)(l)).join(","),a=yt(s);this.userCode=`\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${o}));\n      }\n    `}}class zY{constructor(t,e){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const s=t.length;if(s>4)throw new Error(`WebGL backend: Reverse of rank-${s} tensor is not yet supported`);this.outputShape=t;const r=On("rc",s),o=`${r[s-1]} + 1 < ${this.outputShape[s-1]}`,a=`${r[s-2]} + 1 < ${this.outputShape[s-2]}`,i=yt(s);function d(f){const g=t.map((x,b)=>function p(f,g){return-1!==e.indexOf(f)&&1!==t[f]?`${t[f]} - ${g[f]} - 1`:`${g[f]}`}(b,f));return`getChannel(getX(${g.join(",")}), vec2(${g.slice(-2).join(",")}))`}this.userCode=1===s?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${t[0]} - rc - 1),\n            ${t[0]} - rc - 1);\n          if(${o}){\n              result.g = getChannel(getX(${t[0]} - (rc  + 1) - 1),\n                ${t[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${i} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function l(f){return d(f)}(r.slice())};\n          if(${o}){\n            result.g = ${function u(f){return f[s-1]="("+f[s-1]+" + 1)",d(f)}(r.slice())};\n          }\n          if(${a}) {\n            result.b = ${function c(f){return f[s-2]="("+f[s-2]+" + 1)",d(f)}(r.slice())};\n            if(${o}) {\n              result.a = ${function h(f){return f[s-1]="("+f[s-1]+" + 1)",f[s-2]="("+f[s-2]+" + 1)",d(f)}(r.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const VY={kernelName:Vl,backendName:"webgl",kernelFunc:function BY(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{dims:o}=s,a=r.shape.length,i=je(o,r.shape);if(0===a)return ss({inputs:{x:r},backend:e});const l=B().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new zY(r.shape,i):new MY(r.shape,i);return e.runWebGLProgram(l,[r],r.dtype)}};class WY{constructor(t,e){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];const s=t[1],r=t[2];this.outputShape=t;let o="";o="number"==typeof e?`float outputValue = ${e.toFixed(2)};`:`\n        vec3 fill = vec3(${e.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${o}\n          if(coordX >= 0 && coordX < ${r} && coordY >= 0 && coordY < ${s}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const UY={kernelName:_h,backendName:"webgl",kernelFunc:({inputs:n,attrs:t,backend:e})=>{const{image:s}=n,{radians:r,fillValue:o,center:a}=t,i=e,l=new WY(s.shape,o),[u,c]=Cg(a,s.shape[1],s.shape[2]),h=[[u,c,Math.sin(r),Math.cos(r)]];return i.runWebGLProgram(l,[s],s.dtype,h)}},GY=ot({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),HY={kernelName:Ha,backendName:"webgl",kernelFunc:GY},jY=ot({opSnippet:"return inversesqrt(x);",cpuKernelImpl:HK}),KY={kernelName:ja,backendName:"webgl",kernelFunc:jY};class Ux{constructor(t,e,s,r,o,a,i=!0,l=!1){this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;const u=yt(o.length),c=yt(a.length);let h="";1===s?h="i":2===s&&(h="i, j");let p="";1===r?p="i":2===r&&(p="i, coords[1]");let g="";l&&(g="coords[0], coords[1]"),this.userCode=`\n        ${u} strides = ${u}(${o});\n\n        void main() {\n          ${c} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${t}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${e}; j++) {\n              int index = round(getIndices(${h}));\n              flattenedIndex += index * ${e>1?"strides[j]":"strides"};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += getUpdates(${p});\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(${g}), sum, float(found)));\n        }\n      `}}class qY{constructor(t,e,s,r,o,a,i=!0,l=!1){this.variableNames=["updates","indices","defaultValue"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=a;const u=yt(o.length),c=yt(a.length);let h="";1===s?h="i":2===s&&(h="i, j");let p="";1===r?p="i":2===r&&(p="i, coords[1]");let g="";l&&(g="coords[0], coords[1]"),this.userCode=`\n        ${u} strides = ${u}(${o});\n\n        void main() {\n          ${c} coords = getOutputCoords();\n          vec4 sum = vec4(0.);\n          vec4 found = vec4(0.);\n          for (int i = 0; i < ${t}; i+=2) {\n            ivec2 flattenedIndex = ivec2(0);\n            for (int j = 0; j < ${e}; j+=2) {\n              ivec4 index = round(getIndices(${h}));\n              flattenedIndex += index.xz * ${e>1?"strides[j]":"strides"};\n              if (j + 1 < ${e}) {\n                flattenedIndex += index.yw * ${e>1?"strides[j + 1]":"strides"};\n              }\n            }\n            if (flattenedIndex[0] == coords[0] || flattenedIndex[1] == coords[0] ||\n                flattenedIndex[0] == coords[0] + 1 || flattenedIndex[1] == coords[0] + 1) {\n              vec4 updVals = getUpdates(${p});\n              if (flattenedIndex[0] == coords[0]) {\n                sum.xy += updVals.xy;\n                found.xy = vec2(1.);\n              } else if (flattenedIndex[0] == coords[0] + 1) {\n                sum.zw += updVals.xy;\n                found.zw = vec2(1.);\n              }\n              if (flattenedIndex[1] == coords[0]) {\n                sum.xy += updVals.zw;\n                found.xy = vec2(1.);\n              } else if (flattenedIndex[1] == coords[0] + 1) {\n                sum.zw += updVals.zw;\n                found.zw = vec2(1.);\n              }\n            }\n          }\n          setOutput(mix(getDefaultValue(${g}), sum, found));\n        }\n      `}}const ZY={kernelName:ph,backendName:"webgl",kernelFunc:function XY(n){const{inputs:t,backend:e,attrs:s}=n,{indices:r,updates:o}=t,{shape:a}=s,{sliceRank:i,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=Br(0,r,a),d=[h/u,u];if(0===h)return e.makeTensorInfo(a,r.dtype);const p=fe({inputs:{x:r},backend:e,attrs:{shape:[l,i]}}),f=fe({inputs:{x:o},backend:e,attrs:{shape:[l,u]}}),g=e.makeTensorInfo([],"float32",new Float32Array([0]));let m;m=B().getBool("WEBGL_PACK")?new qY(l,i,p.shape.length,f.shape.length,c,d):new Ux(l,i,p.shape.length,f.shape.length,c,d);const y=e.runWebGLProgram(m,[f,p,g],f.dtype),x=fe({inputs:{x:y},backend:e,attrs:{shape:a}});return e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(y),e.disposeIntermediateTensorInfo(g),x}};class YY{constructor(t,e,s,r){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[t,s];const a=`for (int i = 0; i < ${Math.ceil(Math.log2(e+1))}; ++i) { if (left >= right) break;`,i=2===B().getNumber("WEBGL_VERSION")?"while (left < right) {":a;this.userCode=`\n       int findBound(int batch, float value) {\n         int left = 0;\n         int right = numInputs;\n         int mid;\n         ${i}\n           mid = (left + right) / 2;\n           if (getSortedSequence(batch, mid) ${"left"===r?"<":"<="} value) {\n             left = mid + 1;\n           } else {\n             right = mid;\n           }\n         }\n         return right;\n       }\n\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int valueIndex = coords[1];\n\n         float value = getValues(batch, valueIndex);\n\n         setOutput(float(findBound(batch, value)));\n       }\n     `}}const JY={kernelName:mh,backendName:"webgl",kernelFunc:function QY(n){const{inputs:t,backend:e,attrs:s}=n,{sortedSequence:r,values:o}=t,{side:a}=s,i=new YY(r.shape[0],r.shape[1],o.shape[1],a);return e.runWebGLProgram(i,[r,o],"int32",[[r.shape[1]]])}};class e7{constructor(t,e,s){let r,o;if(this.variableNames=["c","a","b"],this.outputShape=e,s>4)throw Error(`Where for rank ${s} is not yet supported`);if(1===s)o="resRC",r="resRC";else{const i=["resRC.x","resRC.y","resRC.z","resRC.w"],l=[],u=[];for(let c=0;c<e.length;c++)u.push(`${i[c]}`),c<t&&l.push(`${i[c]}`);r=l.join(),o=u.join()}const a=yt(s);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        float cVal = getC(${r});\n        if (cVal >= 1.0) {\n          setOutput(getA(${o}));\n        } else {\n          setOutput(getB(${o}));\n        }\n      }\n    `}}const n7={kernelName:Wl,backendName:"webgl",kernelFunc:function t7(n){const{inputs:t,backend:e}=n,{condition:s,t:r,e:o}=t,a=new e7(s.shape.length,r.shape,r.shape.length);return e.runWebGLProgram(a,[s,r,o],Pn(r.dtype,o.dtype))}},r7=ot({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${Td};\n  float scale = ${$d};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`}),o7={kernelName:Ka,backendName:"webgl",kernelFunc:r7},i7=ot({opSnippet:Gi+"\n  return 1.0 / (1.0 + exp(-1.0 * x));\n",packedOpSnippet:"\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:KK}),l7={kernelName:Ya,backendName:"webgl",kernelFunc:i7},u7=ot({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"}),c7={kernelName:Za,backendName:"webgl",kernelFunc:u7},p7=ot({opSnippet:Gi+"\n  return sin(x);\n",packedOpSnippet:`\n  vec4 result = sin(x);\n  bvec4 isNaN = isnan(x);\n  ${oa}\n  return result;\n`}),f7={kernelName:qa,backendName:"webgl",kernelFunc:p7},m7=ot({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),g7={kernelName:Xa,backendName:"webgl",kernelFunc:m7},y7=ot({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),x7={kernelName:Qa,backendName:"webgl",kernelFunc:y7},b7={kernelName:Hl,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{blockShape:o,paddings:a}=s;C(r.shape.length<=4,()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");const i=o.reduce((y,x)=>y*x),l=[[0,0]];l.push(...a);for(let y=1+o.length;y<r.shape.length;++y)l.push([0,0]);const u=[],c=Fk({inputs:{x:r},backend:e,attrs:{paddings:l,constantValue:0}}),h=Du(c.shape,o,i,!1),d=Fu(h.length,o.length,!1),p=Ou(c.shape,o,i,!1),f=fe({inputs:{x:c},backend:e,attrs:{shape:h}}),g=Ln({inputs:{x:f},backend:e,attrs:{perm:d}}),m=fe({inputs:{x:g},backend:e,attrs:{shape:p}});return u.push(c),u.push(f),u.push(g),u.forEach(y=>e.disposeIntermediateTensorInfo(y)),m}},v7={kernelName:gh,backendName:"webgl",kernelFunc:function w7(n){const{inputs:t,backend:e}=n,{indices:s,values:r,denseShape:o,defaultValue:a}=t;if(1!==o.shape.length)throw new Error(`Dense shape must be a vector, saw:\n         ${o.shape}`);if(2!==s.shape.length)throw new Error(`Indices must be a matrix, saw:\n         ${s.shape}`);if(1!==r.shape.length)throw new Error(`Values must be a vector, saw:\n         ${r.shape}`);if(0!==a.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${a.shape}`);const i=e.readSync(s.dataId),l=e.readSync(r.dataId),u=e.readSync(o.dataId),c=e.readSync(a.dataId)[0],[h,d,p,f,g]=XK(i,s.shape,s.dtype,l,r.dtype,u,c);return[e.makeTensorInfo(d,s.dtype,h),e.makeTensorInfo([d[0]],r.dtype,p),e.makeTensorInfo([f.length],"bool",new Uint8Array(f.map(m=>Number(m)))),e.makeTensorInfo([g.length],s.dtype,new Int32Array(g))]}},C7={kernelName:yh,backendName:"webgl",kernelFunc:function S7(n){const{inputs:t,backend:e}=n,{inputIndices:s,inputShape:r,newShape:o}=t;if(2!==s.shape.length)throw new Error(`Input indices should be a matrix but received shape ${s.shape}`);if(1!==r.shape.length)throw new Error(`Input shape should be a vector but received shape ${r.shape}`);if(1!==o.shape.length)throw new Error(`Target shape should be a vector but received shape ${o.shape}`);const a=Array.from(e.readSync(r.dataId)),i=e.readSync(s.dataId),l=Array.from(e.readSync(o.dataId)),[u,c,h]=ZK(i,s.shape,s.dtype,a,l);return[e.makeTensorInfo(c,s.dtype,u),e.makeTensorInfo([h.length],o.dtype,new Int32Array(h))]}},I7={kernelName:xh,backendName:"webgl",kernelFunc:function N7(n){const{inputs:t,backend:e}=n,{data:s,indices:r,segmentIds:o}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n              ${r.shape}`);if(1!==o.shape.length)throw new Error(`Segment ids should be a vector but received shape\n              ${o.shape}`);const a=e.readSync(s.dataId),i=e.readSync(r.dataId),l=e.readSync(o.dataId),[u,c]=PI(a,s.shape,s.dtype,i,l,!0);return e.makeTensorInfo(c,s.dtype,u)}},T7={kernelName:bh,backendName:"webgl",kernelFunc:function k7(n){const{inputs:t,backend:e}=n,{data:s,indices:r,segmentIds:o}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n             ${r.shape}`);if(1!==o.shape.length)throw new Error(`Segment ids should be a vector but received shape\n             ${o.shape}`);const a=e.readSync(s.dataId),i=e.readSync(r.dataId),l=e.readSync(o.dataId),[u,c]=PI(a,s.shape,s.dtype,i,l);return e.makeTensorInfo(c,s.dtype,u)}},E7={kernelName:wh,backendName:"webgl",kernelFunc:function $7(n){const{inputs:t,backend:e,attrs:s}=n,{sparseIndices:r,sparseValues:o,defaultValue:a}=t,{outputShape:i}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:h,outputSize:d}=Br(0,r,i);if("string"===o.dtype){const y=e.bufferSync(r),x=e.bufferSync(o),b=pr(e.readSync(a.dataId)[0]),w=jK(y,x,i,d,c,u,l,h,b,!1);return e.makeTensorInfo(i,w.dtype,w.values)}const f=new Ux(u,l,r.shape.length,o.shape.length,h,[d,1],!1),g=e.runWebGLProgram(f,[o,r,a],o.dtype),m=fe({inputs:{x:g},backend:e,attrs:{shape:i}});return e.disposeIntermediateTensorInfo(g),m}},A7={kernelName:jl,backendName:"webgl",kernelFunc:function _7(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{numOrSizeSplits:o,axis:a}=s,i=je(a,r.shape)[0],l=zg(r,o,i),c=new Array(r.shape.length).fill(0),h=r.shape.slice();return l.map(d=>{const p=[...h];p[i]=d;const f=Hi({inputs:{x:r},backend:e,attrs:{begin:c,size:p}});return c[i]+=d,f})}},Lk="return sqrt(x);",R7=ot({opSnippet:Lk,packedOpSnippet:Lk,cpuKernelImpl:YK}),D7={kernelName:Ja,backendName:"webgl",kernelFunc:R7},F7=ot({opSnippet:"return x * x;"}),O7={kernelName:vh,backendName:"webgl",kernelFunc:F7},Pk="return (a - b) * (a - b);",L7=Cn({opSnippet:Pk,packedOpSnippet:Pk}),P7={kernelName:ei,backendName:"webgl",kernelFunc:L7},z7={kernelName:ql,backendName:"webgl",kernelFunc:function M7(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t;if("string"!==r.dtype)throw new Error("Input must be of datatype string");const a=Ir(e.readSync(r.dataId)),i=QK(a,"string",s);return e.makeTensorInfo(r.shape,"string",i)}},V7={kernelName:oi,backendName:"webgl",kernelFunc:function B7({inputs:n,attrs:t,backend:e}){const{x:s}=n,o=new ir(s.shape,gs+`\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `);return e.runWebGLProgram(o,[s],s.dtype)}};class W7{constructor(t,e,s){this.variableNames=["x"],this.outputShape=s;const r=s.length,o=yt(s.length),a=yt(s.length);let i="";if(1===r)i="coords * strides + begin";else{let l=0;i=s.map((u,c)=>(l++,1===s.length?`coords * strides[${c}] + begin[${c}]`:`coords[${l-1}] * strides[${c}] + begin[${c}]`)).join(",")}this.userCode=`\n      ${o} begin = ${o}(${t});\n      ${o} strides = ${o}(${e});\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${i}));\n      }\n    `}}const G7={kernelName:Sh,backendName:"webgl",kernelFunc:function U7(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{begin:o,end:a,strides:i,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:d}=s,{finalShapeSparse:p,finalShape:f,isIdentity:g,sliceDim0:m,isSimpleSlice:y,begin:x,end:b,strides:w}=rm(r.shape,o,a,i,l,u,c,h,d);let S;if(g)S=fe({inputs:{x:r},backend:e,attrs:{shape:f}});else if(m||y){C(r.shape.length>=1,()=>`Input must have rank at least 1, got: ${r.shape.length}`);const k=tm(x,b,w),T=Hi({inputs:{x:r},backend:e,attrs:{begin:x,size:k}});S=fe({inputs:{x:T},backend:e,attrs:{shape:f}}),e.disposeIntermediateTensorInfo(T)}else if(e.shouldExecuteOnCPU([r])){const T=e.readSync(r.dataId),$=Ge(r.shape,r.dtype,T),R=JK(p,$,w,x);S=e.makeTensorInfo(f,r.dtype,R.values)}else{const T=new W7(x,w,p);S=e.runWebGLProgram(T,[r],r.dtype)}const N=fe({inputs:{x:S},backend:e,attrs:{shape:f}});return e.disposeIntermediateTensorInfo(S),N}},j7={kernelName:Ch,backendName:"webgl",kernelFunc:function H7(n){const{inputs:t,backend:e,attrs:s}=n,{separator:r,nGramWidths:o,leftPad:a,rightPad:i,padWidth:l,preserveShortSequences:u}=s,{data:c,dataSplits:h}=t,d=e.readSync(c.dataId),p=e.readSync(h.dataId),[f,g]=eq(d,p,r,o,a,i,l,u);return[e.makeTensorInfo([f.length],"string",f),e.makeTensorInfo(h.shape,"int32",g)]}},q7={kernelName:Nh,backendName:"webgl",kernelFunc:function K7(n){const{inputs:t,backend:e,attrs:s}=n,{skipEmpty:r}=s,{input:o,delimiter:a}=t;if("string"!==o.dtype)throw new Error("Input must be of datatype string");if(1!==o.shape.length)throw new Error(`Input must be a vector, got shape: ${o.shape}`);if(0!==a.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${a.shape}`);const i=e.readSync(o.dataId),l=e.readSync(a.dataId)[0],[u,c,h]=tq(i,l,r),d=c.length;return[e.makeTensorInfo([d,2],"int32",u),e.makeTensorInfo([d],"string",c),e.makeTensorInfo([2],"int32",new Int32Array(h))]}},Z7={kernelName:Ih,backendName:"webgl",kernelFunc:function X7(n){const{inputs:t,backend:e,attrs:s}=n,{numBuckets:r}=s,{input:o}=t;if("string"!==o.dtype)throw new Error("Input must be of datatype string");if(r<=0)throw new Error("Number of buckets must be at least 1");const a=e.readSync(o.dataId),i=nq(a,r);return e.makeTensorInfo(o.shape,"int32",i)}},Y7=ot({opSnippet:"return tan(x);"}),Q7={kernelName:ni,backendName:"webgl",kernelFunc:Y7},J7=ot({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"}),e9={kernelName:si,backendName:"webgl",kernelFunc:J7},n9={kernelName:fh,backendName:"webgl",kernelFunc:function t9(n){const{inputs:t,backend:e}=n,{tensor:r,indices:o,updates:a}=t,{sliceRank:i,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=Br(0,o,r.shape),d=[h/u,u];if(0===h)return e.makeTensorInfo(r.shape,o.dtype);const p=fe({inputs:{x:o},backend:e,attrs:{shape:[l,i]}}),f=fe({inputs:{x:a},backend:e,attrs:{shape:[l,u]}}),g=fe({inputs:{x:r},backend:e,attrs:{shape:d}}),m=new Ux(l,i,p.shape.length,f.shape.length,c,d,!1,!0),y=e.runWebGLProgram(m,[f,p,g],g.dtype),x=fe({inputs:{x:y},backend:e,attrs:{shape:r.shape}});return e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(y),x}};class s9{constructor(t,e){this.variableNames=["A"];const s=new Array(t.length);for(let a=0;a<s.length;a++)s[a]=t[a]*e[a];this.outputShape=s,this.rank=s.length;const r=yt(this.rank),o=function r9(n){const t=n.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${n[0]})`;const e=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],s=[];for(let r=0;r<n.length;r++)s.push(`imod(${e[r]}, ${n[r]})`);return s.join()}(t);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        setOutput(getA(${o}));\n      }\n    `}}function Mk(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{reps:o}=s;if("string"===r.dtype||r.shape.length>5){const l=e.readSync(r.dataId),u="string"===r.dtype?l.map(d=>pr(d)):l,c=Ge(r.shape,r.dtype,u),h=rq(c,o);return e.makeTensorInfo(h.shape,h.dtype,h.values)}const a=new s9(r.shape,o);return e.runWebGLProgram(a,[r],r.dtype)}const o9={kernelName:ri,backendName:"webgl",kernelFunc:Mk};class a9{constructor(t){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=t,this.userCode="\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     "}}class i9{constructor(t){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=t,this.userCode="\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     "}}function ia(n,t){null!==t&&n.disposeIntermediateTensorInfo(t)}function zk(n){let t=1;for(;t<n;)t*=2;return t}const u9={kernelName:kh,backendName:"webgl",kernelFunc:function l9(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{k:o,sorted:a}=s,i=B().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),l=B().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),u=r.shape,c=u[u.length-1];if(e.shouldExecuteOnCPU([r])||c<i||o>l){const R=e.readSync(r.dataId),[M,V]=oq(R,u,r.dtype,o,a);return[e.makeTensorInfo(M.shape,M.dtype,M.values),e.makeTensorInfo(V.shape,V.dtype,V.values)]}if(0===o)return u[u.length-1]=0,[e.makeTensorInfo(u,r.dtype,[]),e.makeTensorInfo(u,"int32",[])];if(1===c)return[r,pc({attrs:{shape:u,dtype:"int32",value:0},backend:e})];const h=e.texData.get(r.dataId),d=null!==h&&h.isPacked,p=d?e.unpackTensor(r):r,g=q(u)/c,m=fe({inputs:{x:p},attrs:{shape:[g,c]},backend:e});d&&ia(e,p);const y=zk(o),x=zk(c);let b=null;const w=()=>null===b?[m,m]:[m,b],S=(R,M,V)=>{const W=w(),H=new a9(V),Y=b;b=e.runWebGLProgram(H,W,"int32",[[c],[null===b?1:0],[Number.NEGATIVE_INFINITY],[R],[M]]),ia(e,Y)};for(let R=1;R<y;R*=2){const M=2*R;for(let V=R;V>=1;V/=2)S(M,V,[g,x])}for(let R=x;R>y;R/=2){const M=w(),V=new i9([g,R/2]),K=b;b=e.runWebGLProgram(V,M,"int32",[[c],[null===b?1:0],[y]]),ia(e,K);const U=y/2,Y=2*U;for(let X=U;X>=1;X/=2)S(Y,X,b.shape)}let N=b;b=Hi({inputs:{x:b},backend:e,attrs:{begin:0,size:[g,o]}}),ia(e,N);let k=Tk({inputs:{x:m,indices:b},backend:e,attrs:{axis:1,batchDims:1}});ia(e,m);const T=u.slice(0,-1);T.push(o),N=b,b=fe({inputs:{x:b},attrs:{shape:T},backend:e}),ia(e,N);const $=k;return k=fe({inputs:{x:k},attrs:{shape:T},backend:e}),ia(e,$),[k,b]}};class c9{constructor(t,e,s,r,o,a){this.variableNames=["Image","Transforms"],this.outputShape=a;const i="nearest"===s?1:2;let l;switch(r){case"constant":default:l=1;break;case"reflect":l=2;break;case"wrap":l=3;break;case"nearest":l=4}this.userCode=`\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${l} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${l} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${l} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${t} && 0 <= coordX && coordX < ${e}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${o});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${o});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${e}));\n                float mapY = mapCoord(inY, float(${t}));\n\n                if (${i} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `}}const d9={kernelName:Th,backendName:"webgl",kernelFunc:function h9(n){const{inputs:t,backend:e,attrs:s}=n,{image:r,transforms:o}=t,{interpolation:a,fillMode:i,fillValue:l,outputShape:u}=s,[c,h,d,p]=r.shape,[f,g]=u??[h,d],y=new c9(h,d,a,i,l,[c,f,g,p]);return e.runWebGLProgram(y,[r,o],"float32")}},f9={kernelName:$h,backendName:"webgl",kernelFunc:function p9(n){const{inputs:t,attrs:e,backend:s}=n,{axis:r}=e,{x:o}=t;Mi(o,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const a=s.readSync(o.dataId),{outputValues:i,outputShape:l,indices:u}=aq(a,r,o.shape,o.dtype);return[s.makeTensorInfo(l,o.dtype,i),s.makeTensorInfo([u.length],"int32",u)]}},g9={kernelName:Xl,backendName:"webgl",kernelFunc:function m9(n){const{inputs:t,backend:e,attrs:s}=n,{value:r}=t;let{axis:o}=s;o<0&&(o+=r.shape.length);const a=r,i=a.shape.length,l=r.shape[o],u=new Array(i-1);let c=0;for(let g=0;g<i;g++)g!==o&&(u[c++]=a.shape[g]);const h=[],d=new Array(i).fill(0),p=a.shape.slice();p[o]=1;const f=new Array(l);for(let g=0;g<f.length;g++){d[o]=g;const m=Hi({inputs:{x:a},backend:e,attrs:{begin:d,size:p}}),y=fe({inputs:{x:m},backend:e,attrs:{shape:u}});f[g]=y,h.push(m)}return h.forEach(g=>e.disposeIntermediateTensorInfo(g)),f}};class y9{constructor(t,e){this.variableNames=["x","segmentIds"];const s=t.windowSize,r=t.batchSize,o=t.inSize,a=t.numSegments,i=a*Math.ceil(o/s);this.outputShape=[r,i];const c=4*Math.floor(s/4),h=s%4,d="\n        sumValue += dot(values, segFilter);\n    ";let p="";o%s>0&&(p=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return initializationValue;\n        }\n      `);let f="";o%s>0&&(f=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${p}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${f}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${a})) * float(${s}));\n        int currentSeg = int(mod(float(outIdx), float(${a})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${c}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${d}\n        }\n\n        int inIdx = inOffset + ${c};\n        if (${1===h}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${d}\n        } else if (${2===h}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${d}\n        } else if (${3===h}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${d}\n        }\n        setOutput(sumValue);\n      }\n    `}}const w9=[Qq,e6,s6,a6,l6,h6,p6,m6,b6,v6,N6,T6,_6,F6,P6,z6,V6,H6,K6,X6,Q6,r5,a5,c5,d5,y5,b5,C5,Oq,k5,A5,O5,V5,G5,j5,q5,Z5,eX,nX,rX,aX,lX,cX,pX,mX,bX,vX,NX,TX,EX,AX,FX,LX,zX,VX,WX,GX,jX,qX,ZX,QX,eZ,sZ,aZ,lZ,hZ,fZ,gZ,xZ,Fq,wZ,E5,SZ,NZ,kZ,Pq,$Z,_Z,RZ,OZ,MZ,BZ,WZ,GZ,KZ,XZ,YZ,t8,s8,o8,u8,h8,p8,m8,y8,v8,N8,$8,F8,Bq,M8,V8,G8,K8,p5,X8,Y8,J8,nY,aY,zq,lY,cY,dY,fY,mY,f5,_8,yY,wY,CY,Wq,TY,_Y,FY,PY,VY,UY,HY,KY,ZY,JY,n7,o7,l7,c7,f7,g7,s5,R8,x7,b7,v7,C7,I7,T7,E7,A7,D7,O7,P7,z7,V7,G7,j7,q7,Z7,A8,Xq,Q7,e9,n9,o9,u9,d9,Zq,f9,g9,{kernelName:Zl,backendName:"webgl",kernelFunc:function x9(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,segmentIds:o}=t,{numSegments:a}=s,i=r.shape.length,l=[];let u=0;const c=_t([u],i);let h=r;null!=c&&(h=Ln({inputs:{x:r},backend:e,attrs:{perm:c}}),l.push(h),u=Bt(1,i)[0]);const d=av(h.shape,u,a),p=q([h.shape[u]]),f=fe({inputs:{x:h},backend:e,attrs:{shape:[-1,p]}});l.push(f);const g=Oh(r.dtype),m=(w,S,N,k,T)=>{const $=w.shape[0],R=w.shape[1],M=ov(R,T),W=new y9({windowSize:M,inSize:R,batchSize:$,numSegments:T},S),H=e.compileAndRun(W,[w,N],k);if(l.push(H),H.shape[1]===T)return H;const K=Ok({backend:e,attrs:{start:0,stop:T,step:1,dtype:"float32"}}),U=Mk({inputs:{x:K},backend:e,attrs:{reps:[R/M]}});return l.push(K),l.push(U),m(H,S,U,k,T)},x=fe({inputs:{x:m(f,"unsortedSegmentSum",o,g,a)},backend:e,attrs:{shape:d}});let b=x;if(null!=c){l.push(x);const w=Ur(c);b=Ln({inputs:{x:b},backend:e,attrs:{perm:w}})}return l.forEach(w=>e.disposeIntermediateTensorInfo(w)),b}},Z8];for(const n of w9)Rh(n);const S9={"tfjs-core":A0,"tfjs-backend-cpu":SN,"tfjs-backend-webgl":HI,"tfjs-data":SC,"tfjs-layers":qd,"tfjs-converter":nC,tfjs:"4.13.0"};class Bk{constructor(t){(0,lr.Z)(this,"alphabet",void 0),(0,lr.Z)(this,"characters",void 0),(0,lr.Z)(this,"isWarmedUp",void 0),(0,lr.Z)(this,"_model",void 0),t?(this.alphabet=" abcdefghijklmnopqrstuvwxyz",this.characters=this.alphabet.toUpperCase()):this.characters="0123456789",this.isWarmedUp=this.initModel(t)}initModel(t){return new Promise(e=>{r0("wasm").then(()=>{this.loadModel(t).then().then(()=>{console.info("Backend running on:",o0()),e()})})})}loadModel(t){return console.time("Load model"),t?(console.log("load letter",qp),Xd("content/classifier/letterclassifier/model.json").then(e=>{this._model=e,console.timeEnd("Load model")})):(console.log("load digit"),Xd("https://storage.googleapis.com/tfjs-models/tfjs/iris_v1/model.json").then(e=>e.summary()),Xd("content/classifier/digitclassifier/model.json").then(e=>{this._model=e,console.timeEnd("Load model")}))}warmUp(){console.time("Warmup"),this._model.predict(Tu([1,28,28,1])).as1D().dataSync(),console.timeEnd("Warmup")}preprocessImage(t){const o=t.width>t.height,a=Math.round((Math.max(t.width,t.height)-Math.min(t.width,t.height))/2),i=o?[[a,a],[0,0],[0,0]]:[[0,0],[a,a],[0,0]];return z(()=>{let l=Yf(t,1).pad(i,255);return l=ds.resizeBilinear(l,[24,24]).pad([[2,2],[2,2],[0,0]],255),l=_e(1).sub(l.toFloat().div(_e(255))),l.expandDims(0)})}predict(t){if(!this._model)return console.warn("Model not loaded yet!");const e=this.preprocessImage(t),s=this._model.predict(e).as1D(),r=s.argMax().dataSync()[0],o=s.max().dataSync()[0];return[this.characters[r],o]}}function pn(n){const t=cv.boundingRect(n);return{w:t.width,h:t.height}}function Ut(n){const t=cv.boundingRect(n);return{x:t.x,y:t.y}}function Vk(n,t){const e=t.qcm_epsilon*cv.arcLength(n,!0),s=new cv.Mat;let r;cv.approxPolyDP(n,s,e,!0);const o=pn(s);if(o.w>=t.qcm_min_width_shape&&o.h>=t.qcm_min_height_shape){const a=s.rows;if(1===a)r="LIGNE";else if(3===a)r="TRIANGLE";else if(4===a){const i=o.w/o.h;r=i>=.95&&i<=1.05?"CARRE":"RECTANGLE"}else r=void 0}return{nom:r,forme:s}}function Wk(n,t){let e=Ut(n),s=Ut(t);return e.y<s.y?-1:e.y>s.y?1:e.x-s.x}function $9(n,t){let e=Ut(n),s=Ut(t);return e.x-s.x}function Uk(n,t){let e=Ut(n),s=Ut(t),r=pn(n),o=pn(t);return(s.x>=e.x&&s.x<=e.x+r.w||s.x+o.w>=e.x&&s.x+o.w<=e.x+r.w)&&(s.y>=e.y&&s.y<=e.y+r.h||s.y+o.h>=e.y&&s.y+o.h<=e.y+r.h)}function Gk(n,t){let e=t[n],s=!1;return t.forEach((r,o)=>{n<o&&function E9(n,t){return Uk(n,t)||Uk(t,n)}(e,r)&&(s=!0)}),s}function Hk(n,t){const e=function T9(n,t=[],e){const s=new cv.Mat;cv.threshold(n,s,245,255,cv.THRESH_BINARY);let r=new cv.MatVector,o=new cv.Mat;cv.findContours(s,r,o,cv.RETR_TREE,cv.CHAIN_APPROX_NONE);const a=[];for(let c=0;c<r.size();++c){const d=Vk(r.get(c),e);t.includes(d.nom)&&a.push(d.forme)}a.sort(Wk);const i=[],l=[],u=[];return a.forEach(c=>{0===Ut(c).x&&0===Ut(c).y||(100*pn(c).w/pn(n).w+100*pn(c).h/pn(n).h)/2>80?l.push(c):u.push(c)}),u.forEach((c,h)=>{Gk(h,u)?l.push(c):i.push(c)}),l.forEach(c=>{c.delete()}),i}(n,["CARRE","RECTANGLE"],t),s=[],r=[];return e.forEach(o=>{const a=pn(o),i=Ut(o);s.push(o),r.push(Vp(n,i,a))}),{cases:s,img_cases:r}}function Vp(n,t,e){let s=new cv.Mat,r=t.x,o=t.y,a=e.w,i=e.h;r<0&&(r=0),o<0&&(o=0),r+a>n.size().width&&(a=n.size().width-r),i+o>n.size().height&&(i=n.size().height-o);const l=new cv.Rect(r,o,a,i);return a<=0||i<=0?n:(s=n.roi(l),s)}function jk(n,t,e=new cv.Scalar(255,0,0,128),s=2){return t.forEach(r=>{const o=Ut(r),a=pn(r);let i=new cv.Point(o.x,o.y),l=new cv.Point(o.x+a.w,o.y+a.h);cv.rectangle(n,i,l,e,s,0)}),n}function Kk(n){return 1-cv.countNonZero(n)/(n.rows*n.cols)}var qk=P(2384),Xk=P(2013),Gx=P(4036),F9=P(5198);let fc,Ki,la,Jx,eb;class O9{constructor(t){(0,lr.Z)(this,"sqliteWorkerport",void 0),(0,lr.Z)(this,"ready",void 0),(0,lr.Z)(this,"subjects",new Map),(0,lr.Z)(this,"onmessage",s=>{const r=s.data;switch(r.msg){case"getFirstNonAlignImage":{const o=new TextDecoder("utf-8"),a=new Uint8Array(r.payload.value);r.payload.value=o.decode(a),this.subjects.get(r.uid)?.next(r.payload),this.subjects.get(r.uid)?.complete();break}case"getFirstAlignImage":{const o=new TextDecoder("utf-8"),a=new Uint8Array(r.payload.value);r.payload.value=o.decode(a),this.subjects.get(r.uid)?.next(r.payload),this.subjects.get(r.uid)?.complete();break}case"getFirstTemplate":{const o=new TextDecoder("utf-8"),a=new Uint8Array(r.payload.value);r.payload.value=o.decode(a),this.subjects.get(r.uid)?.next(r.payload),this.subjects.get(r.uid)?.complete();break}default:this.subjects.get(r.uid)?.next(r.payload),this.subjects.get(r.uid)?.complete()}}),(0,lr.Z)(this,"onerror",s=>{this.subjects.has(s.uid)&&(console.log("get error uid"),this.subjects.get(s.uid)?.error(s)),console.log(`error on service work: ${JSON.stringify(s)}`)}),this.sqliteWorkerport=t;const e=new Xk.x;this.subjects.set("0",e),this.ready=new Promise((s,r)=>{this.subjects.get("0")?.asObservable().subscribe(()=>{s()},()=>r())})}_dispatch(t,e,s){const r=(0,F9.Z)();this.ready.then(()=>{s?this.sqliteWorkerport.postMessage({msg:t,uid:r,payload:e},s):this.sqliteWorkerport.postMessage({msg:t,uid:r,payload:e})});const o=new Xk.x;return this.subjects.set(r,o),this.ready=new Promise((a,i)=>{this.subjects.get(r)?.asObservable().subscribe(()=>{a()},()=>i())}),o.asObservable()}getFirstNonAlignImage(t,e){return(0,Gx.z)(this._dispatch("getFirstNonAlignImage",{examId:t,pageInscan:e}))}getFirstAlignImage(t,e){return(0,Gx.z)(this._dispatch("getFirstAlignImage",{examId:t,pageInscan:e}))}getFirstTemplate(t,e){return(0,Gx.z)(this._dispatch("getFirstTemplate",{examId:t,pageInscan:e}))}}function Zk(n,t,e){return Hx.apply(this,arguments)}function Hx(){return(Hx=(0,O.Z)(function*(n,t,e){return e?(void 0===la&&(la=new qk.z),yield la.getFirstTemplate(t,n)):yield Ki.getFirstTemplate(t,n)})).apply(this,arguments)}function Yk(n,t,e,s){return jx.apply(this,arguments)}function jx(){return(jx=(0,O.Z)(function*(n,t,e,s){return s?(void 0===la&&(la=new qk.z),n?yield la.getFirstAlignImage(e,t):yield la.getFirstNonAlignImage(e,t)):n?yield Ki.getFirstAlignImage(e,t):yield Ki.getFirstNonAlignImage(e,t)})).apply(this,arguments)}function L9(n,t){return"object"==typeof t&&null!==t&&"Map"===t.dataType?new Map(t.value):t}function Kx(n){return qx.apply(this,arguments)}function qx(){return(qx=(0,O.Z)(function*(n){const t=JSON.parse(n.value,L9),s=yield(yield fetch(t.pages)).blob(),r=yield createImageBitmap(s),a=new OffscreenCanvas(r.width,r.height).getContext("2d");return a.drawImage(r,0,0),a.getImageData(0,0,r.width,r.height)})).apply(this,arguments)}function ua(n,t,e){let s=t.width*n.width*e/1e5,r=t.height*n.height*e/1e5,o=t.xInit*n.width/1e5-(t.width*n.width*e/1e5-t.width*n.width/1e5)/2;o<0&&(s+=o,o=0);let a=t.yInit*n.height/1e5-(t.height*n.height*e/1e5-t.height*n.height/1e5)/2;a<0&&(r+=a,a=0);let i=new cv.Rect(o,a,s,r),l=new cv.Mat,u=cv.matFromImageData(n);return l=nb(u,i),u.delete(),l}function Xx(){return(Xx=(0,O.Z)(function*(n){const t=n.payload;let e;if(e=t.template?yield Zk(t.page,t.examId,t.indexDb):yield Yk(t.align,t.page,t.examId,t.indexDb),void 0!==e){const r=ua(yield Kx(e),t.z,t.factor),a={image:_r(r).data.buffer,page:t.page,width:r.size().width,height:r.size().height};fc.target.postMessage({msg:n.msg,payload:a,uid:n.uid},[a.image]),r.delete()}})).apply(this,arguments)}function Zx(){return(Zx=(0,O.Z)(function*(n){const t=n.payload;if(function z9(n){return"pagesToAnalyze"in n}(t)){const e=[],s=[],r=new Map;for(let o of t.pagesToAnalyze){console.time("analysePage"),console.timeLog("analysePage","before getScan");const a=yield Yk(t.align,o,t.examId,t.indexDb);if(console.timeLog("analysePage","after getScan"),void 0!==a){console.timeLog("analysePage","before loadImage");const i=yield Kx(a);console.timeLog("analysePage","after loadImage");let l,u,c,h=0;console.timeLog("analysePage","before cropZone"),t.nameZone&&(l=ua(i,t.nameZone,t.factor),h=t.nameZone.pageNumber),t.firstnameZone&&(u=ua(i,t.firstnameZone,t.factor),h=t.firstnameZone.pageNumber),t.ineZone&&(c=ua(i,t.ineZone,t.factor),h=t.ineZone.pageNumber),console.timeLog("analysePage","after cropZone");const d={page:o-h,resultPrediction:[]};let p,f,g;if(l&&(p=_r(l).data.buffer,d.nameZoneW=l.size().width,d.nameZoneH=l.size().height,p&&e.push(p)),u&&(f=_r(u).data.buffer,d.firstnameZoneW=u.size().width,d.firstnameZoneH=u.size().height,f&&e.push(f)),c&&(g=_r(c).data.buffer,d.ineZoneW=c.size().width,d.ineZoneH=c.size().height,g&&e.push(g)),d.nameZone=p,d.firstnameZone=f,d.ineZone=g,t.assist)try{console.timeLog("analysePage","before template load");const m=yield Zk(t.pageTemplate,t.examId,t.indexDb);if(console.timeLog("analysePage","after template load"),void 0!==m){console.timeLog("analysePage","before template image load");const y=yield Kx(m);let x,b,w,S,N,k;if(console.timeLog("analysePage","after template image load"),console.timeLog("analysePage","before cropZone template"),t.nameZone&&(x=ua(y,t.nameZone,t.factor)),t.firstnameZone&&(b=ua(y,t.firstnameZone,t.factor)),t.ineZone&&(w=ua(y,t.ineZone,t.factor)),console.timeLog("analysePage","after cropZone template"),console.timeLog("analysePage","before doPredidction4zone name"),void 0!==l&&void 0!==x&&(S=yield Qx(!0,l,x,t.preferences,t.looking4missing,t.removeHorizontal,t.debug),x.delete(),S.debug)){const T=_r(S.debug).data.buffer;T&&(e.push(T),d.nameZoneDebug=T),S.debug.delete()}if(console.timeLog("analysePage","after doPredidction4zone name"),console.timeLog("analysePage","before doPredidction4zone firstname"),void 0!==u&&void 0!==b&&(N=yield Qx(!0,u,b,t.preferences,t.looking4missing,t.removeHorizontal,t.debug),b.delete(),N.debug)){const T=_r(N.debug).data.buffer;T&&(e.push(T),d.firstnameZoneDebug=T),N.debug.delete()}if(console.timeLog("analysePage","after doPredidction4zone firstname"),console.timeLog("analysePage","before doPredidction4zone ine"),void 0!==c&&void 0!==w&&(k=yield Qx(!1,c,w,t.preferences,t.looking4missing,t.removeHorizontal,t.debug),w.delete(),k.debug)){const T=_r(k.debug).data.buffer;T&&(e.push(T),d.ineZoneDebug=T),k.debug.delete()}if(console.timeLog("analysePage","after doPredidction4zone ine"),console.timeLog("analysePage","before computescore"),S?.solution?.length>0&&N?.solution?.length>0){const T=S.solution.length,$=N.solution.length,R=t.candidates.filter(W=>Math.abs(T-W.name.length)<=2&&Math.abs($-W.firstname.length)<=2);r.set(d.page,new Map),R.forEach(W=>{const H={...W},K=Math.abs(T-W.name.length)+Math.abs($-W.firstname.length);H.score=1e3/Math.pow(2,K),H.proba=Qk(H,S,N,k),r.get(d.page)?.set(H.id,H)});const M=Array.from(r.get(d.page).values()).sort((W,H)=>H.proba*H.score-W.proba*W.score);let V=[];V=M.length>2?[M[0],M[1],M[2]]:M,d.resultPrediction=V}else if(S?.solution?.length>0){const T=S.solution.length,$=t.candidates.filter(V=>Math.abs(T-V.name.length)<=2);r.set(d.page,new Map),$.forEach(V=>{const W={...V},H=Math.abs(T-V.name.length);W.score=1e3/Math.pow(2,H),W.proba=Qk(W,S,N,k),r.get(d.page)?.set(W.id,W)});const R=Array.from(r.get(d.page).values()).sort((V,W)=>W.proba*W.score-V.proba*V.score);let M=[];M=R.length>2?[R[0],R[1],R[2]]:R,d.resultPrediction=M}console.timeLog("analysePage","after computescore")}}catch(m){console.error("could not perform name analysis",m);continue}s.push(d),l?.delete(),u?.delete(),c?.delete()}console.timeEnd("analysePage")}console.error(JSON.stringify(fc)),fc.target.postMessage({msg:n.msg,payload:s,uid:n.uid},e)}})).apply(this,arguments)}function Yx(n,t,e){let s=0;for(let i=0;i<t.length;i++)n.substring(i,i+1).toLowerCase()===t[i][0].toLowerCase()?s+=t[i][1]:s+=e?(1-t[i][1])/35:(1-t[i][1])/9;t>0&&(s/=t.length);const r=n.trim(),o=function K9(n,t){let e=new Array(n.length+1);for(let s=0;s<=n.length;s++)e[s]=new Array(t.length+1);for(let s=0;s<=n.length;s++)e[s][0]=s;for(let s=0;s<=t.length;s++)e[0][s]=s;for(let s=1;s<=n.length;s++)for(let r=1;r<=t.length;r++)e[s][r]=n[s-1]===t[r-1]?e[s-1][r-1]:Math.min(e[s-1][r],e[s][r-1],e[s-1][r-1])+1;return e[n.length][t.length]}(r,t.map(i=>i[0]).join(""));return s-=s*o/Math.max(t.map(i=>i[0]).join("").length,r.length),s}function Qk(n,t,e,s){let r=0,o=0,a=0,i=0,l=0;return t?.solution?.length>0&&(r=Yx(n.name,t.solution,!0),i+=1,l+=r),e?.solution?.length>0&&(o=Yx(n.firstname,e.solution,!0),i+=1,l+=o),s?.solution?.length>0&&(a=Yx(n.ine,s.solution,!1),i+=1,l+=a),i>0?l/i:0}function Qx(n,t,e,s,r,o,a){let i=new cv.Mat;cv.cvtColor(e,i,cv.COLOR_RGBA2GRAY,0);const l=function W9(n,t){const e=function k9(n,t=[],e){const s=new cv.Mat;cv.threshold(n,s,248,255,cv.THRESH_BINARY);let r=new cv.MatVector,o=new cv.Mat;cv.findContours(s,r,o,cv.RETR_TREE,cv.CHAIN_APPROX_NONE);const a=[];for(let c=0;c<r.size();++c){const d=Vk(r.get(c),e);t.includes(d.nom)&&a.push(d.forme)}a.sort(Wk);const i=[],l=[],u=[];return a.forEach(c=>{0===Ut(c).x&&0===Ut(c).y||(100*pn(c).w/pn(n).w+100*pn(c).h/pn(n).h)/2>80?l.push(c):u.push(c)}),u.forEach((c,h)=>{Gk(h,u)?l.push(c):i.push(c)}),l.forEach(c=>{c.delete()}),i}(n,["CARRE","RECTANGLE"],t),s=[],r=[];return e.forEach(o=>{const a=pn(o),i=Ut(o);s.push(o),r.push(Vp(n,i,a))}),{cases:s,img_cases:r}}(i,s),u=l.cases.sort($9),c=[],h=[];for(let m=0;m<u.length;m++){const y=u[m],x=pn(y);h.push(x);const b=Ut(y);c.push(b)}for(let m=0;m<l.cases.length;m++)l.cases[m].delete();for(let m=0;m<l.img_cases.length;m++)l.img_cases[m].delete();const d=c.map(m=>m.x);let p=[];for(let m=0;m<c.length-1;m++)p.push(d[m+1]-d[m]);let f=p.reduce((m,y)=>m+y,0)/p.length;p=p.filter(m=>m<1.1*f),f=p.reduce((m,y)=>m+y,0)/p.length;const g={w:h.map(m=>m.w).reduce((m,y)=>m+y,0)/h.length,h:h.map(m=>m.h).reduce((m,y)=>m+y,0)/h.length};return i.delete(),function j9(n,t,e,s,r,o,a,i){return tb.apply(this,arguments)}(t,r,o,n,s,g,f,a)}function _r(n){const t=new cv.Mat,e=n.type()%8,s=e<=cv.CV_8S?1:e<=cv.CV_32S?1/256:255,r=e===cv.CV_8S||e===cv.CV_16S?128:0;switch(n.convertTo(t,cv.CV_8U,s,r),t.type()){case cv.CV_8UC1:cv.cvtColor(t,t,cv.COLOR_GRAY2RGBA);break;case cv.CV_8UC3:cv.cvtColor(t,t,cv.COLOR_RGB2RGBA);break;case cv.CV_8UC4:break;default:throw new Error("Bad number of channels (Source image must have 1, 3 or 4 channels)")}const o=new ImageData(new Uint8ClampedArray(t.data),t.cols,t.rows);return t.delete(),o}function tb(){return(tb=(0,O.Z)(function*(n,t,e,s,r,o,a,i){const l=function H9(n){return n?(void 0===Jx&&(Jx=new Bk(n)),Jx):(void 0===eb&&(eb=new Bk(n)),eb)}(s);yield l.isWarmedUp;const u=function q9(n,t,e,s,r,o){const a=s.linelength,i=s.repairsize,l=s.dilatesize,u=s.morphsize,c=s.drawcontoursizeh,h=s.drawcontoursizev;let d=n.clone(),p=new cv.Mat;cv.cvtColor(n,p,cv.COLOR_BGR2GRAY,0);let f=new cv.Mat;cv.threshold(p,f,0,255,cv.THRESH_BINARY_INV+cv.THRESH_OTSU);const g=new cv.Point(-1,-1);if(t){let j=new cv.Mat,J=new cv.Size(1,a),ue=cv.getStructuringElement(cv.MORPH_RECT,J,g);cv.morphologyEx(f,j,cv.MORPH_OPEN,ue,g,2,cv.BORDER_CONSTANT,cv.morphologyDefaultBorderValue());let le=new cv.MatVector,pe=new cv.Mat;cv.findContours(j,le,pe,cv.RETR_EXTERNAL,cv.CHAIN_APPROX_SIMPLE);let xe=new cv.Scalar(255,255,255);cv.drawContours(d,le,-1,xe,h);let Ee=new cv.Mat,Re=new cv.Size(a,1),Pe=cv.getStructuringElement(cv.MORPH_RECT,Re,g),ze=new cv.Point(-1,-1);cv.morphologyEx(f,Ee,cv.MORPH_OPEN,Pe,ze,2,cv.BORDER_CONSTANT,cv.morphologyDefaultBorderValue());let Ze=new cv.MatVector,ct=new cv.Mat;cv.findContours(Ee,Ze,ct,cv.RETR_EXTERNAL,cv.CHAIN_APPROX_SIMPLE);let wt=new cv.Scalar(255,255,255);cv.drawContours(d,Ze,-1,wt,c),j.delete(),le.delete(),pe.delete(),ue.delete(),Ee.delete(),Ze.delete(),ct.delete(),Pe.delete()}let m=new cv.Size(i,i),y=cv.getStructuringElement(cv.MORPH_ELLIPSE,m,g),x=new cv.Mat,w=new cv.Mat.ones(n.rows,n.cols,cv.CV_8UC3);w.setTo(new cv.Scalar(255,255,255)),cv.cvtColor(w,w,cv.COLOR_BGR2GRAY,0);let S=new cv.Mat;cv.cvtColor(d,S,cv.COLOR_BGR2GRAY,0);let N=new cv.Mat;cv.subtract(w,S,N,x,-1);let k=new cv.Mat;cv.dilate(N,k,y,g,l,cv.BORDER_CONSTANT,cv.morphologyDefaultBorderValue());let T=new cv.Mat,$=new cv.Mat;cv.bitwise_and(k,f,T),cv.morphologyEx(T,$,cv.MORPH_CLOSE,y,g,u,cv.BORDER_CONSTANT,cv.morphologyDefaultBorderValue());let R=new cv.Mat;cv.bitwise_and($,f,R);let M=new cv.Mat;cv.subtract(w,R,M,x,-1);let V=new cv.MatVector,W=new cv.Mat,H=new cv.Mat;cv.adaptiveThreshold(M,H,255,cv.ADAPTIVE_THRESH_GAUSSIAN_C,cv.THRESH_BINARY,3,2),cv.findContours(H,V,W,cv.RETR_TREE,cv.CHAIN_APPROX_SIMPLE);const K=new Map;let U=[];for(let j=0;j<V.size();j++){let J=V.get(j),ue=cv.boundingRect(J);(ue.width>12||ue.height>12)&&U.push(ue)}U=U.filter(j=>Math.abs(j.width-r.w)/r.w<.8&&Math.abs(j.height-r.h)/r.h<.7),U.forEach(j=>{const J=j.width-r.w;J>0&&(j.x=j.x+J/2,j.width=r.w);const ue=j.height-r.h;ue>0&&(j.y=j.y+ue/2,j.height=r.h)});let Y=Jk(U),X=0;for(;null!==Y&&X<200;){U=U.filter(le=>le!==Y.toRemove1&&le!==Y.toRemove2);const j=Y.u,J=j.width-r.w;J>0&&(j.x=j.x+J/2,j.width=r.w);const ue=j.height-r.h;ue>0&&(j.y=j.y+ue/2,j.height=r.h),U.push(j),Y=Jk(U),X+=1}U.forEach(j=>{j.x=j.x-2,j.width=j.width+4,j.y=j.y-2,j.height=j.height+4}),U.sort((j,J)=>j.x<J.x?-1:1);const Q=[];if(U.length>2)for(let j=0;j<U.length-1;j++)U[j+1].x-U[j].x<1.5*o||U[j+1].x-U[j].x<2.5*o||Q.push(j+1);U=U.filter((j,J)=>!Q.includes(J));const re=[];if(e&&U.length>1){const j=r.w;let J=0,ue=0,le=800;const pe=[];for(let xe=0;xe<U.length-1;xe++)U[xe+1].x-U[xe].x>2*j&&pe.push(xe),U[xe].y<le&&(le=U[xe].y),U[xe].height>J&&(J=U[xe].height),U[xe].width>ue&&(ue=U[xe].width);pe.forEach(xe=>{let Re=new cv.Rect(U[xe].x+o,le,ue,J);re.push(Re)})}U=U.concat(re),U.sort((j,J)=>j.x<J.x?-1:1),U.forEach(j=>{let J=new cv.Scalar(0,0,0),ue=new cv.Point(j.x,j.y),le=new cv.Point(j.x+j.width,j.y+j.height),pe=new cv.Mat,xe=new cv.Mat,Ee=new cv.Mat,Re=new cv.Scalar(255,255,255,255);pe=nb(M,j);const Pe=r.w/r.h,ze=pe.size().width/pe.size().height;let Ze=new cv.Size(28,28);if(Pe<ze){let pt=Math.floor(26*Pe/ze);Ze=new cv.Size(26,pt+1)}else{let pt=Math.floor(26*ze/Pe);Ze=new cv.Size(pt+1,26)}const ct=(28-Ze.height)/2,wt=(28-Ze.width)/2;cv.resize(pe,xe,Ze,0,0,cv.INTER_AREA),cv.copyMakeBorder(xe,Ee,ct,ct,wt,wt,cv.BORDER_CONSTANT,Re),K.set(j,Ee),pe.delete(),xe.delete(),cv.rectangle(M,ue,le,J,2,cv.LINE_AA,0)}),p.delete(),f.delete(),H.delete(),y.delete(),x.delete(),w.delete(),S.delete(),N.delete(),k.delete(),d.delete(),T.delete(),$.delete(),R.delete(),V.delete(),W.delete();let ae=[...K];return ae.sort((j,J)=>j[0].x<J[0].x?-1:1),{letter:ae,invert_final:M}}(n,e,t,r,o,a),c=[];for(let h=0;h<u.letter.length;h++){let d=l.predict(_r(u.letter[h][1]));s&&("1"===d[0]&&(d[0]="i"),"0"===d[0]&&(d[0]="o"),"5"===d[0]&&(d[0]="s"),"3"===d[0]&&(d[0]="b"),"9"===d[0]&&(d[0]="g")),c.push(d)}for(let h=0;h<u.letter.length;h++)u.letter[h][1].delete();return i?{debug:u.invert_final,solution:c}:(u.invert_final.delete(),{solution:c})})).apply(this,arguments)}function nb(n,t,e){const s=n.size().width,r=n.size().height;return t.x<0&&(t.x=0),t.y<0&&(t.y=0),t.x+t.width>s&&(t.width=s-t.x),t.y+t.height>r&&(t.height=r-t.y),n.roi(t)}function X9(n,t){const e=Math.min(n.x,t.x),s=Math.min(n.y,t.y),r=Math.max(n.x+n.width,t.x+t.width),o=Math.max(n.y+n.height,t.y+t.height);return new cv.Rect(e,s,r-e,o-s)}function Z9(n,t){let e=t,s=n,r=n,o=t;n.x>t.x&&(e=n,s=t),n.y>t.y&&(r=t,o=n),n.right=n.x+n.width,t.right=t.x+t.width,n.bottom=n.y+n.height,t.bottom=t.y+t.height;let a=t,i=n,l=t,u=n;return n.right>t.right&&(a=n,i=t),n.bottom>t.bottom&&(l=n,u=t),e.x<s.right&&o.y>r.y+r.height?new cv.Rect(s.x,u.y,a.right-s.x,l.bottom-r.y):e.x>s.x+s.width+5||o.y>r.y+r.height?null:new cv.Rect(s.x,u.y,a.right-s.x,l.bottom-r.y)}function Jk(n){for(let t=0;t<n.length-1;t++){const e=n[t];for(let s=t+1;s<n.length;s++){const r=n[s];if(null!==Z9(e,r))return{u:X9(e,r),toRemove1:e,toRemove2:r}}}return null}addEventListener("message",n=>{switch(n.data.msg){case"hello":postMessage({msg:`worker response to ${n.data.msg}`,uid:n.data.uid});break;case"shareWorker":{const t=n.data.port;Ki=new O9(t),t.onmessage=Ki.onmessage,t.onerror=Ki.onerror;break}case"load":{fc=n;const t=self;t.Module={scriptUrl:"content/opencv/5/opencv.js",onRuntimeInitialized(){cv.then(s=>{cv=s,s.ready.then(()=>postMessage({msg:"opencvready",uid:n.data.uid}))})}};let e="";n.data.payload.fronturl&&(e=n.data.payload.fronturl),t.importScripts(t.Module.scriptUrl),t.importScripts(e+"content/tfjs/tf-core.es2017.min.js"),t.importScripts(e+"content/tfjs/dist/tf-backend-wasm.es2017.js"),tf.wasm.setWasmPaths(e+"content/tfjs/dist/");break}case"imageCrop":return function G9(n){let t=new cv.Rect(n.payload.x,n.payload.y,n.payload.width,n.payload.height),e=new cv.Mat;const s=new ImageData(new Uint8ClampedArray(n.payload.image),n.payload.imageWidth,n.payload.imageHeight);let r=cv.matFromImageData(s);e=nb(r,t);const o=_r(e).data.buffer;fc.target.postMessage({msg:n.msg,payload:o,uid:n.uid},[o]),e.delete(),r.delete()}(n.data);case"doPredictions":return function B9(n){(function V9(n){return Zx.apply(this,arguments)})(n).then(()=>{}).catch(t=>{console.error(t)})}(n.data);case"imageCropFromZone":return function P9(n){!function M9(n){Xx.apply(this,arguments)}(n)}(n.data);case"groupImagePerContoursLength":return function U9(n){0===n.payload.images.length&&postMessage({msg:n.msg,payload:[],uid:n.uid});const t=n.payload.images[n.payload.images.length-1].studentIndex+1,s=n.payload.nbrCluster,o=new cv.TermCriteria(cv.TermCriteria_EPS+cv.TermCriteria_MAX_ITER,1e3,.001),a=[];for(let p=0;p<t;p++){let f=0,g=0;const m=n.payload.images.length/t;for(let y=0;y<m;y++){const x=new ImageData(new Uint8ClampedArray(n.payload.images[p*m+y].image),n.payload.images[p*m+y].width,n.payload.images[p*m+y].height);let b=cv.matFromImageData(x);const w=new cv.Mat;cv.cvtColor(b,w,cv.COLOR_RGBA2GRAY);const S=new cv.Mat;cv.Canny(w,S,100,200,3);const $=new cv.MatVector,R=new cv.Mat;cv.findContours(S,$,R,cv.RETR_EXTERNAL,cv.CHAIN_APPROX_SIMPLE);for(let M=0;M<$.size();M++){const V=$.get(M),W=cv.arcLength(V,!0);W>3&&(f+=W,g+=1)}b.delete(),w.delete(),S.delete(),$.delete(),R.delete()}a.push(f),a.push(g)}const i=new cv.Mat,l=new cv.Mat,u=cv.matFromArray(a.length/2,2,cv.CV_32F,a);cv.kmeans(u,s,i,o,5,cv.KMEANS_PP_CENTERS,l);let c=[];for(let p=0;p<s;p++)c.push(l.data32F[2*p+1]);c.sort(function(p,f){return p-f});let h=new Map;for(let p=0;p<s;p++)h.set((l.data32F.indexOf(c[p])-1)/2,p);let d=[];for(let p=0;p<t;p++)d.push(h.get(i.data32S[p]));postMessage({msg:n.msg,payload:d,uid:n.uid}),i.delete(),l.delete(),u.delete()}(n.data);case"qcmresolution":return function N9(n){const t={solutions:[]};let e=cv.matFromImageData(n.payload.imageTemplate),s=new cv.Mat;cv.cvtColor(e,s,cv.COLOR_RGBA2GRAY,0);const r=Hk(s,n.payload.preference);n.payload.pages?.forEach((o,a)=>{let i=new cv.Mat,l=cv.matFromImageData(o.imageInput),u=new cv.Mat,c=new cv.Size(e.size().width,e.size().height);cv.resize(l,u,c,0,0,cv.INTER_AREA),cv.cvtColor(u,i,cv.COLOR_RGBA2GRAY,0);const h=Hk(i,n.payload.preference);let d;if(void 0!==h&&void 0!==h.cases&&h.cases.length>0){const m=function A9(n,t){const e=[];return n.cases.forEach(s=>{let o,r=500;if(t.cases.forEach(a=>{const i=function D9(n,t){const e=cv.boundingRect(n),s=cv.boundingRect(t);let r=e.x+e.width/2,o=e.y+e.height/2,a=s.x+s.width/2,i=s.y+s.height/2;return Math.sqrt((r-a)*(r-a)+(o-i)*(o-i))}(s,a);r>i&&i<25&&(r=i,o=a)}),void 0!==o){const a=Ut(s),i=Ut(o),l=pn(s),u=pn(o);e.push({x:a.x-i.x,y:a.y-i.y,deltaw:l.w-u.w,deltah:l.h-u.h})}}),function I9(n){if(n.length>0){const t=Math.min(...n.map(s=>Math.abs(s.deltaw)*Math.abs(s.deltaw)+Math.abs(s.deltah)*Math.abs(s.deltah)+Math.abs(s.x)+Math.abs(s.y))),e=n.filter(s=>Math.abs(s.deltaw)*Math.abs(s.deltaw)+Math.abs(s.deltah)*Math.abs(s.deltah)+Math.abs(s.x)+Math.abs(s.y)===t)[0];return{x:e.x,y:e.y}}return{x:0,y:0}}(e)}(h,r);d=function R9(n,t){let e=new cv.Mat;if(0!==t.x||0!==t.y){let s=cv.matFromArray(2,3,cv.CV_64FC1,[1,0,-t.x,0,1,-t.y]),r=new cv.Size(n.cols,n.rows);return cv.warpAffine(n,e,s,r,cv.INTER_LINEAR,cv.BORDER_CONSTANT,new cv.Scalar),e}return n}(u,m)}else d=u;let p=function _9(n,t,e,s){const r=[],o=[];let a=new Map;const i=new Map,l=new cv.Mat;cv.cvtColor(t,l,cv.COLOR_RGBA2GRAY,0);let u=new cv.Mat;cv.threshold(l,u,0,255,cv.THRESH_BINARY+cv.THRESH_OTSU);const c=new cv.Mat;cv.cvtColor(e,c,cv.COLOR_RGBA2GRAY,0);let h=new cv.Mat;return cv.threshold(c,h,0,255,cv.THRESH_BINARY+cv.THRESH_OTSU),n.cases.forEach((d,p)=>{const f=Kk(Vp(u,Ut(d),pn(d)));i.set(p,f)}),l.delete(),u.delete(),n.cases.forEach((d,p)=>{const f=Vp(h,Ut(d),pn(d)),m=Kk(f)-i.get(p);m>s.qcm_differences_avec_case_blanche?(a.set(p,{verdict:!0,prediction:m}),r.push(d)):(a.set(p,{verdict:!1,prediction:m}),o.push(d)),m>s.qcm_differences_avec_case_blanche&&m<1.15*s.qcm_differences_avec_case_blanche?cv.putText(e,""+m.toFixed(2),{x:Ut(d).x,y:Ut(d).y+10},cv.FONT_HERSHEY_COMPLEX,.5,new cv.Scalar(255,0,0,128),1):cv.putText(e,""+m.toFixed(2),{x:Ut(d).x,y:Ut(d).y+10},cv.FONT_HERSHEY_COMPLEX,.33,new cv.Scalar(255,0,0,128),1),f.delete()}),c.delete(),h.delete(),jk(e,r,new cv.Scalar(0,255,0,128),2),jk(e,o,new cv.Scalar(0,0,255,128),2),a}(r,e,d,n.payload.preference),f=function C9(n){const t=new cv.Mat,e=n.type()%8,s=e<=cv.CV_8S?1:e<=cv.CV_32S?1/256:255,r=e===cv.CV_8S||e===cv.CV_16S?128:0;switch(n.convertTo(t,cv.CV_8U,s,r),t.type()){case cv.CV_8UC1:cv.cvtColor(t,t,cv.COLOR_GRAY2RGBA);break;case cv.CV_8UC3:cv.cvtColor(t,t,cv.COLOR_RGB2RGBA);break;case cv.CV_8UC4:break;default:throw new Error("Bad number of channels (Source image must have 1, 3 or 4 channels)")}const o=new ImageData(new Uint8ClampedArray(t.data),t.cols,t.rows);return t.delete(),o}(d),g=[];p.forEach((m,y)=>{m.verdict&&g.push(String.fromCharCode(97+y))}),t.solutions?.push({imageSolution:f,numero:a,solution:g.join("&")}),i.delete(),u.delete(),l.delete(),d!==u&&d.delete(),h.cases.forEach(m=>m.delete()),h.img_cases.forEach(m=>m.delete())}),e.delete(),s.delete(),r.img_cases.forEach(o=>o.delete()),postMessage({msg:n.msg,payload:t,uid:n.uid})}(n.data)}})},186:he=>{he.exports=P;var De=null;try{De=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch{}function P(ee,_,ye){this.low=0|ee,this.high=0|_,this.unsigned=!!ye}function Fe(ee){return!0===(ee&&ee.__isLong__)}Object.defineProperty(P.prototype,"__isLong__",{value:!0}),P.isLong=Fe;var tt={},Se={};function it(ee,_){var ye,Oe,st;return _?(st=0<=(ee>>>=0)&&ee<256)&&(Oe=Se[ee])?Oe:(ye=Ie(ee,(0|ee)<0?-1:0,!0),st&&(Se[ee]=ye),ye):(st=-128<=(ee|=0)&&ee<128)&&(Oe=tt[ee])?Oe:(ye=Ie(ee,ee<0?-1:0,!1),st&&(tt[ee]=ye),ye)}function Me(ee,_){if(isNaN(ee))return _?Zt:ft;if(_){if(ee<0)return Zt;if(ee>=ie)return lt}else{if(ee<=-Ce)return ut;if(ee+1>=Ce)return nt}return ee<0?Me(-ee,_).neg():Ie(ee%te|0,ee/te|0,_)}function Ie(ee,_,ye){return new P(ee,_,ye)}P.fromInt=it,P.fromNumber=Me,P.fromBits=Ie;var We=Math.pow;function we(ee,_,ye){if(0===ee.length)throw Error("empty string");if("NaN"===ee||"Infinity"===ee||"+Infinity"===ee||"-Infinity"===ee)return ft;if("number"==typeof _?(ye=_,_=!1):_=!!_,(ye=ye||10)<2||36<ye)throw RangeError("radix");var Oe;if((Oe=ee.indexOf("-"))>0)throw Error("interior hyphen");if(0===Oe)return we(ee.substring(1),_,ye).neg();for(var st=Me(We(ye,8)),Xe=ft,ht=0;ht<ee.length;ht+=8){var Ft=Math.min(8,ee.length-ht),Lt=parseInt(ee.substring(ht,ht+Ft),ye);if(Ft<8){var Yt=Me(We(ye,Ft));Xe=Xe.mul(Yt).add(Me(Lt))}else Xe=(Xe=Xe.mul(st)).add(Me(Lt))}return Xe.unsigned=_,Xe}function G(ee,_){return"number"==typeof ee?Me(ee,_):"string"==typeof ee?we(ee,_):Ie(ee.low,ee.high,"boolean"==typeof _?_:ee.unsigned)}P.fromString=we,P.fromValue=G;var te=4294967296,ie=te*te,Ce=ie/2,Te=it(1<<24),ft=it(0);P.ZERO=ft;var Zt=it(0,!0);P.UZERO=Zt;var Gt=it(1);P.ONE=Gt;var xs=it(1,!0);P.UONE=xs;var rs=it(-1);P.NEG_ONE=rs;var nt=Ie(-1,2147483647,!1);P.MAX_VALUE=nt;var lt=Ie(-1,-1,!0);P.MAX_UNSIGNED_VALUE=lt;var ut=Ie(0,-2147483648,!1);P.MIN_VALUE=ut;var oe=P.prototype;oe.toInt=function(){return this.unsigned?this.low>>>0:this.low},oe.toNumber=function(){return this.unsigned?(this.high>>>0)*te+(this.low>>>0):this.high*te+(this.low>>>0)},oe.toString=function(_){if((_=_||10)<2||36<_)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(ut)){var ye=Me(_),Oe=this.div(ye),st=Oe.mul(ye).sub(this);return Oe.toString(_)+st.toInt().toString(_)}return"-"+this.neg().toString(_)}for(var Xe=Me(We(_,6),this.unsigned),ht=this,Ft="";;){var Lt=ht.div(Xe),Tt=(ht.sub(Lt.mul(Xe)).toInt()>>>0).toString(_);if((ht=Lt).isZero())return Tt+Ft;for(;Tt.length<6;)Tt="0"+Tt;Ft=""+Tt+Ft}},oe.getHighBits=function(){return this.high},oe.getHighBitsUnsigned=function(){return this.high>>>0},oe.getLowBits=function(){return this.low},oe.getLowBitsUnsigned=function(){return this.low>>>0},oe.getNumBitsAbs=function(){if(this.isNegative())return this.eq(ut)?64:this.neg().getNumBitsAbs();for(var _=0!=this.high?this.high:this.low,ye=31;ye>0&&!(_&1<<ye);ye--);return 0!=this.high?ye+33:ye+1},oe.isZero=function(){return 0===this.high&&0===this.low},oe.eqz=oe.isZero,oe.isNegative=function(){return!this.unsigned&&this.high<0},oe.isPositive=function(){return this.unsigned||this.high>=0},oe.isOdd=function(){return 1==(1&this.low)},oe.isEven=function(){return 0==(1&this.low)},oe.equals=function(_){return Fe(_)||(_=G(_)),(this.unsigned===_.unsigned||this.high>>>31!=1||_.high>>>31!=1)&&this.high===_.high&&this.low===_.low},oe.eq=oe.equals,oe.notEquals=function(_){return!this.eq(_)},oe.neq=oe.notEquals,oe.ne=oe.notEquals,oe.lessThan=function(_){return this.comp(_)<0},oe.lt=oe.lessThan,oe.lessThanOrEqual=function(_){return this.comp(_)<=0},oe.lte=oe.lessThanOrEqual,oe.le=oe.lessThanOrEqual,oe.greaterThan=function(_){return this.comp(_)>0},oe.gt=oe.greaterThan,oe.greaterThanOrEqual=function(_){return this.comp(_)>=0},oe.gte=oe.greaterThanOrEqual,oe.ge=oe.greaterThanOrEqual,oe.compare=function(_){if(Fe(_)||(_=G(_)),this.eq(_))return 0;var ye=this.isNegative(),Oe=_.isNegative();return ye&&!Oe?-1:!ye&&Oe?1:this.unsigned?_.high>>>0>this.high>>>0||_.high===this.high&&_.low>>>0>this.low>>>0?-1:1:this.sub(_).isNegative()?-1:1},oe.comp=oe.compare,oe.negate=function(){return!this.unsigned&&this.eq(ut)?ut:this.not().add(Gt)},oe.neg=oe.negate,oe.add=function(_){Fe(_)||(_=G(_));var Tt=0,$n=0,Pt=0,In=0;return Pt+=(In+=(65535&this.low)+(65535&_.low))>>>16,$n+=(Pt+=(this.low>>>16)+(_.low>>>16))>>>16,Tt+=($n+=(65535&this.high)+(65535&_.high))>>>16,Tt+=(this.high>>>16)+(_.high>>>16),Ie((Pt&=65535)<<16|(In&=65535),(Tt&=65535)<<16|($n&=65535),this.unsigned)},oe.subtract=function(_){return Fe(_)||(_=G(_)),this.add(_.neg())},oe.sub=oe.subtract,oe.multiply=function(_){if(this.isZero())return ft;if(Fe(_)||(_=G(_)),De)return Ie(De.mul(this.low,this.high,_.low,_.high),De.get_high(),this.unsigned);if(_.isZero())return ft;if(this.eq(ut))return _.isOdd()?ut:ft;if(_.eq(ut))return this.isOdd()?ut:ft;if(this.isNegative())return _.isNegative()?this.neg().mul(_.neg()):this.neg().mul(_).neg();if(_.isNegative())return this.mul(_.neg()).neg();if(this.lt(Te)&&_.lt(Te))return Me(this.toNumber()*_.toNumber(),this.unsigned);var st=65535&this.high,Xe=this.low>>>16,ht=65535&this.low,Lt=65535&_.high,Yt=_.low>>>16,Tt=65535&_.low,$n=0,Pt=0,In=0,Dr=0;return In+=(Dr+=ht*Tt)>>>16,Pt+=(In+=Xe*Tt)>>>16,In&=65535,Pt+=(In+=ht*Yt)>>>16,$n+=(Pt+=st*Tt)>>>16,Pt&=65535,$n+=(Pt+=Xe*Yt)>>>16,Pt&=65535,$n+=(Pt+=ht*Lt)>>>16,$n+=(this.high>>>16)*Tt+st*Yt+Xe*Lt+ht*(_.high>>>16),Ie((In&=65535)<<16|(Dr&=65535),($n&=65535)<<16|(Pt&=65535),this.unsigned)},oe.mul=oe.multiply,oe.divide=function(_){if(Fe(_)||(_=G(_)),_.isZero())throw Error("division by zero");var Oe,st,Xe;if(De)return this.unsigned||-2147483648!==this.high||-1!==_.low||-1!==_.high?Ie((this.unsigned?De.div_u:De.div_s)(this.low,this.high,_.low,_.high),De.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?Zt:ft;if(this.unsigned){if(_.unsigned||(_=_.toUnsigned()),_.gt(this))return Zt;if(_.gt(this.shru(1)))return xs;Xe=Zt}else{if(this.eq(ut))return _.eq(Gt)||_.eq(rs)?ut:_.eq(ut)?Gt:(Oe=this.shr(1).div(_).shl(1)).eq(ft)?_.isNegative()?Gt:rs:(st=this.sub(_.mul(Oe)),Xe=Oe.add(st.div(_)));if(_.eq(ut))return this.unsigned?Zt:ft;if(this.isNegative())return _.isNegative()?this.neg().div(_.neg()):this.neg().div(_).neg();if(_.isNegative())return this.div(_.neg()).neg();Xe=ft}for(st=this;st.gte(_);){Oe=Math.max(1,Math.floor(st.toNumber()/_.toNumber()));for(var Ft=Math.ceil(Math.log(Oe)/Math.LN2),Lt=Ft<=48?1:We(2,Ft-48),Yt=Me(Oe),Tt=Yt.mul(_);Tt.isNegative()||Tt.gt(st);)Tt=(Yt=Me(Oe-=Lt,this.unsigned)).mul(_);Yt.isZero()&&(Yt=Gt),Xe=Xe.add(Yt),st=st.sub(Tt)}return Xe},oe.div=oe.divide,oe.modulo=function(_){return Fe(_)||(_=G(_)),De?Ie((this.unsigned?De.rem_u:De.rem_s)(this.low,this.high,_.low,_.high),De.get_high(),this.unsigned):this.sub(this.div(_).mul(_))},oe.mod=oe.modulo,oe.rem=oe.modulo,oe.not=function(){return Ie(~this.low,~this.high,this.unsigned)},oe.and=function(_){return Fe(_)||(_=G(_)),Ie(this.low&_.low,this.high&_.high,this.unsigned)},oe.or=function(_){return Fe(_)||(_=G(_)),Ie(this.low|_.low,this.high|_.high,this.unsigned)},oe.xor=function(_){return Fe(_)||(_=G(_)),Ie(this.low^_.low,this.high^_.high,this.unsigned)},oe.shiftLeft=function(_){return Fe(_)&&(_=_.toInt()),0==(_&=63)?this:_<32?Ie(this.low<<_,this.high<<_|this.low>>>32-_,this.unsigned):Ie(0,this.low<<_-32,this.unsigned)},oe.shl=oe.shiftLeft,oe.shiftRight=function(_){return Fe(_)&&(_=_.toInt()),0==(_&=63)?this:_<32?Ie(this.low>>>_|this.high<<32-_,this.high>>_,this.unsigned):Ie(this.high>>_-32,this.high>=0?0:-1,this.unsigned)},oe.shr=oe.shiftRight,oe.shiftRightUnsigned=function(_){if(Fe(_)&&(_=_.toInt()),0==(_&=63))return this;var ye=this.high;return _<32?Ie(this.low>>>_|ye<<32-_,ye>>>_,this.unsigned):Ie(32===_?ye:ye>>>_-32,0,this.unsigned)},oe.shru=oe.shiftRightUnsigned,oe.shr_u=oe.shiftRightUnsigned,oe.toSigned=function(){return this.unsigned?Ie(this.low,this.high,!1):this},oe.toUnsigned=function(){return this.unsigned?this:Ie(this.low,this.high,!0)},oe.toBytes=function(_){return _?this.toBytesLE():this.toBytesBE()},oe.toBytesLE=function(){var _=this.high,ye=this.low;return[255&ye,ye>>>8&255,ye>>>16&255,ye>>>24,255&_,_>>>8&255,_>>>16&255,_>>>24]},oe.toBytesBE=function(){var _=this.high,ye=this.low;return[_>>>24,_>>>16&255,_>>>8&255,255&_,ye>>>24,ye>>>16&255,ye>>>8&255,255&ye]},P.fromBytes=function(_,ye,Oe){return Oe?P.fromBytesLE(_,ye):P.fromBytesBE(_,ye)},P.fromBytesLE=function(_,ye){return new P(_[0]|_[1]<<8|_[2]<<16|_[3]<<24,_[4]|_[5]<<8|_[6]<<16|_[7]<<24,ye)},P.fromBytesBE=function(_,ye){return new P(_[4]<<24|_[5]<<16|_[6]<<8|_[7],_[0]<<24|_[1]<<16|_[2]<<8|_[3],ye)}},9128:(he,De,P)=>{var Fe=P(9864),tt=P(3919),Se=P(3263),it=P(5353),Me=P(3358),Ie=P(3789),We=P(2508);We.alea=Fe,We.xor128=tt,We.xorwow=Se,We.xorshift7=it,We.xor4096=Me,We.tychei=Ie,he.exports=We},9864:function(he,De,P){var Fe;!function(tt,Se,it){function Me(G){var ce=this,ge=function we(){var G=4022871197;return function(ge){ge=String(ge);for(var te=0;te<ge.length;te++){var ie=.02519603282416938*(G+=ge.charCodeAt(te));ie-=G=ie>>>0,G=(ie*=G)>>>0,G+=4294967296*(ie-=G)}return 2.3283064365386963e-10*(G>>>0)}}();ce.next=function(){var te=2091639*ce.s0+2.3283064365386963e-10*ce.c;return ce.s0=ce.s1,ce.s1=ce.s2,ce.s2=te-(ce.c=0|te)},ce.c=1,ce.s0=ge(" "),ce.s1=ge(" "),ce.s2=ge(" "),ce.s0-=ge(G),ce.s0<0&&(ce.s0+=1),ce.s1-=ge(G),ce.s1<0&&(ce.s1+=1),ce.s2-=ge(G),ce.s2<0&&(ce.s2+=1),ge=null}function Ie(G,ce){return ce.c=G.c,ce.s0=G.s0,ce.s1=G.s1,ce.s2=G.s2,ce}function We(G,ce){var ge=new Me(G),te=ce&&ce.state,ie=ge.next;return ie.int32=function(){return 4294967296*ge.next()|0},ie.double=function(){return ie()+11102230246251565e-32*(2097152*ie()|0)},ie.quick=ie,te&&("object"==typeof te&&Ie(te,ge),ie.state=function(){return Ie(ge,{})}),ie}Se&&Se.exports?Se.exports=We:P.amdD&&P.amdO?void 0!==(Fe=function(){return We}.call(De,P,De,Se))&&(Se.exports=Fe):this.alea=We}(0,he=P.nmd(he))},3789:function(he,De,P){var Fe;!function(tt,Se,it){function Me(we){var G=this,ce="";G.next=function(){var te=G.b,ie=G.c,Ce=G.d,Te=G.a;return te=te<<25^te>>>7^ie,ie=ie-Ce|0,Ce=Ce<<24^Ce>>>8^Te,Te=Te-te|0,G.b=te=te<<20^te>>>12^ie,G.c=ie=ie-Ce|0,G.d=Ce<<16^ie>>>16^Te,G.a=Te-te|0},G.a=0,G.b=0,G.c=-1640531527,G.d=1367130551,we===Math.floor(we)?(G.a=we/4294967296|0,G.b=0|we):ce+=we;for(var ge=0;ge<ce.length+20;ge++)G.b^=0|ce.charCodeAt(ge),G.next()}function Ie(we,G){return G.a=we.a,G.b=we.b,G.c=we.c,G.d=we.d,G}function We(we,G){var ce=new Me(we),ge=G&&G.state,te=function(){return(ce.next()>>>0)/4294967296};return te.double=function(){do{var Te=((ce.next()>>>11)+(ce.next()>>>0)/4294967296)/(1<<21)}while(0===Te);return Te},te.int32=ce.next,te.quick=te,ge&&("object"==typeof ge&&Ie(ge,ce),te.state=function(){return Ie(ce,{})}),te}Se&&Se.exports?Se.exports=We:P.amdD&&P.amdO?void 0!==(Fe=function(){return We}.call(De,P,De,Se))&&(Se.exports=Fe):this.tychei=We}(0,he=P.nmd(he))},3919:function(he,De,P){var Fe;!function(tt,Se,it){function Me(we){var G=this,ce="";G.x=0,G.y=0,G.z=0,G.w=0,G.next=function(){var te=G.x^G.x<<11;return G.x=G.y,G.y=G.z,G.z=G.w,G.w^=G.w>>>19^te^te>>>8},we===(0|we)?G.x=we:ce+=we;for(var ge=0;ge<ce.length+64;ge++)G.x^=0|ce.charCodeAt(ge),G.next()}function Ie(we,G){return G.x=we.x,G.y=we.y,G.z=we.z,G.w=we.w,G}function We(we,G){var ce=new Me(we),ge=G&&G.state,te=function(){return(ce.next()>>>0)/4294967296};return te.double=function(){do{var Te=((ce.next()>>>11)+(ce.next()>>>0)/4294967296)/(1<<21)}while(0===Te);return Te},te.int32=ce.next,te.quick=te,ge&&("object"==typeof ge&&Ie(ge,ce),te.state=function(){return Ie(ce,{})}),te}Se&&Se.exports?Se.exports=We:P.amdD&&P.amdO?void 0!==(Fe=function(){return We}.call(De,P,De,Se))&&(Se.exports=Fe):this.xor128=We}(0,he=P.nmd(he))},3358:function(he,De,P){var Fe;!function(tt,Se,it){function Me(we){var G=this;G.next=function(){var Ce,Te,ge=G.w,te=G.X,ie=G.i;return G.w=ge=ge+1640531527|0,Te=te[ie+34&127],Ce=te[ie=ie+1&127],Te^=Te<<13,Ce^=Ce<<17,Te=te[ie]=(Te^=Te>>>15)^(Ce^=Ce>>>12),G.i=ie,Te+(ge^ge>>>16)|0},function ce(ge,te){var ie,Ce,Te,ft,Zt,Gt=[],xs=128;for(te===(0|te)?(Ce=te,te=null):(te+="\0",Ce=0,xs=Math.max(xs,te.length)),Te=0,ft=-32;ft<xs;++ft)te&&(Ce^=te.charCodeAt((ft+32)%te.length)),0===ft&&(Zt=Ce),Ce^=Ce<<10,Ce^=Ce>>>15,Ce^=Ce<<4,Ce^=Ce>>>13,ft>=0&&(Te=0==(ie=Gt[127&ft]^=Ce+(Zt=Zt+1640531527|0))?Te+1:0);for(Te>=128&&(Gt[127&(te&&te.length||0)]=-1),Te=127,ft=512;ft>0;--ft)Ce=Gt[Te+34&127],ie=Gt[Te=Te+1&127],Ce^=Ce<<13,ie^=ie<<17,Gt[Te]=(Ce^=Ce>>>15)^(ie^=ie>>>12);ge.w=Zt,ge.X=Gt,ge.i=Te}(G,we)}function Ie(we,G){return G.i=we.i,G.w=we.w,G.X=we.X.slice(),G}function We(we,G){null==we&&(we=+new Date);var ce=new Me(we),ge=G&&G.state,te=function(){return(ce.next()>>>0)/4294967296};return te.double=function(){do{var Te=((ce.next()>>>11)+(ce.next()>>>0)/4294967296)/(1<<21)}while(0===Te);return Te},te.int32=ce.next,te.quick=te,ge&&(ge.X&&Ie(ge,ce),te.state=function(){return Ie(ce,{})}),te}Se&&Se.exports?Se.exports=We:P.amdD&&P.amdO?void 0!==(Fe=function(){return We}.call(De,P,De,Se))&&(Se.exports=Fe):this.xor4096=We}(0,he=P.nmd(he))},5353:function(he,De,P){var Fe;!function(tt,Se,it){function Me(we){var G=this;G.next=function(){var ie,Ce,ge=G.x,te=G.i;return ie=ge[te],Ce=(ie^=ie>>>7)^ie<<24,Ce^=(ie=ge[te+1&7])^ie>>>10,Ce^=(ie=ge[te+3&7])^ie>>>3,Ce^=(ie=ge[te+4&7])^ie<<7,ie=ge[te+7&7],ge[te]=Ce^=(ie^=ie<<13)^ie<<9,G.i=te+1&7,Ce},function ce(ge,te){var ie,Te=[];if(te===(0|te))Te[0]=te;else for(te=""+te,ie=0;ie<te.length;++ie)Te[7&ie]=Te[7&ie]<<15^te.charCodeAt(ie)+Te[ie+1&7]<<13;for(;Te.length<8;)Te.push(0);for(ie=0;ie<8&&0===Te[ie];++ie);for(8==ie&&(Te[7]=-1),ge.x=Te,ge.i=0,ie=256;ie>0;--ie)ge.next()}(G,we)}function Ie(we,G){return G.x=we.x.slice(),G.i=we.i,G}function We(we,G){null==we&&(we=+new Date);var ce=new Me(we),ge=G&&G.state,te=function(){return(ce.next()>>>0)/4294967296};return te.double=function(){do{var Te=((ce.next()>>>11)+(ce.next()>>>0)/4294967296)/(1<<21)}while(0===Te);return Te},te.int32=ce.next,te.quick=te,ge&&(ge.x&&Ie(ge,ce),te.state=function(){return Ie(ce,{})}),te}Se&&Se.exports?Se.exports=We:P.amdD&&P.amdO?void 0!==(Fe=function(){return We}.call(De,P,De,Se))&&(Se.exports=Fe):this.xorshift7=We}(0,he=P.nmd(he))},3263:function(he,De,P){var Fe;!function(tt,Se,it){function Me(we){var G=this,ce="";G.next=function(){var te=G.x^G.x>>>2;return G.x=G.y,G.y=G.z,G.z=G.w,G.w=G.v,(G.d=G.d+362437|0)+(G.v=G.v^G.v<<4^te^te<<1)|0},G.x=0,G.y=0,G.z=0,G.w=0,G.v=0,we===(0|we)?G.x=we:ce+=we;for(var ge=0;ge<ce.length+64;ge++)G.x^=0|ce.charCodeAt(ge),ge==ce.length&&(G.d=G.x<<10^G.x>>>4),G.next()}function Ie(we,G){return G.x=we.x,G.y=we.y,G.z=we.z,G.w=we.w,G.v=we.v,G.d=we.d,G}function We(we,G){var ce=new Me(we),ge=G&&G.state,te=function(){return(ce.next()>>>0)/4294967296};return te.double=function(){do{var Te=((ce.next()>>>11)+(ce.next()>>>0)/4294967296)/(1<<21)}while(0===Te);return Te},te.int32=ce.next,te.quick=te,ge&&("object"==typeof ge&&Ie(ge,ce),te.state=function(){return Ie(ce,{})}),te}Se&&Se.exports?Se.exports=We:P.amdD&&P.amdO?void 0!==(Fe=function(){return We}.call(De,P,De,Se))&&(Se.exports=Fe):this.xorwow=We}(0,he=P.nmd(he))},2508:function(he,De,P){var Fe;!function(tt,Se,it){var ie,Me=256,G=it.pow(Me,6),ce=it.pow(2,52),ge=2*ce,te=Me-1;function Ce(nt,lt,ut){var oe=[],ee=Gt(Zt((lt=1==lt?{entropy:!0}:lt||{}).entropy?[nt,rs(Se)]:nt??function xs(){try{var nt;return ie&&(nt=ie.randomBytes)?nt=nt(Me):(nt=new Uint8Array(Me),(tt.crypto||tt.msCrypto).getRandomValues(nt)),rs(nt)}catch{var lt=tt.navigator,ut=lt&&lt.plugins;return[+new Date,tt,ut,tt.screen,rs(Se)]}}(),3),oe),_=new Te(oe),ye=function(){for(var Oe=_.g(6),st=G,Xe=0;Oe<ce;)Oe=(Oe+Xe)*Me,st*=Me,Xe=_.g(1);for(;Oe>=ge;)Oe/=2,st/=2,Xe>>>=1;return(Oe+Xe)/st};return ye.int32=function(){return 0|_.g(4)},ye.quick=function(){return _.g(4)/4294967296},ye.double=ye,Gt(rs(_.S),Se),(lt.pass||ut||function(Oe,st,Xe,ht){return ht&&(ht.S&&ft(ht,_),Oe.state=function(){return ft(_,{})}),Xe?(it.random=Oe,st):Oe})(ye,ee,"global"in lt?lt.global:this==it,lt.state)}function Te(nt){var lt,ut=nt.length,oe=this,ee=0,_=oe.i=oe.j=0,ye=oe.S=[];for(ut||(nt=[ut++]);ee<Me;)ye[ee]=ee++;for(ee=0;ee<Me;ee++)ye[ee]=ye[_=te&_+nt[ee%ut]+(lt=ye[ee])],ye[_]=lt;(oe.g=function(Oe){for(var st,Xe=0,ht=oe.i,Ft=oe.j,Lt=oe.S;Oe--;)st=Lt[ht=te&ht+1],Xe=Xe*Me+Lt[te&(Lt[ht]=Lt[Ft=te&Ft+st])+(Lt[Ft]=st)];return oe.i=ht,oe.j=Ft,Xe})(Me)}function ft(nt,lt){return lt.i=nt.i,lt.j=nt.j,lt.S=nt.S.slice(),lt}function Zt(nt,lt){var ee,ut=[],oe=typeof nt;if(lt&&"object"==oe)for(ee in nt)try{ut.push(Zt(nt[ee],lt-1))}catch{}return ut.length?ut:"string"==oe?nt:nt+"\0"}function Gt(nt,lt){for(var oe,ut=nt+"",ee=0;ee<ut.length;)lt[te&ee]=te&(oe^=19*lt[te&ee])+ut.charCodeAt(ee++);return rs(lt)}function rs(nt){return String.fromCharCode.apply(0,nt)}if(Gt(it.random(),Se),he.exports){he.exports=Ce;try{ie=P(5042)}catch{}}else void 0!==(Fe=function(){return Ce}.call(De,P,De,he))&&(he.exports=Fe)}(typeof self<"u"?self:this,[],Math)},5410:()=>{},8628:()=>{},1601:()=>{},7792:()=>{},4977:()=>{},5042:()=>{}},ab={};function He(he){var De=ab[he];if(void 0!==De)return De.exports;var P=ab[he]={id:he,loaded:!1,exports:{}};return ob[he].call(P.exports,P,P.exports,He),P.loaded=!0,P.exports}He.m=ob,He.x=()=>{var he=He.O(void 0,[173,592],()=>He(1005));return He.O(he)},He.amdD=function(){throw new Error("define cannot be used indirect")},He.amdO={},he=[],He.O=(De,P,Fe,tt)=>{if(!P){var it=1/0;for(Se=0;Se<he.length;Se++){for(var[P,Fe,tt]=he[Se],Me=!0,Ie=0;Ie<P.length;Ie++)(!1&tt||it>=tt)&&Object.keys(He.O).every(te=>He.O[te](P[Ie]))?P.splice(Ie--,1):(Me=!1,tt<it&&(it=tt));if(Me){he.splice(Se--,1);var We=Fe();void 0!==We&&(De=We)}}return De}tt=tt||0;for(var Se=he.length;Se>0&&he[Se-1][2]>tt;Se--)he[Se]=he[Se-1];he[Se]=[P,Fe,tt]},He.n=he=>{var De=he&&he.__esModule?()=>he.default:()=>he;return He.d(De,{a:De}),De},He.d=(he,De)=>{for(var P in De)He.o(De,P)&&!He.o(he,P)&&Object.defineProperty(he,P,{enumerable:!0,get:De[P]})},He.f={},He.e=he=>Promise.all(Object.keys(He.f).reduce((De,P)=>(He.f[P](he,De),De),[])),He.u=he=>(592===he?"common":he)+"."+{173:"839bfb51a07b34c6",592:"c39a7728a241b176"}[he]+".js",He.miniCssF=he=>{},He.o=(he,De)=>Object.prototype.hasOwnProperty.call(he,De),He.r=he=>{typeof Symbol<"u"&&Symbol.toStringTag&&Object.defineProperty(he,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(he,"__esModule",{value:!0})},He.nmd=he=>(he.paths=[],he.children||(he.children=[]),he),He.j=5,(()=>{var he;He.tt=()=>(void 0===he&&(he={createScriptURL:De=>De},typeof trustedTypes<"u"&&trustedTypes.createPolicy&&(he=trustedTypes.createPolicy("angular#bundler",he))),he)})(),He.tu=he=>He.tt().createScriptURL(he),He.p="",(()=>{var he={5:1};He.f.i=(tt,Se)=>{he[tt]||importScripts(He.tu(He.p+He.u(tt)))};var P=self.webpackChunkgrade_scope_istic=self.webpackChunkgrade_scope_istic||[],Fe=P.push.bind(P);P.push=tt=>{var[Se,it,Me]=tt;for(var Ie in it)He.o(it,Ie)&&(He.m[Ie]=it[Ie]);for(Me&&Me(He);Se.length;)he[Se.pop()]=1;Fe(tt)}})(),(()=>{var he=He.x;He.x=()=>Promise.all([He.e(173),He.e(592)]).then(he)})(),He.x()})();